
full_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800a518  0800a518  0001a518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa8  0800aaa8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800aaa8  0800aaa8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aaa8  0800aaa8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800aab0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002784  20000088  0800ab38  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000280c  0800ab38  0002280c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113b5  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003261  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00034718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca0  00000000  00000000  000357b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023055  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018148  00000000  00000000  000594ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2068  00000000  00000000  000715f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bc8  00000000  00000000  00133660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00138228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4fc 	.word	0x0800a4fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a4fc 	.word	0x0800a4fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <read_callibration_data>:
#define atmPress 101325 //Pa



// starts reading the sensor data
void read_callibration_data (void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000ca2:	23aa      	movs	r3, #170	; 0xaa
 8000ca4:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef hal_stat = HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, HAL_MAX_DELAY);
 8000ca6:	8bfa      	ldrh	r2, [r7, #30]
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	2316      	movs	r3, #22
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	21ee      	movs	r1, #238	; 0xee
 8000cba:	4837      	ldr	r0, [pc, #220]	; (8000d98 <read_callibration_data+0x110>)
 8000cbc:	f002 fc1e 	bl	80034fc <HAL_I2C_Mem_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	777b      	strb	r3, [r7, #29]

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	797b      	ldrb	r3, [r7, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <read_callibration_data+0x114>)
 8000cd4:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <read_callibration_data+0x118>)
 8000ce6:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000ce8:	7a3b      	ldrb	r3, [r7, #8]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	7a7b      	ldrb	r3, [r7, #9]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <read_callibration_data+0x11c>)
 8000cf8:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000cfa:	7abb      	ldrb	r3, [r7, #10]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	7afb      	ldrb	r3, [r7, #11]
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <read_callibration_data+0x120>)
 8000d0c:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000d0e:	7b3b      	ldrb	r3, [r7, #12]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <read_callibration_data+0x124>)
 8000d20:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <read_callibration_data+0x128>)
 8000d34:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000d36:	7c3b      	ldrb	r3, [r7, #16]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	7c7b      	ldrb	r3, [r7, #17]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <read_callibration_data+0x12c>)
 8000d46:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000d48:	7cbb      	ldrb	r3, [r7, #18]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	7cfb      	ldrb	r3, [r7, #19]
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <read_callibration_data+0x130>)
 8000d58:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000d5a:	7d3b      	ldrb	r3, [r7, #20]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	7d7b      	ldrb	r3, [r7, #21]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <read_callibration_data+0x134>)
 8000d6a:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <read_callibration_data+0x138>)
 8000d7c:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000d7e:	7e3b      	ldrb	r3, [r7, #24]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	7e7b      	ldrb	r3, [r7, #25]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <read_callibration_data+0x13c>)
 8000d8e:	801a      	strh	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200022ec 	.word	0x200022ec
 8000d9c:	200000a4 	.word	0x200000a4
 8000da0:	200000a6 	.word	0x200000a6
 8000da4:	200000a8 	.word	0x200000a8
 8000da8:	200000aa 	.word	0x200000aa
 8000dac:	200000ac 	.word	0x200000ac
 8000db0:	200000ae 	.word	0x200000ae
 8000db4:	200000b0 	.word	0x200000b0
 8000db8:	200000b2 	.word	0x200000b2
 8000dbc:	200000b4 	.word	0x200000b4
 8000dc0:	200000b6 	.word	0x200000b6
 8000dc4:	200000b8 	.word	0x200000b8

08000dc8 <Get_UTemp>:


// Get uncompensated Temp
void Get_UTemp (BMP180_t *Datastruct){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x2E;
 8000dd0:	232e      	movs	r3, #46	; 0x2e
 8000dd2:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_RAW[2] = {0};
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef hal_stat_wr = HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	f107 030d 	add.w	r3, r7, #13
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	22f4      	movs	r2, #244	; 0xf4
 8000dec:	21ee      	movs	r1, #238	; 0xee
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <Get_UTemp+0x74>)
 8000df0:	f002 fa70 	bl	80032d4 <HAL_I2C_Mem_Write>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay (5);  // wait 4.5 ms
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f001 ff43 	bl	8002c84 <HAL_Delay>
	HAL_StatusTypeDef hal_stat = HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2302      	movs	r3, #2
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	22f6      	movs	r2, #246	; 0xf6
 8000e12:	21ee      	movs	r1, #238	; 0xee
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <Get_UTemp+0x74>)
 8000e16:	f002 fb71 	bl	80034fc <HAL_I2C_Mem_Read>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73bb      	strb	r3, [r7, #14]
	Datastruct->Temperature_RAW = ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	7a7b      	ldrb	r3, [r7, #9]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	801a      	strh	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200022ec 	.word	0x200022ec

08000e40 <BMP180_Get_Temp>:

// Updates the temperature
void BMP180_Get_Temp (BMP180_t *Datastruct){
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	Get_UTemp(Datastruct);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffbd 	bl	8000dc8 <Get_UTemp>
	UT = Datastruct->Temperature_RAW;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <BMP180_Get_Temp+0x108>)
 8000e56:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <BMP180_Get_Temp+0x108>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a3b      	ldr	r2, [pc, #236]	; (8000f4c <BMP180_Get_Temp+0x10c>)
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb5e 	bl	8000524 <__aeabi_i2d>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <BMP180_Get_Temp+0x110>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb57 	bl	8000524 <__aeabi_i2d>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <BMP180_Get_Temp+0x114>)
 8000e7c:	f7ff fce6 	bl	800084c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	f7ff fbb6 	bl	80005f8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fe60 	bl	8000b58 <__aeabi_d2iz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <BMP180_Get_Temp+0x118>)
 8000e9c:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <BMP180_Get_Temp+0x11c>)
 8000ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb3d 	bl	8000524 <__aeabi_i2d>
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <BMP180_Get_Temp+0x120>)
 8000eb0:	f7ff fba2 	bl	80005f8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4614      	mov	r4, r2
 8000eba:	461d      	mov	r5, r3
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <BMP180_Get_Temp+0x124>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <BMP180_Get_Temp+0x118>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb2a 	bl	8000524 <__aeabi_i2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	f7ff fcb8 	bl	800084c <__aeabi_ddiv>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fe38 	bl	8000b58 <__aeabi_d2iz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <BMP180_Get_Temp+0x128>)
 8000eec:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <BMP180_Get_Temp+0x118>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <BMP180_Get_Temp+0x128>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <BMP180_Get_Temp+0x12c>)
 8000efa:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <BMP180_Get_Temp+0x12c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3308      	adds	r3, #8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb0e 	bl	8000524 <__aeabi_i2d>
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <BMP180_Get_Temp+0x130>)
 8000f0e:	f7ff fc9d 	bl	800084c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4917      	ldr	r1, [pc, #92]	; (8000f74 <BMP180_Get_Temp+0x134>)
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
	Datastruct->Temperature = Temp / 10.0;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <BMP180_Get_Temp+0x134>)
 8000f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <BMP180_Get_Temp+0x138>)
 8000f28:	f7ff fc90 	bl	800084c <__aeabi_ddiv>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fe58 	bl	8000be8 <__aeabi_d2f>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bdb0      	pop	{r4, r5, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000bc 	.word	0x200000bc
 8000f4c:	200000ae 	.word	0x200000ae
 8000f50:	200000ac 	.word	0x200000ac
 8000f54:	40e00000 	.word	0x40e00000
 8000f58:	200000c4 	.word	0x200000c4
 8000f5c:	200000b6 	.word	0x200000b6
 8000f60:	40a00000 	.word	0x40a00000
 8000f64:	200000b8 	.word	0x200000b8
 8000f68:	200000c8 	.word	0x200000c8
 8000f6c:	200000d4 	.word	0x200000d4
 8000f70:	40300000 	.word	0x40300000
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	40240000 	.word	0x40240000

08000f7c <Get_UPress>:

// Get uncompensated Pressure
// oss = oversampling something, currently commented out
void Get_UPress (BMP180_t *Datastruct, int oss){   // oversampling setting 0,1,2,3
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	uint8_t datatowrite = 0x34+(oss<<6);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	019b      	lsls	r3, r3, #6
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3334      	adds	r3, #52	; 0x34
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <Get_UPress+0x80>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	81bb      	strh	r3, [r7, #12]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 030f 	add.w	r3, r7, #15
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	22f4      	movs	r2, #244	; 0xf4
 8000fb2:	21ee      	movs	r1, #238	; 0xee
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <Get_UPress+0x84>)
 8000fb6:	f002 f98d 	bl	80032d4 <HAL_I2C_Mem_Write>
//			break;
//		case (3):
//			HAL_Delay (26);
//			break;
//	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	22f6      	movs	r2, #246	; 0xf6
 8000fce:	21ee      	movs	r1, #238	; 0xee
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <Get_UPress+0x84>)
 8000fd2:	f002 fa93 	bl	80034fc <HAL_I2C_Mem_Read>
	Datastruct->Pressure_RAW = (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4413      	add	r3, r2
 8000fe0:	7bba      	ldrb	r2, [r7, #14]
 8000fe2:	441a      	add	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f1c3 0308 	rsb	r3, r3, #8
 8000fea:	fa42 f303 	asr.w	r3, r2, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	0800a518 	.word	0x0800a518
 8001000:	200022ec 	.word	0x200022ec
 8001004:	00000000 	.word	0x00000000

08001008 <BMP180_Get_Press>:

// Updates the pressure
void BMP180_Get_Press (BMP180_t *Datastruct, int oss){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	Get_UPress(Datastruct, oss);
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffb1 	bl	8000f7c <Get_UPress>
	UP = Datastruct->Pressure_RAW;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	461a      	mov	r2, r3
 8001020:	4baa      	ldr	r3, [pc, #680]	; (80012cc <BMP180_Get_Press+0x2c4>)
 8001022:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001024:	4baa      	ldr	r3, [pc, #680]	; (80012d0 <BMP180_Get_Press+0x2c8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4aaa      	ldr	r2, [pc, #680]	; (80012d4 <BMP180_Get_Press+0x2cc>)
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa78 	bl	8000524 <__aeabi_i2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	4ba7      	ldr	r3, [pc, #668]	; (80012d8 <BMP180_Get_Press+0x2d0>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa71 	bl	8000524 <__aeabi_i2d>
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4ba5      	ldr	r3, [pc, #660]	; (80012dc <BMP180_Get_Press+0x2d4>)
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff fad0 	bl	80005f8 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd7a 	bl	8000b58 <__aeabi_d2iz>
 8001064:	4603      	mov	r3, r0
 8001066:	4a9e      	ldr	r2, [pc, #632]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 8001068:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800106a:	4b9e      	ldr	r3, [pc, #632]	; (80012e4 <BMP180_Get_Press+0x2dc>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa57 	bl	8000524 <__aeabi_i2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <BMP180_Get_Press+0x2e0>)
 800107c:	f7ff fabc 	bl	80005f8 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4614      	mov	r4, r2
 8001086:	461d      	mov	r5, r3
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <BMP180_Get_Press+0x2e4>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	461a      	mov	r2, r3
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa44 	bl	8000524 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff fbd2 	bl	800084c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd52 	bl	8000b58 <__aeabi_d2iz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a8e      	ldr	r2, [pc, #568]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 80010b8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80010ba:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a8b      	ldr	r2, [pc, #556]	; (80012f4 <BMP180_Get_Press+0x2ec>)
 80010c6:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80010c8:	4b8a      	ldr	r3, [pc, #552]	; (80012f4 <BMP180_Get_Press+0x2ec>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80010d0:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 80010d2:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80010d4:	4b89      	ldr	r3, [pc, #548]	; (80012fc <BMP180_Get_Press+0x2f4>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa22 	bl	8000524 <__aeabi_i2d>
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
 80010e4:	4b84      	ldr	r3, [pc, #528]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a83      	ldr	r2, [pc, #524]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa17 	bl	8000524 <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b81      	ldr	r3, [pc, #516]	; (8001300 <BMP180_Get_Press+0x2f8>)
 80010fc:	f7ff fba6 	bl	800084c <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <BMP180_Get_Press+0x2e0>)
 800111a:	f7ff fb97 	bl	800084c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd17 	bl	8000b58 <__aeabi_d2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 800112e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001130:	4b74      	ldr	r3, [pc, #464]	; (8001304 <BMP180_Get_Press+0x2fc>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	461a      	mov	r2, r3
 8001138:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9ef 	bl	8000524 <__aeabi_i2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <BMP180_Get_Press+0x2e0>)
 800114c:	f7ff fb7e 	bl	800084c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fcfe 	bl	8000b58 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 8001160:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a66      	ldr	r2, [pc, #408]	; (8001308 <BMP180_Get_Press+0x300>)
 800116e:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <BMP180_Get_Press+0x304>)
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	009a      	lsls	r2, r3, #2
 8001178:	4b63      	ldr	r3, [pc, #396]	; (8001308 <BMP180_Get_Press+0x300>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	441a      	add	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	3302      	adds	r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <BMP180_Get_Press+0x184>
 800118a:	3303      	adds	r3, #3
 800118c:	109b      	asrs	r3, r3, #2
 800118e:	461a      	mov	r2, r3
 8001190:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <BMP180_Get_Press+0x308>)
 8001192:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001194:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <BMP180_Get_Press+0x30c>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	461a      	mov	r2, r3
 800119c:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <BMP180_Get_Press+0x310>)
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fccc 	bl	8000b58 <__aeabi_d2iz>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 80011c4:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80011c6:	4b55      	ldr	r3, [pc, #340]	; (800131c <BMP180_Get_Press+0x314>)
 80011c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9a9 	bl	8000524 <__aeabi_i2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <BMP180_Get_Press+0x2f0>)
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f99e 	bl	8000524 <__aeabi_i2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b44      	ldr	r3, [pc, #272]	; (8001300 <BMP180_Get_Press+0x2f8>)
 80011ee:	f7ff fb2d 	bl	800084c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f9fd 	bl	80005f8 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <BMP180_Get_Press+0x318>)
 800120c:	f7ff fb1e 	bl	800084c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc9e 	bl	8000b58 <__aeabi_d2iz>
 800121c:	4603      	mov	r3, r0
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 8001220:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <BMP180_Get_Press+0x2d8>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <BMP180_Get_Press+0x2e8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	3302      	adds	r3, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f978 	bl	8000524 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <BMP180_Get_Press+0x31c>)
 800123a:	f7ff fb07 	bl	800084c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fc87 	bl	8000b58 <__aeabi_d2iz>
 800124a:	4603      	mov	r3, r0
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <BMP180_Get_Press+0x300>)
 800124e:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <BMP180_Get_Press+0x320>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <BMP180_Get_Press+0x300>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f94e 	bl	8000504 <__aeabi_ui2d>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <BMP180_Get_Press+0x2d4>)
 800126e:	f7ff faed 	bl	800084c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc95 	bl	8000ba8 <__aeabi_d2uiz>
 800127e:	4603      	mov	r3, r0
 8001280:	4a2a      	ldr	r2, [pc, #168]	; (800132c <BMP180_Get_Press+0x324>)
 8001282:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <BMP180_Get_Press+0x2c4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <BMP180_Get_Press+0x308>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	fa41 f202 	asr.w	r2, r1, r2
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <BMP180_Get_Press+0x328>)
 80012a0:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <BMP180_Get_Press+0x328>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db46      	blt.n	8001338 <BMP180_Get_Press+0x330>
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <BMP180_Get_Press+0x328>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	005a      	lsls	r2, r3, #1
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <BMP180_Get_Press+0x324>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f923 	bl	8000504 <__aeabi_ui2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	491c      	ldr	r1, [pc, #112]	; (8001334 <BMP180_Get_Press+0x32c>)
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
 80012c8:	e045      	b.n	8001356 <BMP180_Get_Press+0x34e>
 80012ca:	bf00      	nop
 80012cc:	200000c0 	.word	0x200000c0
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	200000ae 	.word	0x200000ae
 80012d8:	200000ac 	.word	0x200000ac
 80012dc:	40e00000 	.word	0x40e00000
 80012e0:	200000c4 	.word	0x200000c4
 80012e4:	200000b6 	.word	0x200000b6
 80012e8:	40a00000 	.word	0x40a00000
 80012ec:	200000b8 	.word	0x200000b8
 80012f0:	200000c8 	.word	0x200000c8
 80012f4:	200000d4 	.word	0x200000d4
 80012f8:	200000dc 	.word	0x200000dc
 80012fc:	200000b2 	.word	0x200000b2
 8001300:	40b00000 	.word	0x40b00000
 8001304:	200000a6 	.word	0x200000a6
 8001308:	200000cc 	.word	0x200000cc
 800130c:	200000a4 	.word	0x200000a4
 8001310:	200000d0 	.word	0x200000d0
 8001314:	200000a8 	.word	0x200000a8
 8001318:	40c00000 	.word	0x40c00000
 800131c:	200000b0 	.word	0x200000b0
 8001320:	40f00000 	.word	0x40f00000
 8001324:	40100000 	.word	0x40100000
 8001328:	200000aa 	.word	0x200000aa
 800132c:	200000d8 	.word	0x200000d8
 8001330:	200000e0 	.word	0x200000e0
 8001334:	200000e8 	.word	0x200000e8
	else Press = (B7/B4)*2;
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <BMP180_Get_Press+0x458>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b49      	ldr	r3, [pc, #292]	; (8001464 <BMP180_Get_Press+0x45c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8dc 	bl	8000504 <__aeabi_ui2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4945      	ldr	r1, [pc, #276]	; (8001468 <BMP180_Get_Press+0x460>)
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <BMP180_Get_Press+0x460>)
 8001358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b42      	ldr	r3, [pc, #264]	; (800146c <BMP180_Get_Press+0x464>)
 8001362:	f7ff fa73 	bl	800084c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <BMP180_Get_Press+0x460>)
 8001370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <BMP180_Get_Press+0x464>)
 800137a:	f7ff fa67 	bl	800084c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7ff f937 	bl	80005f8 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fbe1 	bl	8000b58 <__aeabi_d2iz>
 8001396:	4603      	mov	r3, r0
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <BMP180_Get_Press+0x468>)
 800139a:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <BMP180_Get_Press+0x468>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f640 32de 	movw	r2, #3038	; 0xbde
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_i2d>
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <BMP180_Get_Press+0x46c>)
 80013b4:	f7ff fa4a 	bl	800084c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fbca 	bl	8000b58 <__aeabi_d2iz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <BMP180_Get_Press+0x468>)
 80013c8:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <BMP180_Get_Press+0x460>)
 80013cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d0:	a321      	add	r3, pc, #132	; (adr r3, 8001458 <BMP180_Get_Press+0x450>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f90f 	bl	80005f8 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <BMP180_Get_Press+0x46c>)
 80013e8:	f7ff fa30 	bl	800084c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fbb0 	bl	8000b58 <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <BMP180_Get_Press+0x470>)
 80013fc:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <BMP180_Get_Press+0x468>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <BMP180_Get_Press+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f889 	bl	8000524 <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <BMP180_Get_Press+0x474>)
 8001418:	f7ff fa18 	bl	800084c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <BMP180_Get_Press+0x460>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7fe ff2f 	bl	800028c <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <BMP180_Get_Press+0x460>)
 8001434:	e9c1 2300 	strd	r2, r3, [r1]

	Datastruct->Pressure = Press;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <BMP180_Get_Press+0x460>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbd1 	bl	8000be8 <__aeabi_d2f>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bdb0      	pop	{r4, r5, r7, pc}
 8001454:	f3af 8000 	nop.w
 8001458:	00000000 	.word	0x00000000
 800145c:	c0bcbd00 	.word	0xc0bcbd00
 8001460:	200000e0 	.word	0x200000e0
 8001464:	200000d8 	.word	0x200000d8
 8001468:	200000e8 	.word	0x200000e8
 800146c:	40700000 	.word	0x40700000
 8001470:	200000c4 	.word	0x200000c4
 8001474:	40f00000 	.word	0x40f00000
 8001478:	200000c8 	.word	0x200000c8
 800147c:	40300000 	.word	0x40300000

08001480 <BMP180_Get_Alt>:

// Updates the altitude
void BMP180_Get_Alt (BMP180_t *Datastruct, int oss){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	BMP180_Get_Press (Datastruct, oss);
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdbb 	bl	8001008 <BMP180_Get_Press>
	Datastruct->Altitude = 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <BMP180_Get_Alt+0x90>)
 8001494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001498:	a317      	add	r3, pc, #92	; (adr r3, 80014f8 <BMP180_Get_Alt+0x78>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f9d5 	bl	800084c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	ec43 2b17 	vmov	d7, r2, r3
 80014aa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001500 <BMP180_Get_Alt+0x80>
 80014ae:	eeb0 0a47 	vmov.f32	s0, s14
 80014b2:	eef0 0a67 	vmov.f32	s1, s15
 80014b6:	f008 f8e9 	bl	800968c <pow>
 80014ba:	ec53 2b10 	vmov	r2, r3, d0
 80014be:	f04f 0000 	mov.w	r0, #0
 80014c2:	4914      	ldr	r1, [pc, #80]	; (8001514 <BMP180_Get_Alt+0x94>)
 80014c4:	f7fe fee0 	bl	8000288 <__aeabi_dsub>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a30d      	add	r3, pc, #52	; (adr r3, 8001508 <BMP180_Get_Alt+0x88>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f88f 	bl	80005f8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb81 	bl	8000be8 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	611a      	str	r2, [r3, #16]
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	f3af 8000 	nop.w
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40f8bcd0 	.word	0x40f8bcd0
 8001500:	ccd745e4 	.word	0xccd745e4
 8001504:	3fc85b95 	.word	0x3fc85b95
 8001508:	00000000 	.word	0x00000000
 800150c:	40e5a540 	.word	0x40e5a540
 8001510:	200000e8 	.word	0x200000e8
 8001514:	3ff00000 	.word	0x3ff00000

08001518 <BMP180_Init>:

// Starts reading the data from the sensor
void BMP180_Init (void){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	read_callibration_data();
 800151c:	f7ff fbb4 	bl	8000c88 <read_callibration_data>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <BMP180_Read_All>:

// Updates all 3 (Temperature, Altitude, Pressure)
void BMP180_Read_All (BMP180_t *Datastruct, int oss){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	BMP180_Get_Temp(Datastruct);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fc86 	bl	8000e40 <BMP180_Get_Temp>
	BMP180_Get_Alt(Datastruct, oss); //GetAlt calls GetPress
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <BMP180_Get_Alt>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <BUZZER_TurnOn>:
#define BUZZER_GPIO_PIN GPIO_PIN_8 //BUZZER GPIO PIN = PA8
#define ON SET
#define OFF RESET


void BUZZER_TurnOn(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, ON);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f001 fe0b 	bl	800316c <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}

0800155a <BUZZER_TurnOff>:

void BUZZER_TurnOff(void){
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, OFF);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f001 fe00 	bl	800316c <HAL_GPIO_WritePin>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <Mount_SD>:
uint32_t total, free_space;



void Mount_SD (const TCHAR* path)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <Mount_SD+0x24>)
 800157e:	f006 fe37 	bl	80081f0 <f_mount>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <Mount_SD+0x28>)
 8001588:	701a      	strb	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000f8 	.word	0x200000f8
 8001598:	20002278 	.word	0x20002278

0800159c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2000      	movs	r0, #0
 80015aa:	f006 fe21 	bl	80081f0 <f_mount>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <Unmount_SD+0x24>)
 80015b4:	701a      	strb	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20002278 	.word	0x20002278

080015c4 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80015cc:	4915      	ldr	r1, [pc, #84]	; (8001624 <Create_File+0x60>)
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f007 fa5c 	bl	8008a8c <f_stat>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <Create_File+0x64>)
 80015da:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <Create_File+0x64>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <Create_File+0x26>
	{
	    return fresult;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <Create_File+0x64>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	e018      	b.n	800161c <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80015ea:	220b      	movs	r2, #11
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	480f      	ldr	r0, [pc, #60]	; (800162c <Create_File+0x68>)
 80015f0:	f006 fe44 	bl	800827c <f_open>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <Create_File+0x64>)
 80015fa:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <Create_File+0x64>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <Create_File+0x46>
		{
		    return fresult;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <Create_File+0x64>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <Create_File+0x58>
		}

		fresult = f_close(&fil);
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <Create_File+0x68>)
 800160c:	f007 fa14 	bl	8008a38 <f_close>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <Create_File+0x64>)
 8001616:	701a      	strb	r2, [r3, #0]
	}
    return fresult;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <Create_File+0x64>)
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20002160 	.word	0x20002160
 8001628:	20002278 	.word	0x20002278
 800162c:	20001130 	.word	0x20001130

08001630 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800163a:	491c      	ldr	r1, [pc, #112]	; (80016ac <Update_File+0x7c>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f007 fa25 	bl	8008a8c <f_stat>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Update_File+0x80>)
 8001648:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Update_File+0x80>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <Update_File+0x28>
	{
	    return fresult;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <Update_File+0x80>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	e025      	b.n	80016a4 <Update_File+0x74>
	}

	else
	{
		 /* Open file with write access */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001658:	2232      	movs	r2, #50	; 0x32
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4815      	ldr	r0, [pc, #84]	; (80016b4 <Update_File+0x84>)
 800165e:	f006 fe0d 	bl	800827c <f_open>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <Update_File+0x80>)
 8001668:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <Update_File+0x80>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <Update_File+0x48>
	    {
	        return fresult;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Update_File+0x80>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	e015      	b.n	80016a4 <Update_File+0x74>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f7fe fda9 	bl	80001d0 <strlen>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <Update_File+0x88>)
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <Update_File+0x84>)
 8001686:	f006 ffc5 	bl	8008614 <f_write>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <Update_File+0x80>)
 8001690:	701a      	strb	r2, [r3, #0]
	    /* Close file */
	    fresult = f_close(&fil);
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <Update_File+0x84>)
 8001694:	f007 f9d0 	bl	8008a38 <f_close>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <Update_File+0x80>)
 800169e:	701a      	strb	r2, [r3, #0]
	}
    return fresult;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Update_File+0x80>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002160 	.word	0x20002160
 80016b0:	20002278 	.word	0x20002278
 80016b4:	20001130 	.word	0x20001130
 80016b8:	2000227c 	.word	0x2000227c

080016bc <LED_TurnOn>:
#define LED_GPIO_PIN GPIO_PIN_3 // LED GPIO PIN = PB3
#define ON SET
#define OFF RESET


void LED_TurnOn(void){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, ON);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2108      	movs	r1, #8
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <LED_TurnOn+0x14>)
 80016c6:	f001 fd51 	bl	800316c <HAL_GPIO_WritePin>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <MPU6050_Init>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	2275      	movs	r2, #117	; 0x75
 80016ea:	21d0      	movs	r1, #208	; 0xd0
 80016ec:	4822      	ldr	r0, [pc, #136]	; (8001778 <MPU6050_Init+0xa4>)
 80016ee:	f001 ff05 	bl	80034fc <HAL_I2C_Mem_Read>

    if(check == 104){ // 0x68 will be returned by the sensor if everything goes well
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b68      	cmp	r3, #104	; 0x68
 80016f6:	d139      	bne.n	800176c <MPU6050_Init+0x98>
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	1dbb      	adds	r3, r7, #6
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	226b      	movs	r2, #107	; 0x6b
 800170c:	21d0      	movs	r1, #208	; 0xd0
 800170e:	481a      	ldr	r0, [pc, #104]	; (8001778 <MPU6050_Init+0xa4>)
 8001710:	f001 fde0 	bl	80032d4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001714:	2307      	movs	r3, #7
 8001716:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001718:	2364      	movs	r3, #100	; 0x64
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2301      	movs	r3, #1
 8001726:	2219      	movs	r2, #25
 8001728:	21d0      	movs	r1, #208	; 0xd0
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <MPU6050_Init+0xa4>)
 800172c:	f001 fdd2 	bl	80032d4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	2301      	movs	r3, #1
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	1dbb      	adds	r3, r7, #6
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	221c      	movs	r2, #28
 8001744:	21d0      	movs	r1, #208	; 0xd0
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <MPU6050_Init+0xa4>)
 8001748:	f001 fdc4 	bl	80032d4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800174c:	2300      	movs	r3, #0
 800174e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	1dbb      	adds	r3, r7, #6
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	221b      	movs	r2, #27
 8001760:	21d0      	movs	r1, #208	; 0xd0
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MPU6050_Init+0xa4>)
 8001764:	f001 fdb6 	bl	80032d4 <HAL_I2C_Mem_Write>
        return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e000      	b.n	800176e <MPU6050_Init+0x9a>
    }
    return 1;
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200022ec 	.word	0x200022ec
 800177c:	00000000 	.word	0x00000000

08001780 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(MPU6050_t *DataStruct){
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_StatusTypeDef h_status = HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2306      	movs	r3, #6
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	223b      	movs	r2, #59	; 0x3b
 800179a:	21d0      	movs	r1, #208	; 0xd0
 800179c:	482c      	ldr	r0, [pc, #176]	; (8001850 <MPU6050_Read_Accel+0xd0>)
 800179e:	f001 fead 	bl	80034fc <HAL_I2C_Mem_Read>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80017a6:	7a3b      	ldrb	r3, [r7, #8]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7a7b      	ldrb	r3, [r7, #9]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80017b8:	7abb      	ldrb	r3, [r7, #10]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80017ca:	7b3b      	ldrb	r3, [r7, #12]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	7b7b      	ldrb	r3, [r7, #13]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe9e 	bl	8000524 <__aeabi_i2d>
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MPU6050_Read_Accel+0xd4>)
 80017ee:	f7ff f82d 	bl	800084c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe8e 	bl	8000524 <__aeabi_i2d>
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MPU6050_Read_Accel+0xd4>)
 800180e:	f7ff f81d 	bl	800084c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe7e 	bl	8000524 <__aeabi_i2d>
 8001828:	a307      	add	r3, pc, #28	; (adr r3, 8001848 <MPU6050_Read_Accel+0xc8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f80d 	bl	800084c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	00000000 	.word	0x00000000
 800184c:	40cc2900 	.word	0x40cc2900
 8001850:	200022ec 	.word	0x200022ec
 8001854:	40d00000 	.word	0x40d00000

08001858 <MPU6050_Read_Temp>:
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}

void MPU6050_Read_Temp(MPU6050_t *DataStruct){
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af04      	add	r7, sp, #16
 800185e:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[2];
    int16_t temp;

    // Read 2 BYTES of data starting from TEMP_OUT_H_REG register

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, TEMP_OUT_H_REG, 1, Rec_Data, 2, i2c_timeout);
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2302      	movs	r3, #2
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2241      	movs	r2, #65	; 0x41
 8001872:	21d0      	movs	r1, #208	; 0xd0
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <MPU6050_Read_Temp+0x5c>)
 8001876:	f001 fe41 	bl	80034fc <HAL_I2C_Mem_Read>

    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800187a:	7b3b      	ldrb	r3, [r7, #12]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	81fb      	strh	r3, [r7, #14]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	eddf 6a08 	vldr	s13, [pc, #32]	; 80018b8 <MPU6050_Read_Temp+0x60>
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80018bc <MPU6050_Read_Temp+0x64>
 80018a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200022ec 	.word	0x200022ec
 80018b8:	43aa0000 	.word	0x43aa0000
 80018bc:	42121eb8 	.word	0x42121eb8

080018c0 <init_SD_card>:
#include "BMP180.h"
#include "MPU6050.h"
#include "INA219.h"
#include "fatfs.h"
#include "File_Handling.h"
void init_SD_card(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	Mount_SD("/");
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <init_SD_card+0x1c>)
 80018c6:	f7ff fe53 	bl	8001570 <Mount_SD>
	Create_File("Mission1.csv");
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <init_SD_card+0x20>)
 80018cc:	f7ff fe7a 	bl	80015c4 <Create_File>
	Update_File("Mission1.csv", "Temperature, Pressure, Ax, Ay, Az\n");
 80018d0:	4904      	ldr	r1, [pc, #16]	; (80018e4 <init_SD_card+0x24>)
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <init_SD_card+0x20>)
 80018d4:	f7ff feac 	bl	8001630 <Update_File>
	//Unmount_SD("/");

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800a51c 	.word	0x0800a51c
 80018e0:	0800a520 	.word	0x0800a520
 80018e4:	0800a530 	.word	0x0800a530

080018e8 <process_SD_card>:
char buf[100];
int indx = 1;
void process_SD_card(MPU6050_t *MPU6050, BMP180_t *BMP180, INA219_t *INA219) {
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	b099      	sub	sp, #100	; 0x64
 80018ec:	af08      	add	r7, sp, #32
 80018ee:	6178      	str	r0, [r7, #20]
 80018f0:	6139      	str	r1, [r7, #16]
 80018f2:	60fa      	str	r2, [r7, #12]
	int dec[5], frac[5];
	dec[0] = (int)BMP180->Temperature;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80018fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
	frac[0] = (abs(BMP180->Temperature)-abs(dec[0]))*1000;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	edd3 7a02 	vldr	s15, [r3, #8]
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001916:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	2b00      	cmp	r3, #0
 800191e:	bfb8      	it	lt
 8001920:	425b      	neglt	r3, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	61bb      	str	r3, [r7, #24]
	dec[1] = (int)BMP180->Pressure;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	edd3 7a03 	vldr	s15, [r3, #12]
 8001934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
	frac[1] = (abs(BMP180->Pressure)-abs(dec[1]))*1000;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	edd3 7a03 	vldr	s15, [r3, #12]
 8001944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001950:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	61fb      	str	r3, [r7, #28]
	dec[2] = (int)MPU6050->Ax;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8f1 	bl	8000b58 <__aeabi_d2iz>
 8001976:	4603      	mov	r3, r0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
	frac[2] = (abs(MPU6050->Ax)-abs(dec[2]))*1000;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f8e8 	bl	8000b58 <__aeabi_d2iz>
 8001988:	4603      	mov	r3, r0
 800198a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800198e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	2b00      	cmp	r3, #0
 8001996:	bfb8      	it	lt
 8001998:	425b      	neglt	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	623b      	str	r3, [r7, #32]
	dec[3] = (int)MPU6050->Ay;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8d2 	bl	8000b58 <__aeabi_d2iz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
	frac[3] = (abs(MPU6050->Ay)-abs(dec[3]))*1000;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8c9 	bl	8000b58 <__aeabi_d2iz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bfb8      	it	lt
 80019d6:	425b      	neglt	r3, r3
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
	dec[4] = (int)MPU6050->Az;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8b3 	bl	8000b58 <__aeabi_d2iz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	frac[4] = (abs(MPU6050->Az)-abs(dec[4]))*1000;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8aa 	bl	8000b58 <__aeabi_d2iz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a0a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bfb8      	it	lt
 8001a14:	425b      	neglt	r3, r3
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(buf, "%d.%d, %d.%d, %d.%d, %d.%d, %d.%d\n", dec[0], frac[0], dec[1], frac[1], dec[2], frac[2], dec[3], frac[3], dec[4], frac[4]);
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	6079      	str	r1, [r7, #4]
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a30:	6a38      	ldr	r0, [r7, #32]
 8001a32:	6038      	str	r0, [r7, #0]
 8001a34:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001a36:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001a38:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8001a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a3c:	9007      	str	r0, [sp, #28]
 8001a3e:	9606      	str	r6, [sp, #24]
 8001a40:	9505      	str	r5, [sp, #20]
 8001a42:	9404      	str	r4, [sp, #16]
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	9003      	str	r0, [sp, #12]
 8001a48:	9102      	str	r1, [sp, #8]
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	490b      	ldr	r1, [pc, #44]	; (8001a80 <process_SD_card+0x198>)
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <process_SD_card+0x19c>)
 8001a56:	f007 f975 	bl	8008d44 <siprintf>
	Mount_SD("/");
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <process_SD_card+0x1a0>)
 8001a5c:	f7ff fd88 	bl	8001570 <Mount_SD>
	Update_File("Mission1.csv", buf);
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <process_SD_card+0x19c>)
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <process_SD_card+0x1a4>)
 8001a64:	f7ff fde4 	bl	8001630 <Update_File>
	Unmount_SD("/");
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <process_SD_card+0x1a0>)
 8001a6a:	f7ff fd97 	bl	800159c <Unmount_SD>
	indx++;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <process_SD_card+0x1a8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <process_SD_card+0x1a8>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	3744      	adds	r7, #68	; 0x44
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a80:	0800a554 	.word	0x0800a554
 8001a84:	20002280 	.word	0x20002280
 8001a88:	0800a51c 	.word	0x0800a51c
 8001a8c:	0800a520 	.word	0x0800a520
 8001a90:	20000000 	.word	0x20000000

08001a94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <SELECT+0x18>)
 8001a9e:	f001 fb65 	bl	800316c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f001 f8ee 	bl	8002c84 <HAL_Delay>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	48000400 	.word	0x48000400

08001ab0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <DESELECT+0x18>)
 8001aba:	f001 fb57 	bl	800316c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f001 f8e0 	bl	8002c84 <HAL_Delay>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48000400 	.word	0x48000400

08001acc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ad6:	bf00      	nop
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <SPI_TxByte+0x30>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d1f8      	bne.n	8001ad8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001ae6:	1df9      	adds	r1, r7, #7
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	2201      	movs	r2, #1
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <SPI_TxByte+0x30>)
 8001aee:	f003 fb5e 	bl	80051ae <HAL_SPI_Transmit>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20002394 	.word	0x20002394

08001b00 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b0c:	bf00      	nop
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <SPI_TxBuffer+0x30>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d1f8      	bne.n	8001b0e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	2364      	movs	r3, #100	; 0x64
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <SPI_TxBuffer+0x30>)
 8001b24:	f003 fb43 	bl	80051ae <HAL_SPI_Transmit>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20002394 	.word	0x20002394

08001b34 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001b3a:	23ff      	movs	r3, #255	; 0xff
 8001b3c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b3e:	bf00      	nop
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <SPI_RxByte+0x34>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d1f8      	bne.n	8001b40 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b4e:	1dba      	adds	r2, r7, #6
 8001b50:	1df9      	adds	r1, r7, #7
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <SPI_RxByte+0x34>)
 8001b5a:	f003 fc9d 	bl	8005498 <HAL_SPI_TransmitReceive>

	return data;
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20002394 	.word	0x20002394

08001b6c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001b74:	f7ff ffde 	bl	8001b34 <SPI_RxByte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	701a      	strb	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <SD_ReadyWait+0x30>)
 8001b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b94:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001b96:	f7ff ffcd 	bl	8001b34 <SPI_RxByte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2bff      	cmp	r3, #255	; 0xff
 8001ba2:	d003      	beq.n	8001bac <SD_ReadyWait+0x24>
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SD_ReadyWait+0x30>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f4      	bne.n	8001b96 <SD_ReadyWait+0xe>

	return res;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200022e6 	.word	0x200022e6

08001bbc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001bc2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001bc6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001bc8:	f7ff ff72 	bl	8001ab0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e005      	b.n	8001bde <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001bd2:	20ff      	movs	r0, #255	; 0xff
 8001bd4:	f7ff ff7a 	bl	8001acc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	ddf6      	ble.n	8001bd2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001be4:	f7ff ff56 	bl	8001a94 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001be8:	2340      	movs	r3, #64	; 0x40
 8001bea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001bfc:	2395      	movs	r3, #149	; 0x95
 8001bfe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001c00:	463b      	mov	r3, r7
 8001c02:	2106      	movs	r1, #6
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff7b 	bl	8001b00 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c0a:	e002      	b.n	8001c12 <SD_PowerOn+0x56>
	{
		cnt--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c12:	f7ff ff8f 	bl	8001b34 <SPI_RxByte>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d002      	beq.n	8001c22 <SD_PowerOn+0x66>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f4      	bne.n	8001c0c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001c22:	f7ff ff45 	bl	8001ab0 <DESELECT>
	SPI_TxByte(0XFF);
 8001c26:	20ff      	movs	r0, #255	; 0xff
 8001c28:	f7ff ff50 	bl	8001acc <SPI_TxByte>

	PowerFlag = 1;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <SD_PowerOn+0x80>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200022e9 	.word	0x200022e9

08001c40 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <SD_PowerOff+0x14>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200022e9 	.word	0x200022e9

08001c58 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <SD_CheckPower+0x14>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200022e9 	.word	0x200022e9

08001c70 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <SD_RxDataBlock+0x58>)
 8001c7c:	22c8      	movs	r2, #200	; 0xc8
 8001c7e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001c80:	f7ff ff58 	bl	8001b34 <SPI_RxByte>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	d103      	bne.n	8001c96 <SD_RxDataBlock+0x26>
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <SD_RxDataBlock+0x58>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f4      	bne.n	8001c80 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2bfe      	cmp	r3, #254	; 0xfe
 8001c9a:	d001      	beq.n	8001ca0 <SD_RxDataBlock+0x30>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e00f      	b.n	8001cc0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff60 	bl	8001b6c <SPI_RxBytePtr>
	} while(len--);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	603a      	str	r2, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f4      	bne.n	8001ca0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001cb6:	f7ff ff3d 	bl	8001b34 <SPI_RxByte>
	SPI_RxByte();
 8001cba:	f7ff ff3b 	bl	8001b34 <SPI_RxByte>

	return TRUE;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200022e4 	.word	0x200022e4

08001ccc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001cdc:	f7ff ff54 	bl	8001b88 <SD_ReadyWait>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d001      	beq.n	8001cea <SD_TxDataBlock+0x1e>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e02f      	b.n	8001d4a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff feed 	bl	8001acc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	2bfd      	cmp	r3, #253	; 0xfd
 8001cf6:	d020      	beq.n	8001d3a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff feff 	bl	8001b00 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001d02:	f7ff ff17 	bl	8001b34 <SPI_RxByte>
		SPI_RxByte();
 8001d06:	f7ff ff15 	bl	8001b34 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001d0a:	e00b      	b.n	8001d24 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001d0c:	f7ff ff12 	bl	8001b34 <SPI_RxByte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d006      	beq.n	8001d2c <SD_TxDataBlock+0x60>
			i++;
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d9f0      	bls.n	8001d0c <SD_TxDataBlock+0x40>
 8001d2a:	e000      	b.n	8001d2e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001d2c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001d2e:	bf00      	nop
 8001d30:	f7ff ff00 	bl	8001b34 <SPI_RxByte>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0fa      	beq.n	8001d30 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d101      	bne.n	8001d48 <SD_TxDataBlock+0x7c>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	6039      	str	r1, [r7, #0]
 8001d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001d5e:	f7ff ff13 	bl	8001b88 <SD_ReadyWait>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2bff      	cmp	r3, #255	; 0xff
 8001d66:	d001      	beq.n	8001d6c <SD_SendCmd+0x1a>
 8001d68:	23ff      	movs	r3, #255	; 0xff
 8001d6a:	e042      	b.n	8001df2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff feac 	bl	8001acc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	0e1b      	lsrs	r3, r3, #24
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fea6 	bl	8001acc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fea0 	bl	8001acc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fe9a 	bl	8001acc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe95 	bl	8001acc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d102      	bne.n	8001dae <SD_SendCmd+0x5c>
 8001da8:	2395      	movs	r3, #149	; 0x95
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e007      	b.n	8001dbe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b48      	cmp	r3, #72	; 0x48
 8001db2:	d102      	bne.n	8001dba <SD_SendCmd+0x68>
 8001db4:	2387      	movs	r3, #135	; 0x87
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e001      	b.n	8001dbe <SD_SendCmd+0x6c>
	else crc = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe83 	bl	8001acc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b4c      	cmp	r3, #76	; 0x4c
 8001dca:	d101      	bne.n	8001dd0 <SD_SendCmd+0x7e>
 8001dcc:	f7ff feb2 	bl	8001b34 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001dd4:	f7ff feae 	bl	8001b34 <SPI_RxByte>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001ddc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da05      	bge.n	8001df0 <SD_SendCmd+0x9e>
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	73bb      	strb	r3, [r7, #14]
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f1      	bne.n	8001dd4 <SD_SendCmd+0x82>

	return res;
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SD_disk_initialize+0x14>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d1      	b.n	8001fb4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <SD_disk_initialize+0x1c0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <SD_disk_initialize+0x2a>
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <SD_disk_initialize+0x1c0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e0c6      	b.n	8001fb4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001e26:	f7ff fec9 	bl	8001bbc <SD_PowerOn>

	/* slave select */
	SELECT();
 8001e2a:	f7ff fe33 	bl	8001a94 <SELECT>

	/* check disk type */
	type = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e32:	2100      	movs	r1, #0
 8001e34:	2040      	movs	r0, #64	; 0x40
 8001e36:	f7ff ff8c 	bl	8001d52 <SD_SendCmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	f040 80a1 	bne.w	8001f84 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <SD_disk_initialize+0x1c4>)
 8001e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e48:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e4a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001e4e:	2048      	movs	r0, #72	; 0x48
 8001e50:	f7ff ff7f 	bl	8001d52 <SD_SendCmd>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d155      	bne.n	8001f06 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e00c      	b.n	8001e7a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001e60:	7bfc      	ldrb	r4, [r7, #15]
 8001e62:	f7ff fe67 	bl	8001b34 <SPI_RxByte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f104 0310 	add.w	r3, r4, #16
 8001e6e:	443b      	add	r3, r7
 8001e70:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d9ef      	bls.n	8001e60 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001e80:	7abb      	ldrb	r3, [r7, #10]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d17e      	bne.n	8001f84 <SD_disk_initialize+0x188>
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	2baa      	cmp	r3, #170	; 0xaa
 8001e8a:	d17b      	bne.n	8001f84 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2077      	movs	r0, #119	; 0x77
 8001e90:	f7ff ff5f 	bl	8001d52 <SD_SendCmd>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d807      	bhi.n	8001eaa <SD_disk_initialize+0xae>
 8001e9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e9e:	2069      	movs	r0, #105	; 0x69
 8001ea0:	f7ff ff57 	bl	8001d52 <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001eaa:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <SD_disk_initialize+0x1c4>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ec      	bne.n	8001e8c <SD_disk_initialize+0x90>
 8001eb2:	e000      	b.n	8001eb6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001eb4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <SD_disk_initialize+0x1c4>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d062      	beq.n	8001f84 <SD_disk_initialize+0x188>
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	207a      	movs	r0, #122	; 0x7a
 8001ec2:	f7ff ff46 	bl	8001d52 <SD_SendCmd>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d15b      	bne.n	8001f84 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e00c      	b.n	8001eec <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001ed2:	7bfc      	ldrb	r4, [r7, #15]
 8001ed4:	f7ff fe2e 	bl	8001b34 <SPI_RxByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	f104 0310 	add.w	r3, r4, #16
 8001ee0:	443b      	add	r3, r7
 8001ee2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d9ef      	bls.n	8001ed2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001ef2:	7a3b      	ldrb	r3, [r7, #8]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SD_disk_initialize+0x104>
 8001efc:	230c      	movs	r3, #12
 8001efe:	e000      	b.n	8001f02 <SD_disk_initialize+0x106>
 8001f00:	2304      	movs	r3, #4
 8001f02:	73bb      	strb	r3, [r7, #14]
 8001f04:	e03e      	b.n	8001f84 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f06:	2100      	movs	r1, #0
 8001f08:	2077      	movs	r0, #119	; 0x77
 8001f0a:	f7ff ff22 	bl	8001d52 <SD_SendCmd>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d808      	bhi.n	8001f26 <SD_disk_initialize+0x12a>
 8001f14:	2100      	movs	r1, #0
 8001f16:	2069      	movs	r0, #105	; 0x69
 8001f18:	f7ff ff1b 	bl	8001d52 <SD_SendCmd>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d801      	bhi.n	8001f26 <SD_disk_initialize+0x12a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e000      	b.n	8001f28 <SD_disk_initialize+0x12c>
 8001f26:	2301      	movs	r3, #1
 8001f28:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d10e      	bne.n	8001f4e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f30:	2100      	movs	r1, #0
 8001f32:	2077      	movs	r0, #119	; 0x77
 8001f34:	f7ff ff0d 	bl	8001d52 <SD_SendCmd>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d80e      	bhi.n	8001f5c <SD_disk_initialize+0x160>
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2069      	movs	r0, #105	; 0x69
 8001f42:	f7ff ff06 	bl	8001d52 <SD_SendCmd>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <SD_disk_initialize+0x160>
 8001f4c:	e00c      	b.n	8001f68 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2041      	movs	r0, #65	; 0x41
 8001f52:	f7ff fefe 	bl	8001d52 <SD_SendCmd>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <SD_disk_initialize+0x1c4>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e2      	bne.n	8001f2a <SD_disk_initialize+0x12e>
 8001f64:	e000      	b.n	8001f68 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f66:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <SD_disk_initialize+0x1c4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <SD_disk_initialize+0x184>
 8001f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f74:	2050      	movs	r0, #80	; 0x50
 8001f76:	f7ff feec 	bl	8001d52 <SD_SendCmd>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SD_disk_initialize+0x188>
 8001f80:	2300      	movs	r3, #0
 8001f82:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <SD_disk_initialize+0x1c8>)
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001f8a:	f7ff fd91 	bl	8001ab0 <DESELECT>
	SPI_RxByte();
 8001f8e:	f7ff fdd1 	bl	8001b34 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <SD_disk_initialize+0x1c0>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SD_disk_initialize+0x1c0>)
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e001      	b.n	8001fae <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001faa:	f7ff fe49 	bl	8001c40 <SD_PowerOff>
	}

	return Stat;
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <SD_disk_initialize+0x1c0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	200022e4 	.word	0x200022e4
 8001fc4:	200022e8 	.word	0x200022e8

08001fc8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SD_disk_status+0x14>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e002      	b.n	8001fe2 <SD_disk_status+0x1a>
	return Stat;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SD_disk_status+0x28>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <SD_disk_read+0x1c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <SD_disk_read+0x20>
 8002010:	2304      	movs	r3, #4
 8002012:	e051      	b.n	80020b8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <SD_disk_read+0xcc>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SD_disk_read+0x32>
 8002022:	2303      	movs	r3, #3
 8002024:	e048      	b.n	80020b8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <SD_disk_read+0xd0>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <SD_disk_read+0x44>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	607b      	str	r3, [r7, #4]

	SELECT();
 8002038:	f7ff fd2c 	bl	8001a94 <SELECT>

	if (count == 1)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d111      	bne.n	8002066 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2051      	movs	r0, #81	; 0x51
 8002046:	f7ff fe84 	bl	8001d52 <SD_SendCmd>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d129      	bne.n	80020a4 <SD_disk_read+0xb0>
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	68b8      	ldr	r0, [r7, #8]
 8002056:	f7ff fe0b 	bl	8001c70 <SD_RxDataBlock>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d021      	beq.n	80020a4 <SD_disk_read+0xb0>
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	e01e      	b.n	80020a4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	2052      	movs	r0, #82	; 0x52
 800206a:	f7ff fe72 	bl	8001d52 <SD_SendCmd>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d117      	bne.n	80020a4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f7ff fdf9 	bl	8001c70 <SD_RxDataBlock>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <SD_disk_read+0xa6>
				buff += 512;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800208a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	3b01      	subs	r3, #1
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ed      	bne.n	8002074 <SD_disk_read+0x80>
 8002098:	e000      	b.n	800209c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800209a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800209c:	2100      	movs	r1, #0
 800209e:	204c      	movs	r0, #76	; 0x4c
 80020a0:	f7ff fe57 	bl	8001d52 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80020a4:	f7ff fd04 	bl	8001ab0 <DESELECT>
	SPI_RxByte();
 80020a8:	f7ff fd44 	bl	8001b34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000004 	.word	0x20000004
 80020c4:	200022e8 	.word	0x200022e8

080020c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <SD_disk_write+0x1c>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <SD_disk_write+0x20>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e06b      	b.n	80021c0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <SD_disk_write+0x100>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SD_disk_write+0x32>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e062      	b.n	80021c0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <SD_disk_write+0x100>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SD_disk_write+0x44>
 8002108:	2302      	movs	r3, #2
 800210a:	e059      	b.n	80021c0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800210c:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <SD_disk_write+0x104>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <SD_disk_write+0x56>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	607b      	str	r3, [r7, #4]

	SELECT();
 800211e:	f7ff fcb9 	bl	8001a94 <SELECT>

	if (count == 1)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d110      	bne.n	800214a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	2058      	movs	r0, #88	; 0x58
 800212c:	f7ff fe11 	bl	8001d52 <SD_SendCmd>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13a      	bne.n	80021ac <SD_disk_write+0xe4>
 8002136:	21fe      	movs	r1, #254	; 0xfe
 8002138:	68b8      	ldr	r0, [r7, #8]
 800213a:	f7ff fdc7 	bl	8001ccc <SD_TxDataBlock>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d033      	beq.n	80021ac <SD_disk_write+0xe4>
			count = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	e030      	b.n	80021ac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <SD_disk_write+0x104>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002156:	2100      	movs	r1, #0
 8002158:	2077      	movs	r0, #119	; 0x77
 800215a:	f7ff fdfa 	bl	8001d52 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	2057      	movs	r0, #87	; 0x57
 8002162:	f7ff fdf6 	bl	8001d52 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	2059      	movs	r0, #89	; 0x59
 800216a:	f7ff fdf2 	bl	8001d52 <SD_SendCmd>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11b      	bne.n	80021ac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002174:	21fc      	movs	r1, #252	; 0xfc
 8002176:	68b8      	ldr	r0, [r7, #8]
 8002178:	f7ff fda8 	bl	8001ccc <SD_TxDataBlock>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <SD_disk_write+0xd0>
				buff += 512;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002188:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3b01      	subs	r3, #1
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ee      	bne.n	8002174 <SD_disk_write+0xac>
 8002196:	e000      	b.n	800219a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002198:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800219a:	21fd      	movs	r1, #253	; 0xfd
 800219c:	2000      	movs	r0, #0
 800219e:	f7ff fd95 	bl	8001ccc <SD_TxDataBlock>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <SD_disk_write+0xe4>
			{
				count = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80021ac:	f7ff fc80 	bl	8001ab0 <DESELECT>
	SPI_RxByte();
 80021b0:	f7ff fcc0 	bl	8001b34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000004 	.word	0x20000004
 80021cc:	200022e8 	.word	0x200022e8

080021d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b08b      	sub	sp, #44	; 0x2c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	603a      	str	r2, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	460b      	mov	r3, r1
 80021de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SD_disk_ioctl+0x1e>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e115      	b.n	800241a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d124      	bne.n	8002244 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d012      	beq.n	8002228 <SD_disk_ioctl+0x58>
 8002202:	2b02      	cmp	r3, #2
 8002204:	dc1a      	bgt.n	800223c <SD_disk_ioctl+0x6c>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <SD_disk_ioctl+0x40>
 800220a:	2b01      	cmp	r3, #1
 800220c:	d006      	beq.n	800221c <SD_disk_ioctl+0x4c>
 800220e:	e015      	b.n	800223c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002210:	f7ff fd16 	bl	8001c40 <SD_PowerOff>
			res = RES_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800221a:	e0fc      	b.n	8002416 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800221c:	f7ff fcce 	bl	8001bbc <SD_PowerOn>
			res = RES_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002226:	e0f6      	b.n	8002416 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	1c5c      	adds	r4, r3, #1
 800222c:	f7ff fd14 	bl	8001c58 <SD_CheckPower>
 8002230:	4603      	mov	r3, r0
 8002232:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800223a:	e0ec      	b.n	8002416 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800223c:	2304      	movs	r3, #4
 800223e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002242:	e0e8      	b.n	8002416 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002244:	4b77      	ldr	r3, [pc, #476]	; (8002424 <SD_disk_ioctl+0x254>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <SD_disk_ioctl+0x86>
 8002252:	2303      	movs	r3, #3
 8002254:	e0e1      	b.n	800241a <SD_disk_ioctl+0x24a>

		SELECT();
 8002256:	f7ff fc1d 	bl	8001a94 <SELECT>

		switch (ctrl)
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	2b0d      	cmp	r3, #13
 800225e:	f200 80cb 	bhi.w	80023f8 <SD_disk_ioctl+0x228>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <SD_disk_ioctl+0x98>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002363 	.word	0x08002363
 800226c:	080022a1 	.word	0x080022a1
 8002270:	08002353 	.word	0x08002353
 8002274:	080023f9 	.word	0x080023f9
 8002278:	080023f9 	.word	0x080023f9
 800227c:	080023f9 	.word	0x080023f9
 8002280:	080023f9 	.word	0x080023f9
 8002284:	080023f9 	.word	0x080023f9
 8002288:	080023f9 	.word	0x080023f9
 800228c:	080023f9 	.word	0x080023f9
 8002290:	080023f9 	.word	0x080023f9
 8002294:	08002375 	.word	0x08002375
 8002298:	08002399 	.word	0x08002399
 800229c:	080023bd 	.word	0x080023bd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80022a0:	2100      	movs	r1, #0
 80022a2:	2049      	movs	r0, #73	; 0x49
 80022a4:	f7ff fd55 	bl	8001d52 <SD_SendCmd>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80a8 	bne.w	8002400 <SD_disk_ioctl+0x230>
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	2110      	movs	r1, #16
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fcda 	bl	8001c70 <SD_RxDataBlock>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 809e 	beq.w	8002400 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80022c4:	7b3b      	ldrb	r3, [r7, #12]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10e      	bne.n	80022ec <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80022ce:	7d7b      	ldrb	r3, [r7, #21]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	7d3b      	ldrb	r3, [r7, #20]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80022e2:	8bfb      	ldrh	r3, [r7, #30]
 80022e4:	029a      	lsls	r2, r3, #10
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e02e      	b.n	800234a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80022ec:	7c7b      	ldrb	r3, [r7, #17]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	7dbb      	ldrb	r3, [r7, #22]
 80022f6:	09db      	lsrs	r3, r3, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	7d7b      	ldrb	r3, [r7, #21]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0306 	and.w	r3, r3, #6
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4413      	add	r3, r2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3302      	adds	r3, #2
 8002310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002314:	7d3b      	ldrb	r3, [r7, #20]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	b2db      	uxtb	r3, r3
 800231a:	b29a      	uxth	r2, r3
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	b29b      	uxth	r3, r3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	b29b      	uxth	r3, r3
 8002324:	4413      	add	r3, r2
 8002326:	b29a      	uxth	r2, r3
 8002328:	7cbb      	ldrb	r3, [r7, #18]
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	b29b      	uxth	r3, r3
 800232e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800233c:	8bfa      	ldrh	r2, [r7, #30]
 800233e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002342:	3b09      	subs	r3, #9
 8002344:	409a      	lsls	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002350:	e056      	b.n	8002400 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002358:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002360:	e055      	b.n	800240e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002362:	f7ff fc11 	bl	8001b88 <SD_ReadyWait>
 8002366:	4603      	mov	r3, r0
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d14b      	bne.n	8002404 <SD_disk_ioctl+0x234>
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002372:	e047      	b.n	8002404 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002374:	2100      	movs	r1, #0
 8002376:	2049      	movs	r0, #73	; 0x49
 8002378:	f7ff fceb 	bl	8001d52 <SD_SendCmd>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d142      	bne.n	8002408 <SD_disk_ioctl+0x238>
 8002382:	2110      	movs	r1, #16
 8002384:	6a38      	ldr	r0, [r7, #32]
 8002386:	f7ff fc73 	bl	8001c70 <SD_RxDataBlock>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03b      	beq.n	8002408 <SD_disk_ioctl+0x238>
 8002390:	2300      	movs	r3, #0
 8002392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002396:	e037      	b.n	8002408 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002398:	2100      	movs	r1, #0
 800239a:	204a      	movs	r0, #74	; 0x4a
 800239c:	f7ff fcd9 	bl	8001d52 <SD_SendCmd>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d132      	bne.n	800240c <SD_disk_ioctl+0x23c>
 80023a6:	2110      	movs	r1, #16
 80023a8:	6a38      	ldr	r0, [r7, #32]
 80023aa:	f7ff fc61 	bl	8001c70 <SD_RxDataBlock>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02b      	beq.n	800240c <SD_disk_ioctl+0x23c>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80023ba:	e027      	b.n	800240c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80023bc:	2100      	movs	r1, #0
 80023be:	207a      	movs	r0, #122	; 0x7a
 80023c0:	f7ff fcc7 	bl	8001d52 <SD_SendCmd>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023d0:	e00b      	b.n	80023ea <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80023d2:	6a3c      	ldr	r4, [r7, #32]
 80023d4:	1c63      	adds	r3, r4, #1
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	f7ff fbac 	bl	8001b34 <SPI_RxByte>
 80023dc:	4603      	mov	r3, r0
 80023de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80023e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023e4:	3301      	adds	r3, #1
 80023e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d9ef      	bls.n	80023d2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80023f8:	2304      	movs	r3, #4
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023fe:	e006      	b.n	800240e <SD_disk_ioctl+0x23e>
			break;
 8002400:	bf00      	nop
 8002402:	e004      	b.n	800240e <SD_disk_ioctl+0x23e>
			break;
 8002404:	bf00      	nop
 8002406:	e002      	b.n	800240e <SD_disk_ioctl+0x23e>
			break;
 8002408:	bf00      	nop
 800240a:	e000      	b.n	800240e <SD_disk_ioctl+0x23e>
			break;
 800240c:	bf00      	nop
		}

		DESELECT();
 800240e:	f7ff fb4f 	bl	8001ab0 <DESELECT>
		SPI_RxByte();
 8002412:	f7ff fb8f 	bl	8001b34 <SPI_RxByte>
	}

	return res;
 8002416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800241a:	4618      	mov	r0, r3
 800241c:	372c      	adds	r7, #44	; 0x2c
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	20000004 	.word	0x20000004

08002428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242e:	f000 fbb4 	bl	8002b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002432:	f000 f841 	bl	80024b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002436:	f000 f94f 	bl	80026d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800243a:	f000 f88f 	bl	800255c <MX_I2C1_Init>
  MX_SPI1_Init();
 800243e:	f000 f90d 	bl	800265c <MX_SPI1_Init>
  MX_I2C3_Init();
 8002442:	f000 f8cb 	bl	80025dc <MX_I2C3_Init>
  MX_FATFS_Init();
 8002446:	f003 fbad 	bl	8005ba4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	//Initialize BMP180 and MPU6050 objects
	BMP180_Init();
 800244a:	f7ff f865 	bl	8001518 <BMP180_Init>
	int answer = MPU6050_Init(); //if MPU6050_Init returns 0, everything is fine
 800244e:	f7ff f941 	bl	80016d4 <MPU6050_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	607b      	str	r3, [r7, #4]

	//Define the state
	if (answer == 0) {
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <main+0x3c>
		current_state = NOMINAL;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <main+0x80>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e002      	b.n	800246a <main+0x42>
	} else {
		current_state = SAFE;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <main+0x80>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
	}
	init_SD_card();
 800246a:	f7ff fa29 	bl	80018c0 <init_SD_card>
	LED_TurnOn();
 800246e:	f7ff f925 	bl	80016bc <LED_TurnOn>
	BUZZER_TurnOn();
 8002472:	f7ff f867 	bl	8001544 <BUZZER_TurnOn>
	HAL_Delay(1000);
 8002476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800247a:	f000 fc03 	bl	8002c84 <HAL_Delay>
	BUZZER_TurnOff();
 800247e:	f7ff f86c 	bl	800155a <BUZZER_TurnOff>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		BMP180_Read_All(&BMP180, 0);
 8002482:	2100      	movs	r1, #0
 8002484:	4809      	ldr	r0, [pc, #36]	; (80024ac <main+0x84>)
 8002486:	f7ff f84d 	bl	8001524 <BMP180_Read_All>
		MPU6050_Read_Accel(&MPU6050);
 800248a:	4809      	ldr	r0, [pc, #36]	; (80024b0 <main+0x88>)
 800248c:	f7ff f978 	bl	8001780 <MPU6050_Read_Accel>
		MPU6050_Read_Temp(&MPU6050);
 8002490:	4807      	ldr	r0, [pc, #28]	; (80024b0 <main+0x88>)
 8002492:	f7ff f9e1 	bl	8001858 <MPU6050_Read_Temp>
		process_SD_card(&MPU6050, &BMP180, &INA219);
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <main+0x8c>)
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <main+0x84>)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <main+0x88>)
 800249c:	f7ff fa24 	bl	80018e8 <process_SD_card>
		HAL_Delay(20);
 80024a0:	2014      	movs	r0, #20
 80024a2:	f000 fbef 	bl	8002c84 <HAL_Delay>
		BMP180_Read_All(&BMP180, 0);
 80024a6:	e7ec      	b.n	8002482 <main+0x5a>
 80024a8:	2000247c 	.word	0x2000247c
 80024ac:	200023f8 	.word	0x200023f8
 80024b0:	20002410 	.word	0x20002410
 80024b4:	20002468 	.word	0x20002468

080024b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b096      	sub	sp, #88	; 0x58
 80024bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	2244      	movs	r2, #68	; 0x44
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f006 fc5c 	bl	8008d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024de:	f001 fc85 	bl	8003dec <HAL_PWREx_ControlVoltageScaling>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024e8:	f000 f95c 	bl	80027a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ec:	2302      	movs	r3, #2
 80024ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f6:	2310      	movs	r3, #16
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fa:	2302      	movs	r3, #2
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024fe:	2302      	movs	r3, #2
 8002500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002506:	230a      	movs	r3, #10
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800250a:	2307      	movs	r3, #7
 800250c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800250e:	2302      	movs	r3, #2
 8002510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002512:	2302      	movs	r3, #2
 8002514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4618      	mov	r0, r3
 800251c:	f001 fcbc 	bl	8003e98 <HAL_RCC_OscConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002526:	f000 f93d 	bl	80027a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252a:	230f      	movs	r3, #15
 800252c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252e:	2303      	movs	r3, #3
 8002530:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800253e:	463b      	mov	r3, r7
 8002540:	2104      	movs	r1, #4
 8002542:	4618      	mov	r0, r3
 8002544:	f002 f8bc 	bl	80046c0 <HAL_RCC_ClockConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800254e:	f000 f929 	bl	80027a4 <Error_Handler>
  }
}
 8002552:	bf00      	nop
 8002554:	3758      	adds	r7, #88	; 0x58
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <MX_I2C1_Init+0x78>)
 8002564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <MX_I2C1_Init+0x7c>)
 800256a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_I2C1_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002574:	2201      	movs	r2, #1
 8002576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_I2C1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_I2C1_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <MX_I2C1_Init+0x74>)
 8002598:	f000 fe00 	bl	800319c <HAL_I2C_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025a2:	f000 f8ff 	bl	80027a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025a6:	2100      	movs	r1, #0
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <MX_I2C1_Init+0x74>)
 80025aa:	f001 fb79 	bl	8003ca0 <HAL_I2CEx_ConfigAnalogFilter>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025b4:	f000 f8f6 	bl	80027a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025b8:	2100      	movs	r1, #0
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_I2C1_Init+0x74>)
 80025bc:	f001 fbbb 	bl	8003d36 <HAL_I2CEx_ConfigDigitalFilter>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f000 f8ed 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200022ec 	.word	0x200022ec
 80025d4:	40005400 	.word	0x40005400
 80025d8:	10909cec 	.word	0x10909cec

080025dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <MX_I2C3_Init+0x74>)
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <MX_I2C3_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_I2C3_Init+0x74>)
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <MX_I2C3_Init+0x7c>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <MX_I2C3_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <MX_I2C3_Init+0x74>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <MX_I2C3_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_I2C3_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <MX_I2C3_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_I2C3_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_I2C3_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002616:	480e      	ldr	r0, [pc, #56]	; (8002650 <MX_I2C3_Init+0x74>)
 8002618:	f000 fdc0 	bl	800319c <HAL_I2C_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002622:	f000 f8bf 	bl	80027a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002626:	2100      	movs	r1, #0
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <MX_I2C3_Init+0x74>)
 800262a:	f001 fb39 	bl	8003ca0 <HAL_I2CEx_ConfigAnalogFilter>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002634:	f000 f8b6 	bl	80027a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002638:	2100      	movs	r1, #0
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_I2C3_Init+0x74>)
 800263c:	f001 fb7b 	bl	8003d36 <HAL_I2CEx_ConfigDigitalFilter>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 f8ad 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20002340 	.word	0x20002340
 8002654:	40005c00 	.word	0x40005c00
 8002658:	10909cec 	.word	0x10909cec

0800265c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <MX_SPI1_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800266c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002676:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800267a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_SPI1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_SPI1_Init+0x74>)
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002692:	2220      	movs	r2, #32
 8002694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_SPI1_Init+0x74>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_SPI1_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MX_SPI1_Init+0x74>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_SPI1_Init+0x74>)
 80026aa:	2207      	movs	r2, #7
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <MX_SPI1_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_SPI1_Init+0x74>)
 80026b6:	2208      	movs	r2, #8
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_SPI1_Init+0x74>)
 80026bc:	f002 fcd4 	bl	8005068 <HAL_SPI_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f000 f86d 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20002394 	.word	0x20002394
 80026d4:	40013000 	.word	0x40013000

080026d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <MX_GPIO_Init+0xc4>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	4a2a      	ldr	r2, [pc, #168]	; (800279c <MX_GPIO_Init+0xc4>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <MX_GPIO_Init+0xc4>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <MX_GPIO_Init+0xc4>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <MX_GPIO_Init+0xc4>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <MX_GPIO_Init+0xc4>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Payload_SW_Pin|GPIO_Output_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002728:	f000 fd20 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	2103      	movs	r1, #3
 8002730:	481b      	ldr	r0, [pc, #108]	; (80027a0 <MX_GPIO_Init+0xc8>)
 8002732:	f000 fd1b 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002736:	2301      	movs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f000 fba0 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_SW_Pin GPIO_Output_Pin */
  GPIO_InitStruct.Pin = Payload_SW_Pin|GPIO_Output_Pin;
 8002758:	f44f 7388 	mov.w	r3, #272	; 0x110
 800275c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002774:	f000 fb90 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8002778:	2303      	movs	r3, #3
 800277a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4619      	mov	r1, r3
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_GPIO_Init+0xc8>)
 8002790:	f000 fb82 	bl	8002e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002794:	bf00      	nop
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000400 	.word	0x48000400

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_MspInit+0x44>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_MspInit+0x44>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6613      	str	r3, [r2, #96]	; 0x60
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_MspInit+0x44>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_MspInit+0x44>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_MspInit+0x44>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_MspInit+0x44>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0a2      	sub	sp, #136	; 0x88
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	2254      	movs	r2, #84	; 0x54
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f006 fab3 	bl	8008d84 <memset>
  if(hi2c->Instance==I2C1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_I2C_MspInit+0x1a4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d158      	bne.n	80028da <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002828:	2340      	movs	r3, #64	; 0x40
 800282a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800282c:	2300      	movs	r3, #0
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	4618      	mov	r0, r3
 8002836:	f002 f92f 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002840:	f7ff ffb0 	bl	80027a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002868:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002878:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800287a:	2312      	movs	r3, #18
 800287c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287e:	2301      	movs	r3, #1
 8002880:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002888:	2304      	movs	r3, #4
 800288a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f000 fafe 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ae:	2304      	movs	r3, #4
 80028b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028b8:	4619      	mov	r1, r3
 80028ba:	483a      	ldr	r0, [pc, #232]	; (80029a4 <HAL_I2C_MspInit+0x1ac>)
 80028bc:	f000 faec 	bl	8002e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a36      	ldr	r2, [pc, #216]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 80028c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028d8:	e05c      	b.n	8002994 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <HAL_I2C_MspInit+0x1b0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d157      	bne.n	8002994 <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80028e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 f8d0 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 80028fe:	f7ff ff51 	bl	80027a4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002936:	2312      	movs	r3, #18
 8002938:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002944:	2304      	movs	r3, #4
 8002946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f000 faa0 	bl	8002e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002958:	2310      	movs	r3, #16
 800295a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295c:	2312      	movs	r3, #18
 800295e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800296a:	2304      	movs	r3, #4
 800296c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002974:	4619      	mov	r1, r3
 8002976:	480b      	ldr	r0, [pc, #44]	; (80029a4 <HAL_I2C_MspInit+0x1ac>)
 8002978:	f000 fa8e 	bl	8002e98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 8002982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_I2C_MspInit+0x1a8>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
}
 8002994:	bf00      	nop
 8002996:	3788      	adds	r7, #136	; 0x88
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40005400 	.word	0x40005400
 80029a0:	40021000 	.word	0x40021000
 80029a4:	48000400 	.word	0x48000400
 80029a8:	40005c00 	.word	0x40005c00

080029ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d129      	bne.n	8002a22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d8:	6613      	str	r3, [r2, #96]	; 0x60
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_SPI_MspInit+0x84>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 80029fe:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a10:	2305      	movs	r3, #5
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1e:	f000 fa3b 	bl	8002e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40013000 	.word	0x40013000
 8002a30:	40021000 	.word	0x40021000

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <NMI_Handler+0x4>

08002a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <MemManage_Handler+0x4>

08002a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <SysTick_Handler+0x34>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <SysTick_Handler+0x18>
		Timer1--;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <SysTick_Handler+0x34>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <SysTick_Handler+0x34>)
 8002a92:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <SysTick_Handler+0x38>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <SysTick_Handler+0x2c>
		Timer2--;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Handler+0x38>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <SysTick_Handler+0x38>)
 8002aa6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f000 f8cc 	bl	8002c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200022e4 	.word	0x200022e4
 8002ab4:	200022e6 	.word	0x200022e6

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f006 f954 	bl	8008d94 <__errno>
 8002aec:	4603      	mov	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <_sbrk+0x64>)
 8002b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20010000 	.word	0x20010000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	20002480 	.word	0x20002480
 8002b20:	20002810 	.word	0x20002810

08002b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <SystemInit+0x20>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <SystemInit+0x20>)
 8002b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b4c:	f7ff ffea 	bl	8002b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <LoopForever+0xe>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <LoopForever+0x16>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b76:	f006 f913 	bl	8008da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b7a:	f7ff fc55 	bl	8002428 <main>

08002b7e <LoopForever>:

LoopForever:
    b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002b8c:	0800aab0 	.word	0x0800aab0
  ldr r2, =_sbss
 8002b90:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b94:	2000280c 	.word	0x2000280c

08002b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC1_IRQHandler>

08002b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f943 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002baa:	200f      	movs	r0, #15
 8002bac:	f000 f80e 	bl	8002bcc <HAL_InitTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e001      	b.n	8002bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bbc:	f7ff fdf8 	bl	80027b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_InitTick+0x6c>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_InitTick+0x70>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_InitTick+0x6c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f941 	bl	8002e7e <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d809      	bhi.n	8002c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c10:	f000 f919 	bl	8002e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_InitTick+0x74>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e007      	b.n	8002c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e004      	b.n	8002c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e001      	b.n	8002c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	20000008 	.word	0x20000008
 8002c40:	2000000c 	.word	0x2000000c

08002c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x20>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x24>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_IncTick+0x24>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000010 	.word	0x20000010
 8002c68:	20002484 	.word	0x20002484

08002c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_GetTick+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20002484 	.word	0x20002484

08002c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff ffee 	bl	8002c6c <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c9c:	d005      	beq.n	8002caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_Delay+0x44>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002caa:	bf00      	nop
 8002cac:	f7ff ffde 	bl	8002c6c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d8f7      	bhi.n	8002cac <HAL_Delay+0x28>
  {
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000010 	.word	0x20000010

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff47 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff5c 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffb0 	bl	8002dec <SysTick_Config>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e148      	b.n	800313a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 813a 	beq.w	8003134 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d005      	beq.n	8002ed8 <HAL_GPIO_Init+0x40>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d017      	beq.n	8002f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d123      	bne.n	8002fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8094 	beq.w	8003134 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <HAL_GPIO_Init+0x2c0>)
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	4a51      	ldr	r2, [pc, #324]	; (8003158 <HAL_GPIO_Init+0x2c0>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6613      	str	r3, [r2, #96]	; 0x60
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_GPIO_Init+0x2c0>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003024:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_GPIO_Init+0x2c4>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1d4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a43      	ldr	r2, [pc, #268]	; (8003160 <HAL_GPIO_Init+0x2c8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1d0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a42      	ldr	r2, [pc, #264]	; (8003164 <HAL_GPIO_Init+0x2cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1cc>
 8003060:	2302      	movs	r3, #2
 8003062:	e004      	b.n	800306e <HAL_GPIO_Init+0x1d6>
 8003064:	2307      	movs	r3, #7
 8003066:	e002      	b.n	800306e <HAL_GPIO_Init+0x1d6>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_GPIO_Init+0x1d6>
 800306c:	2300      	movs	r3, #0
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4093      	lsls	r3, r2
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800307e:	4937      	ldr	r1, [pc, #220]	; (800315c <HAL_GPIO_Init+0x2c4>)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b0:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f aeaf 	bne.w	8002ea8 <HAL_GPIO_Init+0x10>
  }
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	40010000 	.word	0x40010000
 8003160:	48000400 	.word	0x48000400
 8003164:	48000800 	.word	0x48000800
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003188:	e002      	b.n	8003190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e08d      	b.n	80032ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fb18 	bl	80027f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e006      	b.n	8003224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d108      	bne.n	800323e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	e007      	b.n	800324e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	f040 80f9 	bne.w	80034ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_I2C_Mem_Write+0x34>
 8003302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0ed      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Mem_Write+0x4e>
 800331e:	2302      	movs	r3, #2
 8003320:	e0e6      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800332a:	f7ff fc9f 	bl	8002c6c <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2319      	movs	r3, #25
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fac3 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d1      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2221      	movs	r2, #33	; 0x21
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003374:	88f8      	ldrh	r0, [r7, #6]
 8003376:	893a      	ldrh	r2, [r7, #8]
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4603      	mov	r3, r0
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f9d3 	bl	8003730 <I2C_RequestMemoryWrite>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0a9      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2bff      	cmp	r3, #255	; 0xff
 80033a4:	d90e      	bls.n	80033c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	22ff      	movs	r2, #255	; 0xff
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	8979      	ldrh	r1, [r7, #10]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fc3d 	bl	8003c3c <I2C_TransferConfig>
 80033c2:	e00f      	b.n	80033e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	8979      	ldrh	r1, [r7, #10]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fc2c 	bl	8003c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fabc 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e07b      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_I2C_Mem_Write+0x1c8>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d130      	bne.n	800349c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fa3f 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04d      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d90e      	bls.n	800347c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fbe1 	bl	8003c3c <I2C_TransferConfig>
 800347a:	e00f      	b.n	800349c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	b2da      	uxtb	r2, r3
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fbd0 	bl	8003c3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d19e      	bne.n	80033e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 faa2 	bl	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e01a      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_I2C_Mem_Write+0x224>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	fe00e800 	.word	0xfe00e800

080034fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	817b      	strh	r3, [r7, #10]
 800350e:	460b      	mov	r3, r1
 8003510:	813b      	strh	r3, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	f040 80fd 	bne.w	800371e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_I2C_Mem_Read+0x34>
 800352a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0f1      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_I2C_Mem_Read+0x4e>
 8003546:	2302      	movs	r3, #2
 8003548:	e0ea      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003552:	f7ff fb8b 	bl	8002c6c <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2319      	movs	r3, #25
 800355e:	2201      	movs	r2, #1
 8003560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f9af 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0d5      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2222      	movs	r2, #34	; 0x22
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800359c:	88f8      	ldrh	r0, [r7, #6]
 800359e:	893a      	ldrh	r2, [r7, #8]
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4603      	mov	r3, r0
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f913 	bl	80037d8 <I2C_RequestMemoryRead>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0ad      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2bff      	cmp	r3, #255	; 0xff
 80035cc:	d90e      	bls.n	80035ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	4b52      	ldr	r3, [pc, #328]	; (8003728 <HAL_I2C_Mem_Read+0x22c>)
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fb29 	bl	8003c3c <I2C_TransferConfig>
 80035ea:	e00f      	b.n	800360c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	8979      	ldrh	r1, [r7, #10]
 80035fe:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_I2C_Mem_Read+0x22c>)
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fb18 	bl	8003c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2200      	movs	r2, #0
 8003614:	2104      	movs	r1, #4
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f956 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07c      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d034      	beq.n	80036cc <HAL_I2C_Mem_Read+0x1d0>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d130      	bne.n	80036cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f927 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e04d      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d90e      	bls.n	80036ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	b2da      	uxtb	r2, r3
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	2300      	movs	r3, #0
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fac9 	bl	8003c3c <I2C_TransferConfig>
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	2300      	movs	r3, #0
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fab8 	bl	8003c3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d19a      	bne.n	800360c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f98a 	bl	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e01a      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2220      	movs	r2, #32
 80036f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_I2C_Mem_Read+0x230>)
 80036fe:	400b      	ands	r3, r1
 8003700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	80002400 	.word	0x80002400
 800372c:	fe00e800 	.word	0xfe00e800

08003730 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	460b      	mov	r3, r1
 8003744:	813b      	strh	r3, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <I2C_RequestMemoryWrite+0xa4>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fa6f 	bl	8003c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8ff 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02c      	b.n	80037cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
 8003782:	e015      	b.n	80037b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	69b9      	ldr	r1, [r7, #24]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8e5 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e012      	b.n	80037cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037a6:	893b      	ldrh	r3, [r7, #8]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2200      	movs	r2, #0
 80037b8:	2180      	movs	r1, #128	; 0x80
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f884 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	80002000 	.word	0x80002000

080037d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	4608      	mov	r0, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	460b      	mov	r3, r1
 80037ec:	813b      	strh	r3, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	8979      	ldrh	r1, [r7, #10]
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <I2C_RequestMemoryRead+0xa4>)
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2300      	movs	r3, #0
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa1c 	bl	8003c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f8ac 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e02c      	b.n	8003872 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
 8003828:	e015      	b.n	8003856 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	b29b      	uxth	r3, r3
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	69b9      	ldr	r1, [r7, #24]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f892 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e012      	b.n	8003872 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f831 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	80002000 	.word	0x80002000

08003880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d103      	bne.n	800389e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d007      	beq.n	80038bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	619a      	str	r2, [r3, #24]
  }
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d8:	e031      	b.n	800393e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e0:	d02d      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7ff f9c3 	bl	8002c6c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d122      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	429a      	cmp	r2, r3
 8003914:	d113      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d0be      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003972:	e033      	b.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f87f 	bl	8003a7c <I2C_IsErrorOccurred>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e031      	b.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398e:	d025      	beq.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7ff f96c 	bl	8002c6c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11a      	bne.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d013      	beq.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d1c4      	bne.n	8003974 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a00:	e02f      	b.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f838 	bl	8003a7c <I2C_IsErrorOccurred>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e02d      	b.n	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7ff f929 	bl	8002c6c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11a      	bne.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d013      	beq.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e007      	b.n	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d1c8      	bne.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d068      	beq.n	8003b7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ab0:	e049      	b.n	8003b46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab8:	d045      	beq.n	8003b46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7ff f8d7 	bl	8002c6c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_IsErrorOccurred+0x54>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d13a      	bne.n	8003b46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ada:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ae2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af2:	d121      	bne.n	8003b38 <I2C_IsErrorOccurred+0xbc>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afa:	d01d      	beq.n	8003b38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d01a      	beq.n	8003b38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b12:	f7ff f8ab 	bl	8002c6c <HAL_GetTick>
 8003b16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b18:	e00e      	b.n	8003b38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b1a:	f7ff f8a7 	bl	8002c6c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b19      	cmp	r3, #25
 8003b26:	d907      	bls.n	8003b38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003b36:	e006      	b.n	8003b46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d1e9      	bne.n	8003b1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d003      	beq.n	8003b5c <I2C_IsErrorOccurred+0xe0>
 8003b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0aa      	beq.n	8003ab2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f043 0308 	orr.w	r3, r3, #8
 8003bb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01c      	beq.n	8003c2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff fe45 	bl	8003880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <I2C_IsErrorOccurred+0x1bc>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	fe00e800 	.word	0xfe00e800

08003c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c54:	7a7b      	ldrb	r3, [r7, #9]
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	0d5b      	lsrs	r3, r3, #21
 8003c76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <I2C_TransferConfig+0x60>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	ea02 0103 	and.w	r1, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	03ff63ff 	.word	0x03ff63ff

08003ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d138      	bne.n	8003d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e032      	b.n	8003d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d139      	bne.n	8003dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e033      	b.n	8003dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2224      	movs	r2, #36	; 0x24
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40007000 	.word	0x40007000

08003dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d130      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dfc:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d038      	beq.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2232      	movs	r2, #50	; 0x32
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e30:	e002      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e44:	d102      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f2      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d110      	bne.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e00f      	b.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d007      	beq.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e74:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	20000008 	.word	0x20000008
 8003e94:	431bde83 	.word	0x431bde83

08003e98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f000 bc02 	b.w	80046b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eac:	4b96      	ldr	r3, [pc, #600]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb6:	4b94      	ldr	r3, [pc, #592]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80e4 	beq.w	8004096 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4c>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	f040 808b 	bne.w	8003ff2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	f040 8087 	bne.w	8003ff2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee4:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_OscConfig+0x64>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e3d9      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_RCC_OscConfig+0x7e>
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_OscConfig+0x8a>
 8003f16:	4b7c      	ldr	r3, [pc, #496]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d223      	bcs.n	8003f6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd54 	bl	80049d8 <RCC_SetFlashLatencyFromMSIRange>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e3ba      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a72      	ldr	r2, [pc, #456]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	496d      	ldr	r1, [pc, #436]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f58:	4b6b      	ldr	r3, [pc, #428]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	4968      	ldr	r1, [pc, #416]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	e025      	b.n	8003fba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4960      	ldr	r1, [pc, #384]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	495b      	ldr	r1, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd14 	bl	80049d8 <RCC_SetFlashLatencyFromMSIRange>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e37a      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fba:	f000 fc81 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4950      	ldr	r1, [pc, #320]	; (800410c <HAL_RCC_OscConfig+0x274>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_RCC_OscConfig+0x278>)
 8003fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fda:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fdf4 	bl	8002bcc <HAL_InitTick>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d052      	beq.n	8004094 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	e35e      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d032      	beq.n	8004060 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004006:	f7fe fe31 	bl	8002c6c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800400e:	f7fe fe2d 	bl	8002c6c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e347      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b33      	ldr	r3, [pc, #204]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4930      	ldr	r1, [pc, #192]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	492b      	ldr	r1, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
 800405e:	e01a      	b.n	8004096 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800406c:	f7fe fdfe 	bl	8002c6c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004074:	f7fe fdfa 	bl	8002c6c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e314      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1dc>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d073      	beq.n	800418a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x21c>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d10e      	bne.n	80040cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d063      	beq.n	8004188 <HAL_RCC_OscConfig+0x2f0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15f      	bne.n	8004188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e2f1      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x24c>
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e025      	b.n	8004130 <HAL_RCC_OscConfig+0x298>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ec:	d114      	bne.n	8004118 <HAL_RCC_OscConfig+0x280>
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e013      	b.n	8004130 <HAL_RCC_OscConfig+0x298>
 8004108:	40021000 	.word	0x40021000
 800410c:	0800a5c0 	.word	0x0800a5c0
 8004110:	20000008 	.word	0x20000008
 8004114:	2000000c 	.word	0x2000000c
 8004118:	4ba0      	ldr	r3, [pc, #640]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a9f      	ldr	r2, [pc, #636]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b9d      	ldr	r3, [pc, #628]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a9c      	ldr	r2, [pc, #624]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fd98 	bl	8002c6c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe fd94 	bl	8002c6c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e2ae      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b92      	ldr	r3, [pc, #584]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2a8>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fd84 	bl	8002c6c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fd80 	bl	8002c6c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e29a      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x2d0>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d060      	beq.n	8004258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x310>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d119      	bne.n	80041d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d116      	bne.n	80041d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a8:	4b7c      	ldr	r3, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_OscConfig+0x328>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e277      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	4973      	ldr	r1, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d4:	e040      	b.n	8004258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d023      	beq.n	8004226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041de:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fe fd3f 	bl	8002c6c <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fe fd3b 	bl	8002c6c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e255      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	495f      	ldr	r1, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	e018      	b.n	8004258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b5d      	ldr	r3, [pc, #372]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a5c      	ldr	r2, [pc, #368]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fe fd1b 	bl	8002c6c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423a:	f7fe fd17 	bl	8002c6c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e231      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d03c      	beq.n	80042de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01c      	beq.n	80042a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	4a4a      	ldr	r2, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fe fcf6 	bl	8002c6c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004284:	f7fe fcf2 	bl	8002c6c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e20c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <HAL_RCC_OscConfig+0x3ec>
 80042a4:	e01b      	b.n	80042de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ac:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fcd9 	bl	8002c6c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042be:	f7fe fcd5 	bl	8002c6c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1ef      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ef      	bne.n	80042be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80a6 	beq.w	8004438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d118      	bne.n	8004356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004330:	f7fe fc9c 	bl	8002c6c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe fc98 	bl	8002c6c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1b2      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d108      	bne.n	8004370 <HAL_RCC_OscConfig+0x4d8>
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436e:	e029      	b.n	80043c4 <HAL_RCC_OscConfig+0x52c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d115      	bne.n	80043a4 <HAL_RCC_OscConfig+0x50c>
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a03      	ldr	r2, [pc, #12]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x52c>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	4b9a      	ldr	r3, [pc, #616]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a99      	ldr	r2, [pc, #612]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	4b96      	ldr	r3, [pc, #600]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a95      	ldr	r2, [pc, #596]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe fc4e 	bl	8002c6c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe fc4a 	bl	8002c6c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e162      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b89      	ldr	r3, [pc, #548]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ed      	beq.n	80043d4 <HAL_RCC_OscConfig+0x53c>
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fe fc37 	bl	8002c6c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fe fc33 	bl	8002c6c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e14b      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004418:	4b7d      	ldr	r3, [pc, #500]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ed      	bne.n	8004402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b78      	ldr	r3, [pc, #480]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a77      	ldr	r2, [pc, #476]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03c      	beq.n	80044be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800444c:	4b70      	ldr	r3, [pc, #448]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	4a6f      	ldr	r2, [pc, #444]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe fc06 	bl	8002c6c <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004464:	f7fe fc02 	bl	8002c6c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e11c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	4b66      	ldr	r3, [pc, #408]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <HAL_RCC_OscConfig+0x5cc>
 8004484:	e01b      	b.n	80044be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004486:	4b62      	ldr	r3, [pc, #392]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	4a60      	ldr	r2, [pc, #384]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fe fbe9 	bl	8002c6c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800449e:	f7fe fbe5 	bl	8002c6c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0ff      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ef      	bne.n	800449e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80f3 	beq.w	80046ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f040 80c9 	bne.w	8004664 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044d2:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0203 	and.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d12c      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	3b01      	subs	r3, #1
 80044f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d123      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d11b      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d113      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d109      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d06b      	beq.n	8004618 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d062      	beq.n	800460c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004546:	4b32      	ldr	r3, [pc, #200]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0ac      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004556:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800455c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004560:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004562:	f7fe fb83 	bl	8002c6c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fe fb7f 	bl	8002c6c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e099      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCC_OscConfig+0x77c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4912      	ldr	r1, [pc, #72]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045e4:	f7fe fb42 	bl	8002c6c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fe fb3e 	bl	8002c6c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e058      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460a:	e050      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e04f      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
 8004610:	40021000 	.word	0x40021000
 8004614:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d144      	bne.n	80046ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800463c:	f7fe fb16 	bl	8002c6c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fe fb12 	bl	8002c6c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e02c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x7ac>
 8004662:	e024      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d01f      	beq.n	80046aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fe faf9 	bl	8002c6c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe faf5 	bl	8002c6c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e00f      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4905      	ldr	r1, [pc, #20]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_OscConfig+0x824>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
 80046a8:	e001      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	feeefffc 	.word	0xfeeefffc

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0e7      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d910      	bls.n	8004704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4970      	ldr	r1, [pc, #448]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b6e      	ldr	r3, [pc, #440]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0cf      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471c:	429a      	cmp	r2, r3
 800471e:	d908      	bls.n	8004732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4960      	ldr	r1, [pc, #384]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04c      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004746:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d121      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0a6      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475e:	4b54      	ldr	r3, [pc, #336]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d115      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e09a      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004776:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e08e      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e086      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4943      	ldr	r1, [pc, #268]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fe fa60 	bl	8002c6c <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fe fa5c 	bl	8002c6c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e06e      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d010      	beq.n	8004806 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d208      	bcs.n	8004806 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	492b      	ldr	r1, [pc, #172]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d210      	bcs.n	8004836 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 0207 	bic.w	r2, r3, #7
 800481c:	4923      	ldr	r1, [pc, #140]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e036      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4918      	ldr	r1, [pc, #96]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4910      	ldr	r1, [pc, #64]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004874:	f000 f824 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	490b      	ldr	r1, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1fc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe f997 	bl	8002bcc <HAL_InitTick>
 800489e:	4603      	mov	r3, r0
 80048a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80048a2:	7afb      	ldrb	r3, [r7, #11]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800a5c0 	.word	0x0800a5c0
 80048b8:	20000008 	.word	0x20000008
 80048bc:	2000000c 	.word	0x2000000c

080048c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d8:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0x34>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11e      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048f4:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004900:	4b31      	ldr	r3, [pc, #196]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e005      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800491c:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d102      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e004      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d101      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004944:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d134      	bne.n	80049b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0xa6>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d003      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0xac>
 8004964:	e005      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004966:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004968:	617b      	str	r3, [r7, #20]
      break;
 800496a:	e005      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800496e:	617b      	str	r3, [r7, #20]
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	617b      	str	r3, [r7, #20]
      break;
 8004976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004978:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	3301      	adds	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	fb03 f202 	mul.w	r2, r3, r2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	0e5b      	lsrs	r3, r3, #25
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	3301      	adds	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049b8:	69bb      	ldr	r3, [r7, #24]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800a5d0 	.word	0x0800a5d0
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200

080049d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049e4:	4b2a      	ldr	r3, [pc, #168]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049f0:	f7ff f9ee 	bl	8003dd0 <HAL_PWREx_GetVoltageRange>
 80049f4:	6178      	str	r0, [r7, #20]
 80049f6:	e014      	b.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a10:	f7ff f9de 	bl	8003dd0 <HAL_PWREx_GetVoltageRange>
 8004a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a28:	d10b      	bne.n	8004a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d919      	bls.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2ba0      	cmp	r3, #160	; 0xa0
 8004a34:	d902      	bls.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a36:	2302      	movs	r3, #2
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e013      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e010      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d902      	bls.n	8004a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a48:	2303      	movs	r3, #3
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e00a      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d102      	bne.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a54:	2302      	movs	r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e004      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d101      	bne.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a60:	2301      	movs	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 0207 	bic.w	r2, r3, #7
 8004a6c:	4909      	ldr	r1, [pc, #36]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40022000 	.word	0x40022000

08004a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d031      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004abc:	d01a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004abe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ac2:	d814      	bhi.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004acc:	d10f      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a5c      	ldr	r2, [pc, #368]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ada:	e00c      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f9ce 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	74fb      	strb	r3, [r7, #19]
      break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af6:	7cfb      	ldrb	r3, [r7, #19]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004afc:	4b51      	ldr	r3, [pc, #324]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	494e      	ldr	r1, [pc, #312]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b12:	e001      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 809e 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b2a:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b40:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	4a3f      	ldr	r2, [pc, #252]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5c:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a39      	ldr	r2, [pc, #228]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b68:	f7fe f880 	bl	8002c6c <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b6e:	e009      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fe f87c 	bl	8002c6c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	74fb      	strb	r3, [r7, #19]
        break;
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b84:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d15a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b96:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d019      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe f83c 	bl	8002c6c <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fe f838 	bl	8002c6c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d902      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c0e:	e006      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ec      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	4904      	ldr	r1, [pc, #16]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c3a:	e009      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	74bb      	strb	r3, [r7, #18]
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c50:	7c7b      	ldrb	r3, [r7, #17]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c56:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a89      	ldr	r2, [pc, #548]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c6e:	4b84      	ldr	r3, [pc, #528]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f023 0203 	bic.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	4980      	ldr	r1, [pc, #512]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c90:	4b7b      	ldr	r3, [pc, #492]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	4978      	ldr	r1, [pc, #480]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cb2:	4b73      	ldr	r3, [pc, #460]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	496f      	ldr	r1, [pc, #444]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4967      	ldr	r1, [pc, #412]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cf6:	4b62      	ldr	r3, [pc, #392]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	495e      	ldr	r1, [pc, #376]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d18:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	4956      	ldr	r1, [pc, #344]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d3a:	4b51      	ldr	r3, [pc, #324]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	494d      	ldr	r1, [pc, #308]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d028      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d5c:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4945      	ldr	r1, [pc, #276]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4a3f      	ldr	r2, [pc, #252]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d86:	60d3      	str	r3, [r2, #12]
 8004d88:	e011      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d92:	d10c      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f872 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d028      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	492d      	ldr	r1, [pc, #180]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de4:	60d3      	str	r3, [r2, #12]
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f843 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01c      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	4916      	ldr	r1, [pc, #88]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f820 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	4904      	ldr	r1, [pc, #16]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e74:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e92:	4b74      	ldr	r3, [pc, #464]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e9e:	4b71      	ldr	r3, [pc, #452]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0203 	and.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10d      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb6:	4b6b      	ldr	r3, [pc, #428]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d047      	beq.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e044      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d018      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x86>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d825      	bhi.n	8004f28 <RCCEx_PLLSAI1_Config+0xa4>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <RCCEx_PLLSAI1_Config+0x62>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d009      	beq.n	8004ef8 <RCCEx_PLLSAI1_Config+0x74>
 8004ee4:	e020      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee6:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e01a      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef8:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e013      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0a:	4b56      	ldr	r3, [pc, #344]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f26:	e006      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e004      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3e:	4b49      	ldr	r3, [pc, #292]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4943      	ldr	r1, [pc, #268]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d17c      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f60:	4b40      	ldr	r3, [pc, #256]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3f      	ldr	r2, [pc, #252]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fe7e 	bl	8002c6c <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f74:	f7fd fe7a 	bl	8002c6c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
        break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f88:	4b36      	ldr	r3, [pc, #216]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ef      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d15f      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d110      	bne.n	8004fc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	0211      	lsls	r1, r2, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68d2      	ldr	r2, [r2, #12]
 8004fb6:	06d2      	lsls	r2, r2, #27
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	492a      	ldr	r1, [pc, #168]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]
 8004fc0:	e027      	b.n	8005012 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d112      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc8:	4b26      	ldr	r3, [pc, #152]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
 8004fd8:	0211      	lsls	r1, r2, #8
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6912      	ldr	r2, [r2, #16]
 8004fde:	0852      	lsrs	r2, r2, #1
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0552      	lsls	r2, r2, #21
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	491f      	ldr	r1, [pc, #124]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
 8004fec:	e011      	b.n	8005012 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ff6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6892      	ldr	r2, [r2, #8]
 8004ffe:	0211      	lsls	r1, r2, #8
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6952      	ldr	r2, [r2, #20]
 8005004:	0852      	lsrs	r2, r2, #1
 8005006:	3a01      	subs	r2, #1
 8005008:	0652      	lsls	r2, r2, #25
 800500a:	430a      	orrs	r2, r1
 800500c:	4915      	ldr	r1, [pc, #84]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a13      	ldr	r2, [pc, #76]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800501c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fd fe25 	bl	8002c6c <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005024:	e009      	b.n	800503a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005026:	f7fd fe21 	bl	8002c6c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d902      	bls.n	800503a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	73fb      	strb	r3, [r7, #15]
          break;
 8005038:	e005      	b.n	8005046 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0ef      	beq.n	8005026 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000

08005068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e095      	b.n	80051a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d009      	beq.n	80050a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	61da      	str	r2, [r3, #28]
 8005092:	e005      	b.n	80050a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fc76 	bl	80029ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d902      	bls.n	80050e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e002      	b.n	80050ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050f6:	d007      	beq.n	8005108 <HAL_SPI_Init+0xa0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	ea42 0103 	orr.w	r1, r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f003 0204 	and.w	r2, r3, #4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005184:	ea42 0103 	orr.w	r1, r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_SPI_Transmit+0x22>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e15f      	b.n	8005490 <HAL_SPI_Transmit+0x2e2>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d8:	f7fd fd48 	bl	8002c6c <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
 80051f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f2:	e148      	b.n	8005486 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Transmit+0x52>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005204:	e13f      	b.n	8005486 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2203      	movs	r2, #3
 800520a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d10f      	bne.n	8005272 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d007      	beq.n	8005290 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d94f      	bls.n	800533a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Transmit+0xfa>
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d142      	bne.n	800532e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	881a      	ldrh	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	1c9a      	adds	r2, r3, #2
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052cc:	e02f      	b.n	800532e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d112      	bne.n	8005302 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	881a      	ldrh	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	1c9a      	adds	r2, r3, #2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005300:	e015      	b.n	800532e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005302:	f7fd fcb3 	bl	8002c6c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d803      	bhi.n	800531a <HAL_SPI_Transmit+0x16c>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005318:	d102      	bne.n	8005320 <HAL_SPI_Transmit+0x172>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800532c:	e0ab      	b.n	8005486 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ca      	bne.n	80052ce <HAL_SPI_Transmit+0x120>
 8005338:	e080      	b.n	800543c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_Transmit+0x19a>
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d174      	bne.n	8005432 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d912      	bls.n	8005378 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b02      	subs	r3, #2
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005376:	e05c      	b.n	8005432 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800539e:	e048      	b.n	8005432 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d12b      	bne.n	8005406 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d912      	bls.n	80053de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b02      	subs	r3, #2
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053dc:	e029      	b.n	8005432 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005404:	e015      	b.n	8005432 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005406:	f7fd fc31 	bl	8002c6c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d803      	bhi.n	800541e <HAL_SPI_Transmit+0x270>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800541c:	d102      	bne.n	8005424 <HAL_SPI_Transmit+0x276>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005430:	e029      	b.n	8005486 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1b1      	bne.n	80053a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fb69 	bl	8005b18 <SPI_EndRxTxTransaction>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e003      	b.n	8005486 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800548e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054a6:	2301      	movs	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_SPI_TransmitReceive+0x26>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e20a      	b.n	80058d4 <HAL_SPI_TransmitReceive+0x43c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c6:	f7fd fbd1 	bl	8002c6c <HAL_GetTick>
 80054ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054e2:	7efb      	ldrb	r3, [r7, #27]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d00e      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x6e>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ee:	d106      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x66>
 80054f8:	7efb      	ldrb	r3, [r7, #27]
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005504:	e1e0      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x80>
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800551e:	e1d3      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b04      	cmp	r3, #4
 800552a:	d003      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2205      	movs	r2, #5
 8005530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	887a      	ldrh	r2, [r7, #2]
 8005544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	887a      	ldrh	r2, [r7, #2]
 800554c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	887a      	ldrh	r2, [r7, #2]
 800555a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	887a      	ldrh	r2, [r7, #2]
 8005560:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005576:	d802      	bhi.n	800557e <HAL_SPI_TransmitReceive+0xe6>
 8005578:	8a3b      	ldrh	r3, [r7, #16]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d908      	bls.n	8005590 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	e007      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d007      	beq.n	80055be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c6:	f240 8081 	bls.w	80056cc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x140>
 80055d2:	8a7b      	ldrh	r3, [r7, #18]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d16d      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	881a      	ldrh	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	1c9a      	adds	r2, r3, #2
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055fc:	e05a      	b.n	80056b4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d11b      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x1ac>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x1ac>
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b01      	cmp	r3, #1
 800561a:	d113      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d11c      	bne.n	800568c <HAL_SPI_TransmitReceive+0x1f4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	b292      	uxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800568c:	f7fd faee 	bl	8002c6c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005698:	429a      	cmp	r2, r3
 800569a:	d80b      	bhi.n	80056b4 <HAL_SPI_TransmitReceive+0x21c>
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a2:	d007      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80056b2:	e109      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d19f      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x166>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d199      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x166>
 80056ca:	e0e3      	b.n	8005894 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x244>
 80056d4:	8a7b      	ldrh	r3, [r7, #18]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	f040 80cf 	bne.w	800587a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d912      	bls.n	800570c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b02      	subs	r3, #2
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	87da      	strh	r2, [r3, #62]	; 0x3e
 800570a:	e0b6      	b.n	800587a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005732:	e0a2      	b.n	800587a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d134      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x314>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x314>
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	2b01      	cmp	r3, #1
 8005750:	d12c      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d912      	bls.n	8005782 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b02      	subs	r3, #2
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005780:	e012      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d148      	bne.n	800584c <HAL_SPI_TransmitReceive+0x3b4>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d042      	beq.n	800584c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d923      	bls.n	800581a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	b292      	uxth	r2, r2
 80057de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	1c9a      	adds	r2, r3, #2
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b02      	subs	r3, #2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d81f      	bhi.n	8005848 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	e016      	b.n	8005848 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f103 020c 	add.w	r2, r3, #12
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800584c:	f7fd fa0e 	bl	8002c6c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	429a      	cmp	r2, r3
 800585a:	d803      	bhi.n	8005864 <HAL_SPI_TransmitReceive+0x3cc>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005862:	d102      	bne.n	800586a <HAL_SPI_TransmitReceive+0x3d2>
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005878:	e026      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f af57 	bne.w	8005734 <HAL_SPI_TransmitReceive+0x29c>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	f47f af50 	bne.w	8005734 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f93d 	bl	8005b18 <SPI_EndRxTxTransaction>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058be:	e003      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3728      	adds	r7, #40	; 0x28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058ec:	f7fd f9be 	bl	8002c6c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058fc:	f7fd f9b6 	bl	8002c6c <HAL_GetTick>
 8005900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	015b      	lsls	r3, r3, #5
 8005908:	0d1b      	lsrs	r3, r3, #20
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	e054      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d050      	beq.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800591c:	f7fd f9a6 	bl	8002c6c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	429a      	cmp	r2, r3
 800592a:	d902      	bls.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d13d      	bne.n	80059ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594a:	d111      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005954:	d004      	beq.n	8005960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595e:	d107      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005978:	d10f      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e017      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d19b      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000008 	.word	0x20000008

080059ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059fe:	f7fd f935 	bl	8002c6c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a0e:	f7fd f92d 	bl	8002c6c <HAL_GetTick>
 8005a12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a34:	e060      	b.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a3c:	d107      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a54:	d050      	beq.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a56:	f7fd f909 	bl	8002c6c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d13d      	bne.n	8005ae8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a84:	d111      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8e:	d004      	beq.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d107      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d10f      	bne.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e010      	b.n	8005b0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d196      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000008 	.word	0x20000008

08005b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff ff5b 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e027      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fec0 	bl	80058dc <SPI_WaitFlagStateUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e014      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff ff34 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e000      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ba8:	4904      	ldr	r1, [pc, #16]	; (8005bbc <MX_FATFS_Init+0x18>)
 8005baa:	4805      	ldr	r0, [pc, #20]	; (8005bc0 <MX_FATFS_Init+0x1c>)
 8005bac:	f002 fff4 	bl	8008b98 <FATFS_LinkDriver>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <MX_FATFS_Init+0x20>)
 8005bb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000248c 	.word	0x2000248c
 8005bc0:	20000014 	.word	0x20000014
 8005bc4:	20002488 	.word	0x20002488

08005bc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005bcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fc f909 	bl	8001dfc <SD_disk_initialize>
 8005bea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fc f9e1 	bl	8001fc8 <SD_disk_status>
 8005c06:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	 return SD_disk_read(pdrv, buff, sector, count);
 8005c20:	7bf8      	ldrb	r0, [r7, #15]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	f7fc f9e4 	bl	8001ff4 <SD_disk_read>
 8005c2c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005c46:	7bf8      	ldrb	r0, [r7, #15]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	f7fc fa3b 	bl	80020c8 <SD_disk_write>
 8005c52:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	603a      	str	r2, [r7, #0]
 8005c66:	71fb      	strb	r3, [r7, #7]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005c6c:	79b9      	ldrb	r1, [r7, #6]
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fc faac 	bl	80021d0 <SD_disk_ioctl>
 8005c78:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <disk_status+0x30>)
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	79fa      	ldrb	r2, [r7, #7]
 8005c9c:	4905      	ldr	r1, [pc, #20]	; (8005cb4 <disk_status+0x30>)
 8005c9e:	440a      	add	r2, r1
 8005ca0:	7a12      	ldrb	r2, [r2, #8]
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4798      	blx	r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200026b8 	.word	0x200026b8

08005cb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <disk_initialize+0x48>)
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d111      	bne.n	8005cf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <disk_initialize+0x48>)
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <disk_initialize+0x48>)
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	79fa      	ldrb	r2, [r7, #7]
 8005ce6:	4906      	ldr	r1, [pc, #24]	; (8005d00 <disk_initialize+0x48>)
 8005ce8:	440a      	add	r2, r1
 8005cea:	7a12      	ldrb	r2, [r2, #8]
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	200026b8 	.word	0x200026b8

08005d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <disk_read+0x3c>)
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	689c      	ldr	r4, [r3, #8]
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <disk_read+0x3c>)
 8005d24:	4413      	add	r3, r2
 8005d26:	7a18      	ldrb	r0, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	47a0      	blx	r4
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200026b8 	.word	0x200026b8

08005d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <disk_write+0x3c>)
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68dc      	ldr	r4, [r3, #12]
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	4a07      	ldr	r2, [pc, #28]	; (8005d80 <disk_write+0x3c>)
 8005d64:	4413      	add	r3, r2
 8005d66:	7a18      	ldrb	r0, [r3, #8]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	47a0      	blx	r4
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd90      	pop	{r4, r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200026b8 	.word	0x200026b8

08005d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <disk_ioctl+0x38>)
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	79fa      	ldrb	r2, [r7, #7]
 8005da2:	4906      	ldr	r1, [pc, #24]	; (8005dbc <disk_ioctl+0x38>)
 8005da4:	440a      	add	r2, r1
 8005da6:	7a10      	ldrb	r0, [r2, #8]
 8005da8:	79b9      	ldrb	r1, [r7, #6]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4798      	blx	r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	200026b8 	.word	0x200026b8

08005dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005dd0:	89fb      	ldrh	r3, [r7, #14]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	b21a      	sxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005de2:	89fb      	ldrh	r3, [r7, #14]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3303      	adds	r3, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	3202      	adds	r2, #2
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	3201      	adds	r2, #1
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	1c53      	adds	r3, r2, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	6179      	str	r1, [r7, #20]
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f1      	bne.n	8005ede <mem_cpy+0x1a>
	}
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	617a      	str	r2, [r7, #20]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f3      	bne.n	8005f16 <mem_set+0x10>
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	61ba      	str	r2, [r7, #24]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	1acb      	subs	r3, r1, r3
 8005f68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <mem_cmp+0x40>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0eb      	beq.n	8005f54 <mem_cmp+0x18>

	return r;
 8005f7c:	697b      	ldr	r3, [r7, #20]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f94:	e002      	b.n	8005f9c <chk_chr+0x12>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <chk_chr+0x26>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d1f2      	bne.n	8005f96 <chk_chr+0xc>
	return *str;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e029      	b.n	8006028 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <chk_lock+0xb4>)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01d      	beq.n	800601e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fe2:	4a24      	ldr	r2, [pc, #144]	; (8006074 <chk_lock+0xb4>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	4413      	add	r3, r2
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d116      	bne.n	8006022 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <chk_lock+0xb4>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006004:	429a      	cmp	r2, r3
 8006006:	d10c      	bne.n	8006022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006008:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <chk_lock+0xb4>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	4413      	add	r3, r2
 8006010:	3308      	adds	r3, #8
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006018:	429a      	cmp	r2, r3
 800601a:	d102      	bne.n	8006022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800601c:	e007      	b.n	800602e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3301      	adds	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d9d2      	bls.n	8005fd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d109      	bne.n	8006048 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <chk_lock+0x80>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d101      	bne.n	8006044 <chk_lock+0x84>
 8006040:	2300      	movs	r3, #0
 8006042:	e010      	b.n	8006066 <chk_lock+0xa6>
 8006044:	2312      	movs	r3, #18
 8006046:	e00e      	b.n	8006066 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <chk_lock+0xa0>
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <chk_lock+0xb4>)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	4413      	add	r3, r2
 8006056:	330c      	adds	r3, #12
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	d101      	bne.n	8006064 <chk_lock+0xa4>
 8006060:	2310      	movs	r3, #16
 8006062:	e000      	b.n	8006066 <chk_lock+0xa6>
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20002498 	.word	0x20002498

08006078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800607e:	2300      	movs	r3, #0
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	e002      	b.n	800608a <enq_lock+0x12>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3301      	adds	r3, #1
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d806      	bhi.n	800609e <enq_lock+0x26>
 8006090:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <enq_lock+0x40>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f2      	bne.n	8006084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20002498 	.word	0x20002498

080060bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e01f      	b.n	800610c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060cc:	4a41      	ldr	r2, [pc, #260]	; (80061d4 <inc_lock+0x118>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	4413      	add	r3, r2
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d113      	bne.n	8006106 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060de:	4a3d      	ldr	r2, [pc, #244]	; (80061d4 <inc_lock+0x118>)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	4413      	add	r3, r2
 80060e6:	3304      	adds	r3, #4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d109      	bne.n	8006106 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80060f2:	4a38      	ldr	r2, [pc, #224]	; (80061d4 <inc_lock+0x118>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	4413      	add	r3, r2
 80060fa:	3308      	adds	r3, #8
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006102:	429a      	cmp	r2, r3
 8006104:	d006      	beq.n	8006114 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d9dc      	bls.n	80060cc <inc_lock+0x10>
 8006112:	e000      	b.n	8006116 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006114:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d132      	bne.n	8006182 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e002      	b.n	8006128 <inc_lock+0x6c>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d806      	bhi.n	800613c <inc_lock+0x80>
 800612e:	4a29      	ldr	r2, [pc, #164]	; (80061d4 <inc_lock+0x118>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	4413      	add	r3, r2
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f2      	bne.n	8006122 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d101      	bne.n	8006146 <inc_lock+0x8a>
 8006142:	2300      	movs	r3, #0
 8006144:	e040      	b.n	80061c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4922      	ldr	r1, [pc, #136]	; (80061d4 <inc_lock+0x118>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	440b      	add	r3, r1
 8006152:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	491e      	ldr	r1, [pc, #120]	; (80061d4 <inc_lock+0x118>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	440b      	add	r3, r1
 8006160:	3304      	adds	r3, #4
 8006162:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695a      	ldr	r2, [r3, #20]
 8006168:	491a      	ldr	r1, [pc, #104]	; (80061d4 <inc_lock+0x118>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	440b      	add	r3, r1
 8006170:	3308      	adds	r3, #8
 8006172:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <inc_lock+0x118>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	4413      	add	r3, r2
 800617c:	330c      	adds	r3, #12
 800617e:	2200      	movs	r2, #0
 8006180:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <inc_lock+0xe0>
 8006188:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <inc_lock+0x118>)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	4413      	add	r3, r2
 8006190:	330c      	adds	r3, #12
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <inc_lock+0xe0>
 8006198:	2300      	movs	r3, #0
 800619a:	e015      	b.n	80061c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d108      	bne.n	80061b4 <inc_lock+0xf8>
 80061a2:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <inc_lock+0x118>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	4413      	add	r3, r2
 80061aa:	330c      	adds	r3, #12
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	e001      	b.n	80061b8 <inc_lock+0xfc>
 80061b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b8:	4906      	ldr	r1, [pc, #24]	; (80061d4 <inc_lock+0x118>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	440b      	add	r3, r1
 80061c0:	330c      	adds	r3, #12
 80061c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20002498 	.word	0x20002498

080061d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d825      	bhi.n	8006238 <dec_lock+0x60>
		n = Files[i].ctr;
 80061ec:	4a17      	ldr	r2, [pc, #92]	; (800624c <dec_lock+0x74>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	4413      	add	r3, r2
 80061f4:	330c      	adds	r3, #12
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061fa:	89fb      	ldrh	r3, [r7, #14]
 80061fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006200:	d101      	bne.n	8006206 <dec_lock+0x2e>
 8006202:	2300      	movs	r3, #0
 8006204:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006206:	89fb      	ldrh	r3, [r7, #14]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <dec_lock+0x3a>
 800620c:	89fb      	ldrh	r3, [r7, #14]
 800620e:	3b01      	subs	r3, #1
 8006210:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006212:	4a0e      	ldr	r2, [pc, #56]	; (800624c <dec_lock+0x74>)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	330c      	adds	r3, #12
 800621c:	89fa      	ldrh	r2, [r7, #14]
 800621e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006220:	89fb      	ldrh	r3, [r7, #14]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <dec_lock+0x5a>
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <dec_lock+0x74>)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	4413      	add	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	737b      	strb	r3, [r7, #13]
 8006236:	e001      	b.n	800623c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006238:	2302      	movs	r3, #2
 800623a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800623c:	7b7b      	ldrb	r3, [r7, #13]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20002498 	.word	0x20002498

08006250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e010      	b.n	8006280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800625e:	4a0d      	ldr	r2, [pc, #52]	; (8006294 <clear_lock+0x44>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4413      	add	r3, r2
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d105      	bne.n	800627a <clear_lock+0x2a>
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <clear_lock+0x44>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	4413      	add	r3, r2
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d9eb      	bls.n	800625e <clear_lock+0xe>
	}
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	20002498 	.word	0x20002498

08006298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	78db      	ldrb	r3, [r3, #3]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d034      	beq.n	8006316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7858      	ldrb	r0, [r3, #1]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062bc:	2301      	movs	r3, #1
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	f7ff fd40 	bl	8005d44 <disk_write>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	e022      	b.n	8006316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d217      	bcs.n	8006316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	789b      	ldrb	r3, [r3, #2]
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e010      	b.n	8006310 <sync_window+0x78>
					wsect += fs->fsize;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7858      	ldrb	r0, [r3, #1]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006302:	2301      	movs	r3, #1
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	f7ff fd1d 	bl	8005d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3b01      	subs	r3, #1
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d8eb      	bhi.n	80062ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d01b      	beq.n	8006370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ffad 	bl	8006298 <sync_window>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d113      	bne.n	8006370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7858      	ldrb	r0, [r3, #1]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006352:	2301      	movs	r3, #1
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	f7ff fcd5 	bl	8005d04 <disk_read>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ff87 	bl	8006298 <sync_window>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d159      	bne.n	8006448 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d149      	bne.n	8006430 <sync_fs+0xb4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d145      	bne.n	8006430 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	899b      	ldrh	r3, [r3, #12]
 80063ae:	461a      	mov	r2, r3
 80063b0:	2100      	movs	r1, #0
 80063b2:	f7ff fda8 	bl	8005f06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3338      	adds	r3, #56	; 0x38
 80063ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063be:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fd37 	bl	8005e36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3338      	adds	r3, #56	; 0x38
 80063cc:	4921      	ldr	r1, [pc, #132]	; (8006454 <sync_fs+0xd8>)
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fd4c 	bl	8005e6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3338      	adds	r3, #56	; 0x38
 80063d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063dc:	491e      	ldr	r1, [pc, #120]	; (8006458 <sync_fs+0xdc>)
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fd44 	bl	8005e6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3338      	adds	r3, #56	; 0x38
 80063e8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7ff fd3a 	bl	8005e6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3338      	adds	r3, #56	; 0x38
 80063fc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7ff fd30 	bl	8005e6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7858      	ldrb	r0, [r3, #1]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006424:	2301      	movs	r3, #1
 8006426:	f7ff fc8d 	bl	8005d44 <disk_write>
			fs->fsi_flag = 0;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fca3 	bl	8005d84 <disk_ioctl>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <sync_fs+0xcc>
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	41615252 	.word	0x41615252
 8006458:	61417272 	.word	0x61417272

0800645c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	3b02      	subs	r3, #2
 800646a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	3b02      	subs	r3, #2
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d301      	bcc.n	800647c <clust2sect+0x20>
 8006478:	2300      	movs	r3, #0
 800647a:	e008      	b.n	800648e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	895b      	ldrh	r3, [r3, #10]
 8006480:	461a      	mov	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	fb03 f202 	mul.w	r2, r3, r2
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4413      	add	r3, r2
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d904      	bls.n	80064ba <get_fat+0x20>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80064ba:	2301      	movs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e0bb      	b.n	8006638 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	f000 8083 	beq.w	80065d6 <get_fat+0x13c>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	f300 80a7 	bgt.w	8006624 <get_fat+0x18a>
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d002      	beq.n	80064e0 <get_fat+0x46>
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d056      	beq.n	800658c <get_fat+0xf2>
 80064de:	e0a1      	b.n	8006624 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	899b      	ldrh	r3, [r3, #12]
 80064f6:	4619      	mov	r1, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80064fe:	4413      	add	r3, r2
 8006500:	4619      	mov	r1, r3
 8006502:	6938      	ldr	r0, [r7, #16]
 8006504:	f7ff ff0c 	bl	8006320 <move_window>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 808d 	bne.w	800662a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	60fa      	str	r2, [r7, #12]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	8992      	ldrh	r2, [r2, #12]
 800651a:	fbb3 f1f2 	udiv	r1, r3, r2
 800651e:	fb01 f202 	mul.w	r2, r1, r2
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4413      	add	r3, r2
 8006528:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800652c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	899b      	ldrh	r3, [r3, #12]
 8006536:	4619      	mov	r1, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	fbb3 f3f1 	udiv	r3, r3, r1
 800653e:	4413      	add	r3, r2
 8006540:	4619      	mov	r1, r3
 8006542:	6938      	ldr	r0, [r7, #16]
 8006544:	f7ff feec 	bl	8006320 <move_window>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d16f      	bne.n	800662e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	899b      	ldrh	r3, [r3, #12]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	fbb3 f1f2 	udiv	r1, r3, r2
 800655a:	fb01 f202 	mul.w	r2, r1, r2
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4413      	add	r3, r2
 8006564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <get_fat+0xe8>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	e002      	b.n	8006588 <get_fat+0xee>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006588:	617b      	str	r3, [r7, #20]
			break;
 800658a:	e055      	b.n	8006638 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	899b      	ldrh	r3, [r3, #12]
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	fbb3 f3f1 	udiv	r3, r3, r1
 80065a0:	4413      	add	r3, r2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6938      	ldr	r0, [r7, #16]
 80065a6:	f7ff febb 	bl	8006320 <move_window>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d140      	bne.n	8006632 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	8992      	ldrh	r2, [r2, #12]
 80065be:	fbb3 f0f2 	udiv	r0, r3, r2
 80065c2:	fb00 f202 	mul.w	r2, r0, r2
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	440b      	add	r3, r1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fbf8 	bl	8005dc0 <ld_word>
 80065d0:	4603      	mov	r3, r0
 80065d2:	617b      	str	r3, [r7, #20]
			break;
 80065d4:	e030      	b.n	8006638 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	899b      	ldrh	r3, [r3, #12]
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4619      	mov	r1, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ea:	4413      	add	r3, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	6938      	ldr	r0, [r7, #16]
 80065f0:	f7ff fe96 	bl	8006320 <move_window>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11d      	bne.n	8006636 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	8992      	ldrh	r2, [r2, #12]
 8006608:	fbb3 f0f2 	udiv	r0, r3, r2
 800660c:	fb00 f202 	mul.w	r2, r0, r2
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	440b      	add	r3, r1
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fbeb 	bl	8005df0 <ld_dword>
 800661a:	4603      	mov	r3, r0
 800661c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006620:	617b      	str	r3, [r7, #20]
			break;
 8006622:	e009      	b.n	8006638 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e006      	b.n	8006638 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800662a:	bf00      	nop
 800662c:	e004      	b.n	8006638 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006636:	bf00      	nop
		}
	}

	return val;
 8006638:	697b      	ldr	r3, [r7, #20]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006642:	b590      	push	{r4, r7, lr}
 8006644:	b089      	sub	sp, #36	; 0x24
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b01      	cmp	r3, #1
 8006656:	f240 8109 	bls.w	800686c <put_fat+0x22a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	f080 8103 	bcs.w	800686c <put_fat+0x22a>
		switch (fs->fs_type) {
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b03      	cmp	r3, #3
 800666c:	f000 80b6 	beq.w	80067dc <put_fat+0x19a>
 8006670:	2b03      	cmp	r3, #3
 8006672:	f300 80fb 	bgt.w	800686c <put_fat+0x22a>
 8006676:	2b01      	cmp	r3, #1
 8006678:	d003      	beq.n	8006682 <put_fat+0x40>
 800667a:	2b02      	cmp	r3, #2
 800667c:	f000 8083 	beq.w	8006786 <put_fat+0x144>
 8006680:	e0f4      	b.n	800686c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4413      	add	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	899b      	ldrh	r3, [r3, #12]
 8006698:	4619      	mov	r1, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	fbb3 f3f1 	udiv	r3, r3, r1
 80066a0:	4413      	add	r3, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fe3b 	bl	8006320 <move_window>
 80066aa:	4603      	mov	r3, r0
 80066ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ae:	7ffb      	ldrb	r3, [r7, #31]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 80d4 	bne.w	800685e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	61ba      	str	r2, [r7, #24]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	8992      	ldrh	r2, [r2, #12]
 80066c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80066ca:	fb00 f202 	mul.w	r2, r0, r2
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	440b      	add	r3, r1
 80066d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00d      	beq.n	80066fa <put_fat+0xb8>
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	b25a      	sxtb	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	e001      	b.n	80066fe <put_fat+0xbc>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	899b      	ldrh	r3, [r3, #12]
 8006710:	4619      	mov	r1, r3
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	fbb3 f3f1 	udiv	r3, r3, r1
 8006718:	4413      	add	r3, r2
 800671a:	4619      	mov	r1, r3
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff fdff 	bl	8006320 <move_window>
 8006722:	4603      	mov	r3, r0
 8006724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006726:	7ffb      	ldrb	r3, [r7, #31]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 809a 	bne.w	8006862 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	899b      	ldrh	r3, [r3, #12]
 8006738:	461a      	mov	r2, r3
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006740:	fb00 f202 	mul.w	r2, r0, r2
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	440b      	add	r3, r1
 8006748:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <put_fat+0x11a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e00e      	b.n	800677a <put_fat+0x138>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b25b      	sxtb	r3, r3
 8006762:	f023 030f 	bic.w	r3, r3, #15
 8006766:	b25a      	sxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	b25b      	sxtb	r3, r3
 8006774:	4313      	orrs	r3, r2
 8006776:	b25b      	sxtb	r3, r3
 8006778:	b2db      	uxtb	r3, r3
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	70da      	strb	r2, [r3, #3]
			break;
 8006784:	e072      	b.n	800686c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	899b      	ldrh	r3, [r3, #12]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	fbb3 f3f1 	udiv	r3, r3, r1
 800679a:	4413      	add	r3, r2
 800679c:	4619      	mov	r1, r3
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff fdbe 	bl	8006320 <move_window>
 80067a4:	4603      	mov	r3, r0
 80067a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d15b      	bne.n	8006866 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	8992      	ldrh	r2, [r2, #12]
 80067bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80067c0:	fb00 f202 	mul.w	r2, r0, r2
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	b292      	uxth	r2, r2
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fb31 	bl	8005e36 <st_word>
			fs->wflag = 1;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	70da      	strb	r2, [r3, #3]
			break;
 80067da:	e047      	b.n	800686c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	899b      	ldrh	r3, [r3, #12]
 80067e4:	089b      	lsrs	r3, r3, #2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	4619      	mov	r1, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f0:	4413      	add	r3, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fd93 	bl	8006320 <move_window>
 80067fa:	4603      	mov	r3, r0
 80067fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d132      	bne.n	800686a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	8992      	ldrh	r2, [r2, #12]
 8006818:	fbb3 f0f2 	udiv	r0, r3, r2
 800681c:	fb00 f202 	mul.w	r2, r0, r2
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	440b      	add	r3, r1
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fae3 	bl	8005df0 <ld_dword>
 800682a:	4603      	mov	r3, r0
 800682c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006830:	4323      	orrs	r3, r4
 8006832:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	8992      	ldrh	r2, [r2, #12]
 8006842:	fbb3 f0f2 	udiv	r0, r3, r2
 8006846:	fb00 f202 	mul.w	r2, r0, r2
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	440b      	add	r3, r1
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fb0b 	bl	8005e6c <st_dword>
			fs->wflag = 1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	70da      	strb	r2, [r3, #3]
			break;
 800685c:	e006      	b.n	800686c <put_fat+0x22a>
			if (res != FR_OK) break;
 800685e:	bf00      	nop
 8006860:	e004      	b.n	800686c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006862:	bf00      	nop
 8006864:	e002      	b.n	800686c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006866:	bf00      	nop
 8006868:	e000      	b.n	800686c <put_fat+0x22a>
			if (res != FR_OK) break;
 800686a:	bf00      	nop
		}
	}
	return res;
 800686c:	7ffb      	ldrb	r3, [r7, #31]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3724      	adds	r7, #36	; 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}

08006876 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b088      	sub	sp, #32
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d904      	bls.n	800689c <remove_chain+0x26>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d301      	bcc.n	80068a0 <remove_chain+0x2a>
 800689c:	2302      	movs	r3, #2
 800689e:	e04b      	b.n	8006938 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00c      	beq.n	80068c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	69b8      	ldr	r0, [r7, #24]
 80068ae:	f7ff fec8 	bl	8006642 <put_fat>
 80068b2:	4603      	mov	r3, r0
 80068b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <remove_chain+0x4a>
 80068bc:	7ffb      	ldrb	r3, [r7, #31]
 80068be:	e03b      	b.n	8006938 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fde9 	bl	800649a <get_fat>
 80068c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d031      	beq.n	8006934 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <remove_chain+0x64>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e02e      	b.n	8006938 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e0:	d101      	bne.n	80068e6 <remove_chain+0x70>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e028      	b.n	8006938 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80068e6:	2200      	movs	r2, #0
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	69b8      	ldr	r0, [r7, #24]
 80068ec:	f7ff fea9 	bl	8006642 <put_fat>
 80068f0:	4603      	mov	r3, r0
 80068f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80068f4:	7ffb      	ldrb	r3, [r7, #31]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <remove_chain+0x88>
 80068fa:	7ffb      	ldrb	r3, [r7, #31]
 80068fc:	e01c      	b.n	8006938 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	3b02      	subs	r3, #2
 8006908:	429a      	cmp	r2, r3
 800690a:	d20b      	bcs.n	8006924 <remove_chain+0xae>
			fs->free_clst++;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	791b      	ldrb	r3, [r3, #4]
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	429a      	cmp	r2, r3
 8006930:	d3c6      	bcc.n	80068c0 <remove_chain+0x4a>
 8006932:	e000      	b.n	8006936 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006934:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <create_chain+0x2c>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	d31b      	bcc.n	80069a4 <create_chain+0x64>
 800696c:	2301      	movs	r3, #1
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e018      	b.n	80069a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fd90 	bl	800649a <get_fat>
 800697a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d801      	bhi.n	8006986 <create_chain+0x46>
 8006982:	2301      	movs	r3, #1
 8006984:	e070      	b.n	8006a68 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	d101      	bne.n	8006992 <create_chain+0x52>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	e06a      	b.n	8006a68 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	429a      	cmp	r2, r3
 800699a:	d201      	bcs.n	80069a0 <create_chain+0x60>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e063      	b.n	8006a68 <create_chain+0x128>
		scl = clst;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d307      	bcc.n	80069c8 <create_chain+0x88>
				ncl = 2;
 80069b8:	2302      	movs	r3, #2
 80069ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d901      	bls.n	80069c8 <create_chain+0x88>
 80069c4:	2300      	movs	r3, #0
 80069c6:	e04f      	b.n	8006a68 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80069c8:	69f9      	ldr	r1, [r7, #28]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fd65 	bl	800649a <get_fat>
 80069d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d003      	beq.n	80069e6 <create_chain+0xa6>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e4:	d101      	bne.n	80069ea <create_chain+0xaa>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	e03e      	b.n	8006a68 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d1da      	bne.n	80069a8 <create_chain+0x68>
 80069f2:	2300      	movs	r3, #0
 80069f4:	e038      	b.n	8006a68 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80069f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	6938      	ldr	r0, [r7, #16]
 8006a00:	f7ff fe1f 	bl	8006642 <put_fat>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <create_chain+0xe2>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6938      	ldr	r0, [r7, #16]
 8006a1a:	f7ff fe12 	bl	8006642 <put_fat>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d116      	bne.n	8006a56 <create_chain+0x116>
		fs->last_clst = ncl;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	3b02      	subs	r3, #2
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d804      	bhi.n	8006a46 <create_chain+0x106>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	711a      	strb	r2, [r3, #4]
 8006a54:	e007      	b.n	8006a66 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d102      	bne.n	8006a62 <create_chain+0x122>
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a60:	e000      	b.n	8006a64 <create_chain+0x124>
 8006a62:	2301      	movs	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a66:	69fb      	ldr	r3, [r7, #28]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	3304      	adds	r3, #4
 8006a86:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	899b      	ldrh	r3, [r3, #12]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	8952      	ldrh	r2, [r2, #10]
 8006a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	613a      	str	r2, [r7, #16]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <clmt_clust+0x42>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e010      	b.n	8006ad4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d307      	bcc.n	8006aca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ac8:	e7e9      	b.n	8006a9e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006aca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006af6:	d204      	bcs.n	8006b02 <dir_sdi+0x22>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b02:	2302      	movs	r3, #2
 8006b04:	e071      	b.n	8006bea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <dir_sdi+0x46>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d902      	bls.n	8006b26 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10c      	bne.n	8006b46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	8912      	ldrh	r2, [r2, #8]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d301      	bcc.n	8006b3c <dir_sdi+0x5c>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e056      	b.n	8006bea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	61da      	str	r2, [r3, #28]
 8006b44:	e02d      	b.n	8006ba2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	895b      	ldrh	r3, [r3, #10]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	899b      	ldrh	r3, [r3, #12]
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b56:	e019      	b.n	8006b8c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fc9c 	bl	800649a <get_fat>
 8006b62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6a:	d101      	bne.n	8006b70 <dir_sdi+0x90>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e03c      	b.n	8006bea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d904      	bls.n	8006b80 <dir_sdi+0xa0>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d301      	bcc.n	8006b84 <dir_sdi+0xa4>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e032      	b.n	8006bea <dir_sdi+0x10a>
			ofs -= csz;
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d2e1      	bcs.n	8006b58 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	6938      	ldr	r0, [r7, #16]
 8006b98:	f7ff fc60 	bl	800645c <clust2sect>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <dir_sdi+0xd4>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e01a      	b.n	8006bea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	899b      	ldrh	r3, [r3, #12]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	899b      	ldrh	r3, [r3, #12]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bdc:	fb00 f202 	mul.w	r2, r0, r2
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	18ca      	adds	r2, r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	3320      	adds	r3, #32
 8006c08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <dir_next+0x28>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c18:	d301      	bcc.n	8006c1e <dir_next+0x2c>
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	e0bb      	b.n	8006d96 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	899b      	ldrh	r3, [r3, #12]
 8006c22:	461a      	mov	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c2a:	fb01 f202 	mul.w	r2, r1, r2
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 809d 	bne.w	8006d70 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	8912      	ldrh	r2, [r2, #8]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	f0c0 808d 	bcc.w	8006d70 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	61da      	str	r2, [r3, #28]
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	e09a      	b.n	8006d96 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	899b      	ldrh	r3, [r3, #12]
 8006c64:	461a      	mov	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	8952      	ldrh	r2, [r2, #10]
 8006c70:	3a01      	subs	r2, #1
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d17b      	bne.n	8006d70 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7ff fc0a 	bl	800649a <get_fat>
 8006c86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d801      	bhi.n	8006c92 <dir_next+0xa0>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e081      	b.n	8006d96 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c98:	d101      	bne.n	8006c9e <dir_next+0xac>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e07b      	b.n	8006d96 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d359      	bcc.n	8006d5c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	61da      	str	r2, [r3, #28]
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	e06e      	b.n	8006d96 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7ff fe3d 	bl	8006940 <create_chain>
 8006cc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <dir_next+0xe0>
 8006cce:	2307      	movs	r3, #7
 8006cd0:	e061      	b.n	8006d96 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <dir_next+0xea>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e05c      	b.n	8006d96 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce2:	d101      	bne.n	8006ce8 <dir_next+0xf6>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e056      	b.n	8006d96 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fad5 	bl	8006298 <sync_window>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <dir_next+0x106>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e04e      	b.n	8006d96 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	899b      	ldrh	r3, [r3, #12]
 8006d02:	461a      	mov	r2, r3
 8006d04:	2100      	movs	r1, #0
 8006d06:	f7ff f8fe 	bl	8005f06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fba3 	bl	800645c <clust2sect>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8006d1c:	e012      	b.n	8006d44 <dir_next+0x152>
						fs->wflag = 1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fab7 	bl	8006298 <sync_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <dir_next+0x142>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e030      	b.n	8006d96 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	635a      	str	r2, [r3, #52]	; 0x34
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	895b      	ldrh	r3, [r3, #10]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d3e6      	bcc.n	8006d1e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad2      	subs	r2, r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d62:	6979      	ldr	r1, [r7, #20]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fb79 	bl	800645c <clust2sect>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	899b      	ldrh	r3, [r3, #12]
 8006d80:	461a      	mov	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d88:	fb00 f202 	mul.w	r2, r0, r2
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	18ca      	adds	r2, r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006dae:	2100      	movs	r1, #0
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fe95 	bl	8006ae0 <dir_sdi>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d12b      	bne.n	8006e18 <dir_alloc+0x7a>
		n = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff faa8 	bl	8006320 <move_window>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d11d      	bne.n	8006e16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2be5      	cmp	r3, #229	; 0xe5
 8006de2:	d004      	beq.n	8006dee <dir_alloc+0x50>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d107      	bne.n	8006dfe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3301      	adds	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d102      	bne.n	8006e02 <dir_alloc+0x64>
 8006dfc:	e00c      	b.n	8006e18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fef4 	bl	8006bf2 <dir_next>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0d7      	beq.n	8006dc4 <dir_alloc+0x26>
 8006e14:	e000      	b.n	8006e18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d101      	bne.n	8006e22 <dir_alloc+0x84>
 8006e1e:	2307      	movs	r3, #7
 8006e20:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	331a      	adds	r3, #26
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe ffc0 	bl	8005dc0 <ld_word>
 8006e40:	4603      	mov	r3, r0
 8006e42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d109      	bne.n	8006e60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	3314      	adds	r3, #20
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe ffb5 	bl	8005dc0 <ld_word>
 8006e56:	4603      	mov	r3, r0
 8006e58:	041b      	lsls	r3, r3, #16
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	331a      	adds	r3, #26
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	4611      	mov	r1, r2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe ffd8 	bl	8005e36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d109      	bne.n	8006ea2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f103 0214 	add.w	r2, r3, #20
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0c1b      	lsrs	r3, r3, #16
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7fe ffca 	bl	8005e36 <st_word>
	}
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	331a      	adds	r3, #26
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe ff80 	bl	8005dc0 <ld_word>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <cmp_lfn+0x1e>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e059      	b.n	8006f7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed2:	1e5a      	subs	r2, r3, #1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	81fb      	strh	r3, [r7, #14]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	e033      	b.n	8006f52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006eea:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <cmp_lfn+0xdc>)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4413      	add	r3, r2
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe ff61 	bl	8005dc0 <ld_word>
 8006efe:	4603      	mov	r3, r0
 8006f00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006f02:	89fb      	ldrh	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01a      	beq.n	8006f3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2bfe      	cmp	r3, #254	; 0xfe
 8006f0c:	d812      	bhi.n	8006f34 <cmp_lfn+0x88>
 8006f0e:	89bb      	ldrh	r3, [r7, #12]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fe8d 	bl	8008c30 <ff_wtoupper>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461c      	mov	r4, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	617a      	str	r2, [r7, #20]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fe81 	bl	8008c30 <ff_wtoupper>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	429c      	cmp	r4, r3
 8006f32:	d001      	beq.n	8006f38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006f34:	2300      	movs	r3, #0
 8006f36:	e022      	b.n	8006f7e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006f38:	89bb      	ldrh	r3, [r7, #12]
 8006f3a:	81fb      	strh	r3, [r7, #14]
 8006f3c:	e006      	b.n	8006f4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f3e:	89bb      	ldrh	r3, [r7, #12]
 8006f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d001      	beq.n	8006f4c <cmp_lfn+0xa0>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e018      	b.n	8006f7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d9c8      	bls.n	8006eea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <cmp_lfn+0xd0>
 8006f64:	89fb      	ldrh	r3, [r7, #14]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <cmp_lfn+0xd0>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <cmp_lfn+0xd0>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e000      	b.n	8006f7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006f7c:	2301      	movs	r3, #1
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd90      	pop	{r4, r7, pc}
 8006f86:	bf00      	nop
 8006f88:	0800a680 	.word	0x0800a680

08006f8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4611      	mov	r1, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	71fb      	strb	r3, [r7, #7]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	330d      	adds	r3, #13
 8006fa6:	79ba      	ldrb	r2, [r7, #6]
 8006fa8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	330b      	adds	r3, #11
 8006fae:	220f      	movs	r2, #15
 8006fb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	331a      	adds	r3, #26
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe ff38 	bl	8005e36 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	4613      	mov	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	82fb      	strh	r3, [r7, #22]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fde:	8afb      	ldrh	r3, [r7, #22]
 8006fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <put_lfn+0x6c>
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61fa      	str	r2, [r7, #28]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006ff8:	4a17      	ldr	r2, [pc, #92]	; (8007058 <put_lfn+0xcc>)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4413      	add	r3, r2
 8007006:	8afa      	ldrh	r2, [r7, #22]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe ff13 	bl	8005e36 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007010:	8afb      	ldrh	r3, [r7, #22]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <put_lfn+0x90>
 8007016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800701a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3301      	adds	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d9da      	bls.n	8006fde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007028:	8afb      	ldrh	r3, [r7, #22]
 800702a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800702e:	4293      	cmp	r3, r2
 8007030:	d006      	beq.n	8007040 <put_lfn+0xb4>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <put_lfn+0xbc>
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007046:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	79fa      	ldrb	r2, [r7, #7]
 800704c:	701a      	strb	r2, [r3, #0]
}
 800704e:	bf00      	nop
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	0800a680 	.word	0x0800a680

0800705c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08c      	sub	sp, #48	; 0x30
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800706a:	220b      	movs	r2, #11
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7fe ff28 	bl	8005ec4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b05      	cmp	r3, #5
 8007078:	d92b      	bls.n	80070d2 <gen_numname+0x76>
		sr = seq;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800707e:	e022      	b.n	80070c6 <gen_numname+0x6a>
			wc = *lfn++;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	1c9a      	adds	r2, r3, #2
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800708a:	2300      	movs	r3, #0
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
 800708e:	e017      	b.n	80070c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	005a      	lsls	r2, r3, #1
 8007094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	4413      	add	r3, r2
 800709c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800709e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <gen_numname+0x5e>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80070b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80070b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	3301      	adds	r3, #1
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b0f      	cmp	r3, #15
 80070c4:	d9e4      	bls.n	8007090 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1d8      	bne.n	8007080 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80070d2:	2307      	movs	r3, #7
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	3330      	adds	r3, #48	; 0x30
 80070e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80070e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ea:	2b39      	cmp	r3, #57	; 0x39
 80070ec:	d904      	bls.n	80070f8 <gen_numname+0x9c>
 80070ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070f2:	3307      	adds	r3, #7
 80070f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	1e5a      	subs	r2, r3, #1
 80070fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80070fe:	3330      	adds	r3, #48	; 0x30
 8007100:	443b      	add	r3, r7
 8007102:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007106:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1df      	bne.n	80070d6 <gen_numname+0x7a>
	ns[i] = '~';
 8007116:	f107 0214 	add.w	r2, r7, #20
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	4413      	add	r3, r2
 800711e:	227e      	movs	r2, #126	; 0x7e
 8007120:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	e002      	b.n	800712e <gen_numname+0xd2>
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	3301      	adds	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
 800712e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	429a      	cmp	r2, r3
 8007134:	d205      	bcs.n	8007142 <gen_numname+0xe6>
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	4413      	add	r3, r2
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b20      	cmp	r3, #32
 8007140:	d1f2      	bne.n	8007128 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	2b07      	cmp	r3, #7
 8007146:	d807      	bhi.n	8007158 <gen_numname+0xfc>
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	62ba      	str	r2, [r7, #40]	; 0x28
 800714e:	3330      	adds	r3, #48	; 0x30
 8007150:	443b      	add	r3, r7
 8007152:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007156:	e000      	b.n	800715a <gen_numname+0xfe>
 8007158:	2120      	movs	r1, #32
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	627a      	str	r2, [r7, #36]	; 0x24
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	460a      	mov	r2, r1
 8007166:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	2b07      	cmp	r3, #7
 800716c:	d9e9      	bls.n	8007142 <gen_numname+0xe6>
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	3730      	adds	r7, #48	; 0x30
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007184:	230b      	movs	r3, #11
 8007186:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	0852      	lsrs	r2, r2, #1
 800718e:	01db      	lsls	r3, r3, #7
 8007190:	4313      	orrs	r3, r2
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	6079      	str	r1, [r7, #4]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4413      	add	r3, r2
 800719e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ed      	bne.n	8007188 <sum_sfn+0x10>
	return sum;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80071c8:	2100      	movs	r1, #0
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fc88 	bl	8006ae0 <dir_sdi>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <dir_find+0x24>
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	e0a9      	b.n	8007332 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071de:	23ff      	movs	r3, #255	; 0xff
 80071e0:	753b      	strb	r3, [r7, #20]
 80071e2:	7d3b      	ldrb	r3, [r7, #20]
 80071e4:	757b      	strb	r3, [r7, #21]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f7ff f893 	bl	8006320 <move_window>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8090 	bne.w	8007326 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800720e:	7dbb      	ldrb	r3, [r7, #22]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <dir_find+0x60>
 8007214:	2304      	movs	r3, #4
 8007216:	75fb      	strb	r3, [r7, #23]
 8007218:	e08a      	b.n	8007330 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	330b      	adds	r3, #11
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7bfa      	ldrb	r2, [r7, #15]
 800722c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	2be5      	cmp	r3, #229	; 0xe5
 8007232:	d007      	beq.n	8007244 <dir_find+0x8a>
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <dir_find+0x98>
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	2b0f      	cmp	r3, #15
 8007242:	d006      	beq.n	8007252 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007244:	23ff      	movs	r3, #255	; 0xff
 8007246:	757b      	strb	r3, [r7, #21]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
 8007250:	e05e      	b.n	8007310 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d136      	bne.n	80072c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d154      	bne.n	8007310 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007266:	7dbb      	ldrb	r3, [r7, #22]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	7b5b      	ldrb	r3, [r3, #13]
 8007276:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007278:	7dbb      	ldrb	r3, [r7, #22]
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	75bb      	strb	r3, [r7, #22]
 8007280:	7dbb      	ldrb	r3, [r7, #22]
 8007282:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800728c:	7dba      	ldrb	r2, [r7, #22]
 800728e:	7d7b      	ldrb	r3, [r7, #21]
 8007290:	429a      	cmp	r2, r3
 8007292:	d115      	bne.n	80072c0 <dir_find+0x106>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	330d      	adds	r3, #13
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	7d3a      	ldrb	r2, [r7, #20]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d10e      	bne.n	80072c0 <dir_find+0x106>
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	4619      	mov	r1, r3
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7ff fdfd 	bl	8006eac <cmp_lfn>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <dir_find+0x106>
 80072b8:	7d7b      	ldrb	r3, [r7, #21]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e000      	b.n	80072c2 <dir_find+0x108>
 80072c0:	23ff      	movs	r3, #255	; 0xff
 80072c2:	757b      	strb	r3, [r7, #21]
 80072c4:	e024      	b.n	8007310 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072c6:	7d7b      	ldrb	r3, [r7, #21]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d109      	bne.n	80072e0 <dir_find+0x126>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff ff51 	bl	8007178 <sum_sfn>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	7d3b      	ldrb	r3, [r7, #20]
 80072dc:	4293      	cmp	r3, r2
 80072de:	d024      	beq.n	800732a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <dir_find+0x14a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a18      	ldr	r0, [r3, #32]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3324      	adds	r3, #36	; 0x24
 80072f6:	220b      	movs	r2, #11
 80072f8:	4619      	mov	r1, r3
 80072fa:	f7fe fe1f 	bl	8005f3c <mem_cmp>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d014      	beq.n	800732e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007304:	23ff      	movs	r3, #255	; 0xff
 8007306:	757b      	strb	r3, [r7, #21]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fc6d 	bl	8006bf2 <dir_next>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f43f af65 	beq.w	80071ee <dir_find+0x34>
 8007324:	e004      	b.n	8007330 <dir_find+0x176>
		if (res != FR_OK) break;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800732e:	bf00      	nop

	return res;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007350:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <dir_register+0x20>
 8007358:	2306      	movs	r3, #6
 800735a:	e0e0      	b.n	800751e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800735c:	2300      	movs	r3, #0
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
 8007360:	e002      	b.n	8007368 <dir_register+0x2c>
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	3301      	adds	r3, #1
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f4      	bne.n	8007362 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	220c      	movs	r2, #12
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fd9d 	bl	8005ec4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d032      	beq.n	80073fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2240      	movs	r2, #64	; 0x40
 8007398:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800739c:	2301      	movs	r3, #1
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a0:	e016      	b.n	80073d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	f107 010c 	add.w	r1, r7, #12
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f7ff fe53 	bl	800705c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff feff 	bl	80071ba <dir_find>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80073c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	3301      	adds	r3, #1
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b63      	cmp	r3, #99	; 0x63
 80073d4:	d9e5      	bls.n	80073a2 <dir_register+0x66>
 80073d6:	e000      	b.n	80073da <dir_register+0x9e>
			if (res != FR_OK) break;
 80073d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	2b64      	cmp	r3, #100	; 0x64
 80073de:	d101      	bne.n	80073e4 <dir_register+0xa8>
 80073e0:	2307      	movs	r3, #7
 80073e2:	e09c      	b.n	800751e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80073e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d002      	beq.n	80073f2 <dir_register+0xb6>
 80073ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073f0:	e095      	b.n	800751e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80073f2:	7dfa      	ldrb	r2, [r7, #23]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <dir_register+0xd8>
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	330c      	adds	r3, #12
 8007408:	4a47      	ldr	r2, [pc, #284]	; (8007528 <dir_register+0x1ec>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	089b      	lsrs	r3, r3, #2
 8007410:	3301      	adds	r3, #1
 8007412:	e000      	b.n	8007416 <dir_register+0xda>
 8007414:	2301      	movs	r3, #1
 8007416:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007418:	6a39      	ldr	r1, [r7, #32]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fcbf 	bl	8006d9e <dir_alloc>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d148      	bne.n	80074c0 <dir_register+0x184>
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	3b01      	subs	r3, #1
 8007432:	623b      	str	r3, [r7, #32]
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d042      	beq.n	80074c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	015b      	lsls	r3, r3, #5
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fb4a 	bl	8006ae0 <dir_sdi>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d132      	bne.n	80074c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3324      	adds	r3, #36	; 0x24
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fe8a 	bl	8007178 <sum_sfn>
 8007464:	4603      	mov	r3, r0
 8007466:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	4619      	mov	r1, r3
 800746e:	69f8      	ldr	r0, [r7, #28]
 8007470:	f7fe ff56 	bl	8006320 <move_window>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800747a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800747e:	2b00      	cmp	r3, #0
 8007480:	d11d      	bne.n	80074be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	6918      	ldr	r0, [r3, #16]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a19      	ldr	r1, [r3, #32]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7efb      	ldrb	r3, [r7, #27]
 8007490:	f7ff fd7c 	bl	8006f8c <put_lfn>
				fs->wflag = 1;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2201      	movs	r2, #1
 8007498:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800749a:	2100      	movs	r1, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fba8 	bl	8006bf2 <dir_next>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80074a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d107      	bne.n	80074c0 <dir_register+0x184>
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	623b      	str	r3, [r7, #32]
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1d5      	bne.n	8007468 <dir_register+0x12c>
 80074bc:	e000      	b.n	80074c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80074be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d128      	bne.n	800751a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	4619      	mov	r1, r3
 80074ce:	69f8      	ldr	r0, [r7, #28]
 80074d0:	f7fe ff26 	bl	8006320 <move_window>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80074da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11b      	bne.n	800751a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	2220      	movs	r2, #32
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fd0b 	bl	8005f06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a18      	ldr	r0, [r3, #32]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	220b      	movs	r2, #11
 80074fa:	4619      	mov	r1, r3
 80074fc:	f7fe fce2 	bl	8005ec4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	330c      	adds	r3, #12
 800750c:	f002 0218 	and.w	r2, r2, #24
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2201      	movs	r2, #1
 8007518:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800751a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800751e:	4618      	mov	r0, r3
 8007520:	3730      	adds	r7, #48	; 0x30
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	4ec4ec4f 	.word	0x4ec4ec4f

0800752c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80c9 	beq.w	80076de <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007554:	d032      	beq.n	80075bc <get_fileinfo+0x90>
			i = j = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800755e:	e01b      	b.n	8007598 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007560:	89fb      	ldrh	r3, [r7, #14]
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fb27 	bl	8008bb8 <ff_convert>
 800756a:	4603      	mov	r3, r0
 800756c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800756e:	89fb      	ldrh	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <get_fileinfo+0x4e>
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e01a      	b.n	80075b0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2bfe      	cmp	r3, #254	; 0xfe
 800757e:	d902      	bls.n	8007586 <get_fileinfo+0x5a>
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e014      	b.n	80075b0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	61fa      	str	r2, [r7, #28]
 800758c:	89fa      	ldrh	r2, [r7, #14]
 800758e:	b2d1      	uxtb	r1, r2
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	4413      	add	r3, r2
 8007594:	460a      	mov	r2, r1
 8007596:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	61b9      	str	r1, [r7, #24]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	81fb      	strh	r3, [r7, #14]
 80075aa:	89fb      	ldrh	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1d7      	bne.n	8007560 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	3316      	adds	r3, #22
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	3316      	adds	r3, #22
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80075d0:	e04c      	b.n	800766c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	61f9      	str	r1, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d100      	bne.n	80075ea <get_fileinfo+0xbe>
 80075e8:	e040      	b.n	800766c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b05      	cmp	r3, #5
 80075ee:	d101      	bne.n	80075f4 <get_fileinfo+0xc8>
 80075f0:	23e5      	movs	r3, #229	; 0xe5
 80075f2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d10f      	bne.n	800761a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80075fa:	89bb      	ldrh	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <get_fileinfo+0xe0>
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	4413      	add	r3, r2
 8007606:	3316      	adds	r3, #22
 8007608:	222e      	movs	r2, #46	; 0x2e
 800760a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	61ba      	str	r2, [r7, #24]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4413      	add	r3, r2
 8007616:	222e      	movs	r2, #46	; 0x2e
 8007618:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	4413      	add	r3, r2
 8007620:	3309      	adds	r3, #9
 8007622:	7dfa      	ldrb	r2, [r7, #23]
 8007624:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007626:	89bb      	ldrh	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11c      	bne.n	8007666 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d913      	bls.n	800765a <get_fileinfo+0x12e>
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b5a      	cmp	r3, #90	; 0x5a
 8007636:	d810      	bhi.n	800765a <get_fileinfo+0x12e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	330c      	adds	r3, #12
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d901      	bls.n	800764c <get_fileinfo+0x120>
 8007648:	2310      	movs	r3, #16
 800764a:	e000      	b.n	800764e <get_fileinfo+0x122>
 800764c:	2308      	movs	r3, #8
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	3320      	adds	r3, #32
 8007658:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	4413      	add	r3, r2
 8007660:	3316      	adds	r3, #22
 8007662:	7dfa      	ldrb	r2, [r7, #23]
 8007664:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3301      	adds	r3, #1
 800766a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b0a      	cmp	r3, #10
 8007670:	d9af      	bls.n	80075d2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007672:	89bb      	ldrh	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10d      	bne.n	8007694 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	4413      	add	r3, r2
 800767e:	3316      	adds	r3, #22
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	330c      	adds	r3, #12
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <get_fileinfo+0x168>
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	4413      	add	r3, r2
 800769a:	3309      	adds	r3, #9
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	7ada      	ldrb	r2, [r3, #11]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	331c      	adds	r3, #28
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fb9d 	bl	8005df0 <ld_dword>
 80076b6:	4602      	mov	r2, r0
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	3316      	adds	r3, #22
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fb94 	bl	8005df0 <ld_dword>
 80076c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	80da      	strh	r2, [r3, #6]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	809a      	strh	r2, [r3, #4]
 80076dc:	e000      	b.n	80076e0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076de:	bf00      	nop
}
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	61ba      	str	r2, [r7, #24]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4413      	add	r3, r2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007718:	2b1f      	cmp	r3, #31
 800771a:	d940      	bls.n	800779e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800771c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800771e:	2b2f      	cmp	r3, #47	; 0x2f
 8007720:	d006      	beq.n	8007730 <create_name+0x48>
 8007722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007724:	2b5c      	cmp	r3, #92	; 0x5c
 8007726:	d110      	bne.n	800774a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007728:	e002      	b.n	8007730 <create_name+0x48>
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	3301      	adds	r3, #1
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	4413      	add	r3, r2
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b2f      	cmp	r3, #47	; 0x2f
 800773a:	d0f6      	beq.n	800772a <create_name+0x42>
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	4413      	add	r3, r2
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b5c      	cmp	r3, #92	; 0x5c
 8007746:	d0f0      	beq.n	800772a <create_name+0x42>
			break;
 8007748:	e02a      	b.n	80077a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2bfe      	cmp	r3, #254	; 0xfe
 800774e:	d901      	bls.n	8007754 <create_name+0x6c>
 8007750:	2306      	movs	r3, #6
 8007752:	e17d      	b.n	8007a50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007756:	b2db      	uxtb	r3, r3
 8007758:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800775a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f001 fa2a 	bl	8008bb8 <ff_convert>
 8007764:	4603      	mov	r3, r0
 8007766:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <create_name+0x8a>
 800776e:	2306      	movs	r3, #6
 8007770:	e16e      	b.n	8007a50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007774:	2b7f      	cmp	r3, #127	; 0x7f
 8007776:	d809      	bhi.n	800778c <create_name+0xa4>
 8007778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800777a:	4619      	mov	r1, r3
 800777c:	488d      	ldr	r0, [pc, #564]	; (80079b4 <create_name+0x2cc>)
 800777e:	f7fe fc04 	bl	8005f8a <chk_chr>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <create_name+0xa4>
 8007788:	2306      	movs	r3, #6
 800778a:	e161      	b.n	8007a50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	617a      	str	r2, [r7, #20]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800779a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800779c:	e7b4      	b.n	8007708 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800779e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	441a      	add	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ac:	2b1f      	cmp	r3, #31
 80077ae:	d801      	bhi.n	80077b4 <create_name+0xcc>
 80077b0:	2304      	movs	r3, #4
 80077b2:	e000      	b.n	80077b6 <create_name+0xce>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077ba:	e011      	b.n	80077e0 <create_name+0xf8>
		w = lfn[di - 1];
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077c2:	3b01      	subs	r3, #1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d002      	beq.n	80077da <create_name+0xf2>
 80077d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d6:	2b2e      	cmp	r3, #46	; 0x2e
 80077d8:	d106      	bne.n	80077e8 <create_name+0x100>
		di--;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	3b01      	subs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ea      	bne.n	80077bc <create_name+0xd4>
 80077e6:	e000      	b.n	80077ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80077e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	2200      	movs	r2, #0
 80077f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <create_name+0x118>
 80077fc:	2306      	movs	r3, #6
 80077fe:	e127      	b.n	8007a50 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3324      	adds	r3, #36	; 0x24
 8007804:	220b      	movs	r2, #11
 8007806:	2120      	movs	r1, #32
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fb7c 	bl	8005f06 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e002      	b.n	800781a <create_name+0x132>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	2b20      	cmp	r3, #32
 8007826:	d0f5      	beq.n	8007814 <create_name+0x12c>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	2b2e      	cmp	r3, #46	; 0x2e
 8007834:	d0ee      	beq.n	8007814 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d009      	beq.n	8007850 <create_name+0x168>
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007840:	f043 0303 	orr.w	r3, r3, #3
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007848:	e002      	b.n	8007850 <create_name+0x168>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	3b01      	subs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <create_name+0x182>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800785c:	3b01      	subs	r3, #1
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	2b2e      	cmp	r3, #46	; 0x2e
 8007868:	d1ef      	bne.n	800784a <create_name+0x162>

	i = b = 0; ni = 8;
 800786a:	2300      	movs	r3, #0
 800786c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007870:	2300      	movs	r3, #0
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	2308      	movs	r3, #8
 8007876:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	61ba      	str	r2, [r7, #24]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8090 	beq.w	80079b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007892:	2b20      	cmp	r3, #32
 8007894:	d006      	beq.n	80078a4 <create_name+0x1bc>
 8007896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007898:	2b2e      	cmp	r3, #46	; 0x2e
 800789a:	d10a      	bne.n	80078b2 <create_name+0x1ca>
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d006      	beq.n	80078b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80078a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a8:	f043 0303 	orr.w	r3, r3, #3
 80078ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078b0:	e07d      	b.n	80079ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d203      	bcs.n	80078c2 <create_name+0x1da>
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d123      	bne.n	800790a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d106      	bne.n	80078d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80078c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078cc:	f043 0303 	orr.w	r3, r3, #3
 80078d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078d4:	e075      	b.n	80079c2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d005      	beq.n	80078ea <create_name+0x202>
 80078de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078e2:	f043 0303 	orr.w	r3, r3, #3
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d866      	bhi.n	80079c0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	2308      	movs	r3, #8
 80078f8:	623b      	str	r3, [r7, #32]
 80078fa:	230b      	movs	r3, #11
 80078fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80078fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007908:	e051      	b.n	80079ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800790a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800790c:	2b7f      	cmp	r3, #127	; 0x7f
 800790e:	d914      	bls.n	800793a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f94f 	bl	8008bb8 <ff_convert>
 800791a:	4603      	mov	r3, r0
 800791c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800791e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <create_name+0x246>
 8007924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007926:	3b80      	subs	r3, #128	; 0x80
 8007928:	4a23      	ldr	r2, [pc, #140]	; (80079b8 <create_name+0x2d0>)
 800792a:	5cd3      	ldrb	r3, [r2, r3]
 800792c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800792e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007932:	f043 0302 	orr.w	r3, r3, #2
 8007936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800793a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <create_name+0x268>
 8007940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007942:	4619      	mov	r1, r3
 8007944:	481d      	ldr	r0, [pc, #116]	; (80079bc <create_name+0x2d4>)
 8007946:	f7fe fb20 	bl	8005f8a <chk_chr>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d008      	beq.n	8007962 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007950:	235f      	movs	r3, #95	; 0x5f
 8007952:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007958:	f043 0303 	orr.w	r3, r3, #3
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007960:	e01b      	b.n	800799a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d909      	bls.n	800797c <create_name+0x294>
 8007968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800796a:	2b5a      	cmp	r3, #90	; 0x5a
 800796c:	d806      	bhi.n	800797c <create_name+0x294>
					b |= 2;
 800796e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007972:	f043 0302 	orr.w	r3, r3, #2
 8007976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800797a:	e00e      	b.n	800799a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800797c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797e:	2b60      	cmp	r3, #96	; 0x60
 8007980:	d90b      	bls.n	800799a <create_name+0x2b2>
 8007982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007984:	2b7a      	cmp	r3, #122	; 0x7a
 8007986:	d808      	bhi.n	800799a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007996:	3b20      	subs	r3, #32
 8007998:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	623a      	str	r2, [r7, #32]
 80079a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079a2:	b2d1      	uxtb	r1, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	460a      	mov	r2, r1
 80079aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80079ae:	e763      	b.n	8007878 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80079b0:	bf00      	nop
 80079b2:	e006      	b.n	80079c2 <create_name+0x2da>
 80079b4:	0800a578 	.word	0x0800a578
 80079b8:	0800a600 	.word	0x0800a600
 80079bc:	0800a584 	.word	0x0800a584
			if (si > di) break;			/* No extension */
 80079c0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079c8:	2be5      	cmp	r3, #229	; 0xe5
 80079ca:	d103      	bne.n	80079d4 <create_name+0x2ec>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2205      	movs	r2, #5
 80079d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d104      	bne.n	80079e4 <create_name+0x2fc>
 80079da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80079e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079e8:	f003 030c 	and.w	r3, r3, #12
 80079ec:	2b0c      	cmp	r3, #12
 80079ee:	d005      	beq.n	80079fc <create_name+0x314>
 80079f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d105      	bne.n	8007a08 <create_name+0x320>
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a00:	f043 0302 	orr.w	r3, r3, #2
 8007a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d117      	bne.n	8007a44 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d105      	bne.n	8007a2c <create_name+0x344>
 8007a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a24:	f043 0310 	orr.w	r3, r3, #16
 8007a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a30:	f003 030c 	and.w	r3, r3, #12
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d105      	bne.n	8007a44 <create_name+0x35c>
 8007a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a3c:	f043 0308 	orr.w	r3, r3, #8
 8007a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007a4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3728      	adds	r7, #40	; 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a6c:	e002      	b.n	8007a74 <follow_path+0x1c>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b2f      	cmp	r3, #47	; 0x2f
 8007a7a:	d0f8      	beq.n	8007a6e <follow_path+0x16>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b5c      	cmp	r3, #92	; 0x5c
 8007a82:	d0f4      	beq.n	8007a6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b1f      	cmp	r3, #31
 8007a90:	d80a      	bhi.n	8007aa8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2280      	movs	r2, #128	; 0x80
 8007a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff f81f 	bl	8006ae0 <dir_sdi>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]
 8007aa6:	e048      	b.n	8007b3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fe1b 	bl	80076e8 <create_name>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d139      	bne.n	8007b30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fb7c 	bl	80071ba <dir_find>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007acc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d12c      	bne.n	8007b34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ada:	7afb      	ldrb	r3, [r7, #11]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d127      	bne.n	8007b34 <follow_path+0xdc>
 8007ae4:	2305      	movs	r3, #5
 8007ae6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ae8:	e024      	b.n	8007b34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d121      	bne.n	8007b38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	799b      	ldrb	r3, [r3, #6]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b00:	2305      	movs	r3, #5
 8007b02:	75fb      	strb	r3, [r7, #23]
 8007b04:	e019      	b.n	8007b3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	8992      	ldrh	r2, [r2, #12]
 8007b14:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b18:	fb00 f202 	mul.w	r2, r0, r2
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	440b      	add	r3, r1
 8007b20:	4619      	mov	r1, r3
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff f982 	bl	8006e2c <ld_clust>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b2e:	e7bb      	b.n	8007aa8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007b30:	bf00      	nop
 8007b32:	e002      	b.n	8007b3a <follow_path+0xe2>
				break;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b38:	bf00      	nop
			}
		}
	}

	return res;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d031      	beq.n	8007bbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e002      	b.n	8007b68 <get_ldnumber+0x24>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	3301      	adds	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b1f      	cmp	r3, #31
 8007b6e:	d903      	bls.n	8007b78 <get_ldnumber+0x34>
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b3a      	cmp	r3, #58	; 0x3a
 8007b76:	d1f4      	bne.n	8007b62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b3a      	cmp	r3, #58	; 0x3a
 8007b7e:	d11c      	bne.n	8007bba <get_ldnumber+0x76>
			tp = *path;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	60fa      	str	r2, [r7, #12]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	3b30      	subs	r3, #48	; 0x30
 8007b90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d80e      	bhi.n	8007bb6 <get_ldnumber+0x72>
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d10a      	bne.n	8007bb6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d107      	bne.n	8007bb6 <get_ldnumber+0x72>
					vol = (int)i;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	3301      	adds	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	e002      	b.n	8007bc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007bbe:	693b      	ldr	r3, [r7, #16]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	70da      	strb	r2, [r3, #3]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fe fb9a 	bl	8006320 <move_window>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <check_fs+0x2a>
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	e038      	b.n	8007c68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3338      	adds	r3, #56	; 0x38
 8007bfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe f8de 	bl	8005dc0 <ld_word>
 8007c04:	4603      	mov	r3, r0
 8007c06:	461a      	mov	r2, r3
 8007c08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d001      	beq.n	8007c14 <check_fs+0x48>
 8007c10:	2303      	movs	r3, #3
 8007c12:	e029      	b.n	8007c68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c1a:	2be9      	cmp	r3, #233	; 0xe9
 8007c1c:	d009      	beq.n	8007c32 <check_fs+0x66>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c24:	2beb      	cmp	r3, #235	; 0xeb
 8007c26:	d11e      	bne.n	8007c66 <check_fs+0x9a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c2e:	2b90      	cmp	r3, #144	; 0x90
 8007c30:	d119      	bne.n	8007c66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3338      	adds	r3, #56	; 0x38
 8007c36:	3336      	adds	r3, #54	; 0x36
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe f8d9 	bl	8005df0 <ld_dword>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c44:	4a0a      	ldr	r2, [pc, #40]	; (8007c70 <check_fs+0xa4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <check_fs+0x82>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e00c      	b.n	8007c68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3338      	adds	r3, #56	; 0x38
 8007c52:	3352      	adds	r3, #82	; 0x52
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f8cb 	bl	8005df0 <ld_dword>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <check_fs+0xa8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d101      	bne.n	8007c66 <check_fs+0x9a>
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c66:	2302      	movs	r3, #2
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	00544146 	.word	0x00544146
 8007c74:	33544146 	.word	0x33544146

08007c78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b096      	sub	sp, #88	; 0x58
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff ff59 	bl	8007b44 <get_ldnumber>
 8007c92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da01      	bge.n	8007c9e <find_volume+0x26>
 8007c9a:	230b      	movs	r3, #11
 8007c9c:	e265      	b.n	800816a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c9e:	4a9f      	ldr	r2, [pc, #636]	; (8007f1c <find_volume+0x2a4>)
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <find_volume+0x3a>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	e25b      	b.n	800816a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01a      	beq.n	8007cfe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd ffd9 	bl	8005c84 <disk_status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10c      	bne.n	8007cfe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <find_volume+0x82>
 8007cea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	e237      	b.n	800816a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e235      	b.n	800816a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd ffd1 	bl	8005cb8 <disk_initialize>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e21e      	b.n	800816a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <find_volume+0xca>
 8007d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d3e:	230a      	movs	r3, #10
 8007d40:	e213      	b.n	800816a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	7858      	ldrb	r0, [r3, #1]
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	330c      	adds	r3, #12
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	f7fe f819 	bl	8005d84 <disk_ioctl>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <find_volume+0xe4>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e206      	b.n	800816a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	899b      	ldrh	r3, [r3, #12]
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d64:	d80d      	bhi.n	8007d82 <find_volume+0x10a>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	899b      	ldrh	r3, [r3, #12]
 8007d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6e:	d308      	bcc.n	8007d82 <find_volume+0x10a>
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	899b      	ldrh	r3, [r3, #12]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	899b      	ldrh	r3, [r3, #12]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <find_volume+0x10e>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e1f1      	b.n	800816a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d8e:	f7ff ff1d 	bl	8007bcc <check_fs>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d149      	bne.n	8007e34 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007da0:	2300      	movs	r3, #0
 8007da2:	643b      	str	r3, [r7, #64]	; 0x40
 8007da4:	e01e      	b.n	8007de4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007db4:	4413      	add	r3, r2
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	3304      	adds	r3, #4
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d006      	beq.n	8007dd0 <find_volume+0x158>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe f812 	bl	8005df0 <ld_dword>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	e000      	b.n	8007dd2 <find_volume+0x15a>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	3358      	adds	r3, #88	; 0x58
 8007dd8:	443b      	add	r3, r7
 8007dda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de0:	3301      	adds	r3, #1
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d9dd      	bls.n	8007da6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007dea:	2300      	movs	r3, #0
 8007dec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <find_volume+0x182>
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	3b01      	subs	r3, #1
 8007df8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	3358      	adds	r3, #88	; 0x58
 8007e00:	443b      	add	r3, r7
 8007e02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <find_volume+0x1a2>
 8007e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e12:	f7ff fedb 	bl	8007bcc <check_fs>
 8007e16:	4603      	mov	r3, r0
 8007e18:	e000      	b.n	8007e1c <find_volume+0x1a4>
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d905      	bls.n	8007e34 <find_volume+0x1bc>
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d9e2      	bls.n	8007dfa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d101      	bne.n	8007e40 <find_volume+0x1c8>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e194      	b.n	800816a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d901      	bls.n	8007e4c <find_volume+0x1d4>
 8007e48:	230d      	movs	r3, #13
 8007e4a:	e18e      	b.n	800816a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	3338      	adds	r3, #56	; 0x38
 8007e50:	330b      	adds	r3, #11
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fd ffb4 	bl	8005dc0 <ld_word>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	899b      	ldrh	r3, [r3, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d001      	beq.n	8007e68 <find_volume+0x1f0>
 8007e64:	230d      	movs	r3, #13
 8007e66:	e180      	b.n	800816a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	3338      	adds	r3, #56	; 0x38
 8007e6c:	3316      	adds	r3, #22
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd ffa6 	bl	8005dc0 <ld_word>
 8007e74:	4603      	mov	r3, r0
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <find_volume+0x214>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	3338      	adds	r3, #56	; 0x38
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd ffb3 	bl	8005df0 <ld_dword>
 8007e8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e90:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	789b      	ldrb	r3, [r3, #2]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d005      	beq.n	8007eb0 <find_volume+0x238>
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	789b      	ldrb	r3, [r3, #2]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d001      	beq.n	8007eb0 <find_volume+0x238>
 8007eac:	230d      	movs	r3, #13
 8007eae:	e15c      	b.n	800816a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	789b      	ldrb	r3, [r3, #2]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	895b      	ldrh	r3, [r3, #10]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <find_volume+0x26c>
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	895b      	ldrh	r3, [r3, #10]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	895b      	ldrh	r3, [r3, #10]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <find_volume+0x270>
 8007ee4:	230d      	movs	r3, #13
 8007ee6:	e140      	b.n	800816a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	3338      	adds	r3, #56	; 0x38
 8007eec:	3311      	adds	r3, #17
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd ff66 	bl	8005dc0 <ld_word>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	891b      	ldrh	r3, [r3, #8]
 8007f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f02:	8992      	ldrh	r2, [r2, #12]
 8007f04:	0952      	lsrs	r2, r2, #5
 8007f06:	b292      	uxth	r2, r2
 8007f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f0c:	fb01 f202 	mul.w	r2, r1, r2
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <find_volume+0x2a8>
 8007f18:	230d      	movs	r3, #13
 8007f1a:	e126      	b.n	800816a <find_volume+0x4f2>
 8007f1c:	20002490 	.word	0x20002490

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	3338      	adds	r3, #56	; 0x38
 8007f24:	3313      	adds	r3, #19
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd ff4a 	bl	8005dc0 <ld_word>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <find_volume+0x2cc>
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	3338      	adds	r3, #56	; 0x38
 8007f3a:	3320      	adds	r3, #32
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd ff57 	bl	8005df0 <ld_dword>
 8007f42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	3338      	adds	r3, #56	; 0x38
 8007f48:	330e      	adds	r3, #14
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fd ff38 	bl	8005dc0 <ld_word>
 8007f50:	4603      	mov	r3, r0
 8007f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <find_volume+0x2e6>
 8007f5a:	230d      	movs	r3, #13
 8007f5c:	e105      	b.n	800816a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f62:	4413      	add	r3, r2
 8007f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f66:	8911      	ldrh	r1, [r2, #8]
 8007f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f6a:	8992      	ldrh	r2, [r2, #12]
 8007f6c:	0952      	lsrs	r2, r2, #5
 8007f6e:	b292      	uxth	r2, r2
 8007f70:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f74:	b292      	uxth	r2, r2
 8007f76:	4413      	add	r3, r2
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d201      	bcs.n	8007f86 <find_volume+0x30e>
 8007f82:	230d      	movs	r3, #13
 8007f84:	e0f1      	b.n	800816a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8e:	8952      	ldrh	r2, [r2, #10]
 8007f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <find_volume+0x328>
 8007f9c:	230d      	movs	r3, #13
 8007f9e:	e0e4      	b.n	800816a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d802      	bhi.n	8007fb6 <find_volume+0x33e>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d802      	bhi.n	8007fc6 <find_volume+0x34e>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	1c9a      	adds	r2, r3, #2
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd8:	441a      	add	r2, r3
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007fde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	441a      	add	r2, r3
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d11e      	bne.n	800802e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	3338      	adds	r3, #56	; 0x38
 8007ff4:	332a      	adds	r3, #42	; 0x2a
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fee2 	bl	8005dc0 <ld_word>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <find_volume+0x38e>
 8008002:	230d      	movs	r3, #13
 8008004:	e0b1      	b.n	800816a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	891b      	ldrh	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <find_volume+0x39a>
 800800e:	230d      	movs	r3, #13
 8008010:	e0ab      	b.n	800816a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	3338      	adds	r3, #56	; 0x38
 8008016:	332c      	adds	r3, #44	; 0x2c
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd fee9 	bl	8005df0 <ld_dword>
 800801e:	4602      	mov	r2, r0
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	647b      	str	r3, [r7, #68]	; 0x44
 800802c:	e01f      	b.n	800806e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	891b      	ldrh	r3, [r3, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <find_volume+0x3c2>
 8008036:	230d      	movs	r3, #13
 8008038:	e097      	b.n	800816a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800803e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008040:	441a      	add	r2, r3
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800804a:	2b02      	cmp	r3, #2
 800804c:	d103      	bne.n	8008056 <find_volume+0x3de>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e00a      	b.n	800806c <find_volume+0x3f4>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	4613      	mov	r3, r2
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	4413      	add	r3, r2
 8008060:	085a      	lsrs	r2, r3, #1
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800806c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	6a1a      	ldr	r2, [r3, #32]
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	899b      	ldrh	r3, [r3, #12]
 8008076:	4619      	mov	r1, r3
 8008078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800807a:	440b      	add	r3, r1
 800807c:	3b01      	subs	r3, #1
 800807e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008080:	8989      	ldrh	r1, [r1, #12]
 8008082:	fbb3 f3f1 	udiv	r3, r3, r1
 8008086:	429a      	cmp	r2, r3
 8008088:	d201      	bcs.n	800808e <find_volume+0x416>
 800808a:	230d      	movs	r3, #13
 800808c:	e06d      	b.n	800816a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008094:	619a      	str	r2, [r3, #24]
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80080a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d149      	bne.n	8008140 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	3338      	adds	r3, #56	; 0x38
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd fe84 	bl	8005dc0 <ld_word>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d140      	bne.n	8008140 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c0:	3301      	adds	r3, #1
 80080c2:	4619      	mov	r1, r3
 80080c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080c6:	f7fe f92b 	bl	8006320 <move_window>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d137      	bne.n	8008140 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	2200      	movs	r2, #0
 80080d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	3338      	adds	r3, #56	; 0x38
 80080da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd fe6e 	bl	8005dc0 <ld_word>
 80080e4:	4603      	mov	r3, r0
 80080e6:	461a      	mov	r2, r3
 80080e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d127      	bne.n	8008140 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	3338      	adds	r3, #56	; 0x38
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd fe7b 	bl	8005df0 <ld_dword>
 80080fa:	4603      	mov	r3, r0
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <find_volume+0x4fc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d11e      	bne.n	8008140 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	3338      	adds	r3, #56	; 0x38
 8008106:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd fe70 	bl	8005df0 <ld_dword>
 8008110:	4603      	mov	r3, r0
 8008112:	4a19      	ldr	r2, [pc, #100]	; (8008178 <find_volume+0x500>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d113      	bne.n	8008140 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	3338      	adds	r3, #56	; 0x38
 800811c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fe65 	bl	8005df0 <ld_dword>
 8008126:	4602      	mov	r2, r0
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	3338      	adds	r3, #56	; 0x38
 8008130:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008134:	4618      	mov	r0, r3
 8008136:	f7fd fe5b 	bl	8005df0 <ld_dword>
 800813a:	4602      	mov	r2, r0
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008146:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008148:	4b0c      	ldr	r3, [pc, #48]	; (800817c <find_volume+0x504>)
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	3301      	adds	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <find_volume+0x504>)
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <find_volume+0x504>)
 8008156:	881a      	ldrh	r2, [r3, #0]
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	4a08      	ldr	r2, [pc, #32]	; (8008180 <find_volume+0x508>)
 8008160:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008162:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008164:	f7fe f874 	bl	8006250 <clear_lock>
#endif
	return FR_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3758      	adds	r7, #88	; 0x58
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	41615252 	.word	0x41615252
 8008178:	61417272 	.word	0x61417272
 800817c:	20002494 	.word	0x20002494
 8008180:	200024b8 	.word	0x200024b8

08008184 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800818e:	2309      	movs	r3, #9
 8008190:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01c      	beq.n	80081d2 <validate+0x4e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d018      	beq.n	80081d2 <validate+0x4e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d013      	beq.n	80081d2 <validate+0x4e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	889a      	ldrh	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	88db      	ldrh	r3, [r3, #6]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d10c      	bne.n	80081d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fd fd60 	bl	8005c84 <disk_status>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <validate+0x4e>
			res = FR_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <validate+0x5a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	e000      	b.n	80081e0 <validate+0x5c>
 80081de:	2300      	movs	r3, #0
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	6013      	str	r3, [r2, #0]
	return res;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fc9c 	bl	8007b44 <get_ldnumber>
 800820c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da01      	bge.n	8008218 <f_mount+0x28>
 8008214:	230b      	movs	r3, #11
 8008216:	e02b      	b.n	8008270 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <f_mount+0x88>)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008220:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008228:	69b8      	ldr	r0, [r7, #24]
 800822a:	f7fe f811 	bl	8006250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	490d      	ldr	r1, [pc, #52]	; (8008278 <f_mount+0x88>)
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <f_mount+0x66>
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <f_mount+0x6a>
 8008256:	2300      	movs	r3, #0
 8008258:	e00a      	b.n	8008270 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800825a:	f107 010c 	add.w	r1, r7, #12
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	2200      	movs	r2, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff fd07 	bl	8007c78 <find_volume>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800826e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20002490 	.word	0x20002490

0800827c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b09a      	sub	sp, #104	; 0x68
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <f_open+0x18>
 8008290:	2309      	movs	r3, #9
 8008292:	e1bb      	b.n	800860c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800829a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	f107 0114 	add.w	r1, r7, #20
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fce6 	bl	8007c78 <find_volume>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80082b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 819f 	bne.w	80085fa <f_open+0x37e>
		dj.obj.fs = fs;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	f107 0318 	add.w	r3, r7, #24
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fbc5 	bl	8007a58 <follow_path>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80082dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da03      	bge.n	80082ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80082e6:	2306      	movs	r3, #6
 80082e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80082ec:	e011      	b.n	8008312 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	f107 0318 	add.w	r3, r7, #24
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7fd fe5a 	bl	8005fc0 <chk_lock>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f003 031c 	and.w	r3, r3, #28
 8008318:	2b00      	cmp	r3, #0
 800831a:	d07f      	beq.n	800841c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800831c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008328:	2b04      	cmp	r3, #4
 800832a:	d10e      	bne.n	800834a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800832c:	f7fd fea4 	bl	8006078 <enq_lock>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d006      	beq.n	8008344 <f_open+0xc8>
 8008336:	f107 0318 	add.w	r3, r7, #24
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fffe 	bl	800733c <dir_register>
 8008340:	4603      	mov	r3, r0
 8008342:	e000      	b.n	8008346 <f_open+0xca>
 8008344:	2312      	movs	r3, #18
 8008346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	71fb      	strb	r3, [r7, #7]
 8008352:	e010      	b.n	8008376 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008354:	7fbb      	ldrb	r3, [r7, #30]
 8008356:	f003 0311 	and.w	r3, r3, #17
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <f_open+0xea>
					res = FR_DENIED;
 800835e:	2307      	movs	r3, #7
 8008360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008364:	e007      	b.n	8008376 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <f_open+0xfa>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800837a:	2b00      	cmp	r3, #0
 800837c:	d168      	bne.n	8008450 <f_open+0x1d4>
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d063      	beq.n	8008450 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008388:	f7fd fc1e 	bl	8005bc8 <get_fattime>
 800838c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	330e      	adds	r3, #14
 8008392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008394:	4618      	mov	r0, r3
 8008396:	f7fd fd69 	bl	8005e6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	3316      	adds	r3, #22
 800839e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fd fd63 	bl	8005e6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	330b      	adds	r3, #11
 80083aa:	2220      	movs	r2, #32
 80083ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd39 	bl	8006e2c <ld_clust>
 80083ba:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083c0:	2200      	movs	r2, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd51 	bl	8006e6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	331c      	adds	r3, #28
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fd fd4c 	bl	8005e6c <st_dword>
					fs->wflag = 1;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d037      	beq.n	8008450 <f_open+0x1d4>
						dw = fs->winsect;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80083e6:	f107 0318 	add.w	r3, r7, #24
 80083ea:	2200      	movs	r2, #0
 80083ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe fa41 	bl	8006876 <remove_chain>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80083fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d126      	bne.n	8008450 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd ff8a 	bl	8006320 <move_window>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008416:	3a01      	subs	r2, #1
 8008418:	615a      	str	r2, [r3, #20]
 800841a:	e019      	b.n	8008450 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800841c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008420:	2b00      	cmp	r3, #0
 8008422:	d115      	bne.n	8008450 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008424:	7fbb      	ldrb	r3, [r7, #30]
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <f_open+0x1ba>
					res = FR_NO_FILE;
 800842e:	2304      	movs	r3, #4
 8008430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008434:	e00c      	b.n	8008450 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d007      	beq.n	8008450 <f_open+0x1d4>
 8008440:	7fbb      	ldrb	r3, [r7, #30]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <f_open+0x1d4>
						res = FR_DENIED;
 800844a:	2307      	movs	r3, #7
 800844c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008454:	2b00      	cmp	r3, #0
 8008456:	d128      	bne.n	80084aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008468:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	bf14      	ite	ne
 8008482:	2301      	movne	r3, #1
 8008484:	2300      	moveq	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	f107 0318 	add.w	r3, r7, #24
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd fe13 	bl	80060bc <inc_lock>
 8008496:	4602      	mov	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <f_open+0x22e>
 80084a4:	2302      	movs	r3, #2
 80084a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 80a3 	bne.w	80085fa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fcb6 	bl	8006e2c <ld_clust>
 80084c0:	4602      	mov	r2, r0
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	331c      	adds	r3, #28
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd fc90 	bl	8005df0 <ld_dword>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	88da      	ldrh	r2, [r3, #6]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3330      	adds	r3, #48	; 0x30
 8008506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd fcfa 	bl	8005f06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d06e      	beq.n	80085fa <f_open+0x37e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d06a      	beq.n	80085fa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	895b      	ldrh	r3, [r3, #10]
 8008530:	461a      	mov	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	899b      	ldrh	r3, [r3, #12]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008548:	e016      	b.n	8008578 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd ffa3 	bl	800649a <get_fat>
 8008554:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008558:	2b01      	cmp	r3, #1
 800855a:	d802      	bhi.n	8008562 <f_open+0x2e6>
 800855c:	2302      	movs	r3, #2
 800855e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008568:	d102      	bne.n	8008570 <f_open+0x2f4>
 800856a:	2301      	movs	r3, #1
 800856c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <f_open+0x30c>
 8008580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	429a      	cmp	r2, r3
 8008586:	d8e0      	bhi.n	800854a <f_open+0x2ce>
				}
				fp->clust = clst;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800858c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800858e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008592:	2b00      	cmp	r3, #0
 8008594:	d131      	bne.n	80085fa <f_open+0x37e>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	899b      	ldrh	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859e:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a2:	fb01 f202 	mul.w	r2, r1, r2
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d026      	beq.n	80085fa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd ff53 	bl	800645c <clust2sect>
 80085b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80085b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <f_open+0x34a>
						res = FR_INT_ERR;
 80085be:	2302      	movs	r3, #2
 80085c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085c4:	e019      	b.n	80085fa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	899b      	ldrh	r3, [r3, #12]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	441a      	add	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	7858      	ldrb	r0, [r3, #1]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	2301      	movs	r3, #1
 80085ea:	f7fd fb8b 	bl	8005d04 <disk_read>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <f_open+0x37e>
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <f_open+0x38c>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800860c:	4618      	mov	r0, r3
 800860e:	3768      	adds	r7, #104	; 0x68
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08c      	sub	sp, #48	; 0x30
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f107 0210 	add.w	r2, r7, #16
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fda5 	bl	8008184 <validate>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008644:	2b00      	cmp	r3, #0
 8008646:	d107      	bne.n	8008658 <f_write+0x44>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	7d5b      	ldrb	r3, [r3, #21]
 800864c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <f_write+0x4a>
 8008658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800865c:	e16a      	b.n	8008934 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	7d1b      	ldrb	r3, [r3, #20]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <f_write+0x5a>
 800866a:	2307      	movs	r3, #7
 800866c:	e162      	b.n	8008934 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	429a      	cmp	r2, r3
 800867c:	f080 814c 	bcs.w	8008918 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	43db      	mvns	r3, r3
 8008686:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008688:	e146      	b.n	8008918 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	8992      	ldrh	r2, [r2, #12]
 8008692:	fbb3 f1f2 	udiv	r1, r3, r2
 8008696:	fb01 f202 	mul.w	r2, r1, r2
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 80f1 	bne.w	8008884 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	8992      	ldrh	r2, [r2, #12]
 80086aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	8952      	ldrh	r2, [r2, #10]
 80086b2:	3a01      	subs	r2, #1
 80086b4:	4013      	ands	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d143      	bne.n	8008746 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10c      	bne.n	80086e0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d11a      	bne.n	8008708 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2100      	movs	r1, #0
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe f932 	bl	8006940 <create_chain>
 80086dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80086de:	e013      	b.n	8008708 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	4619      	mov	r1, r3
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7fe f9be 	bl	8006a70 <clmt_clust>
 80086f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80086f6:	e007      	b.n	8008708 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7fe f91d 	bl	8006940 <create_chain>
 8008706:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8109 	beq.w	8008922 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	2b01      	cmp	r3, #1
 8008714:	d104      	bne.n	8008720 <f_write+0x10c>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2202      	movs	r2, #2
 800871a:	755a      	strb	r2, [r3, #21]
 800871c:	2302      	movs	r3, #2
 800871e:	e109      	b.n	8008934 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008726:	d104      	bne.n	8008732 <f_write+0x11e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	755a      	strb	r2, [r3, #21]
 800872e:	2301      	movs	r3, #1
 8008730:	e100      	b.n	8008934 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008736:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <f_write+0x132>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008744:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	7d1b      	ldrb	r3, [r3, #20]
 800874a:	b25b      	sxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	da18      	bge.n	8008782 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	7858      	ldrb	r0, [r3, #1]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1a      	ldr	r2, [r3, #32]
 800875e:	2301      	movs	r3, #1
 8008760:	f7fd faf0 	bl	8005d44 <disk_write>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <f_write+0x160>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	755a      	strb	r2, [r3, #21]
 8008770:	2301      	movs	r3, #1
 8008772:	e0df      	b.n	8008934 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	7d1b      	ldrb	r3, [r3, #20]
 8008778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877c:	b2da      	uxtb	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f7fd fe66 	bl	800645c <clust2sect>
 8008790:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <f_write+0x18e>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2202      	movs	r2, #2
 800879c:	755a      	strb	r2, [r3, #21]
 800879e:	2302      	movs	r3, #2
 80087a0:	e0c8      	b.n	8008934 <f_write+0x320>
			sect += csect;
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	4413      	add	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	899b      	ldrh	r3, [r3, #12]
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d043      	beq.n	8008846 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	4413      	add	r3, r2
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	8952      	ldrh	r2, [r2, #10]
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d905      	bls.n	80087d8 <f_write+0x1c4>
					cc = fs->csize - csect;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	895b      	ldrh	r3, [r3, #10]
 80087d0:	461a      	mov	r2, r3
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	7858      	ldrb	r0, [r3, #1]
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	69f9      	ldr	r1, [r7, #28]
 80087e2:	f7fd faaf 	bl	8005d44 <disk_write>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <f_write+0x1e2>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	755a      	strb	r2, [r3, #21]
 80087f2:	2301      	movs	r3, #1
 80087f4:	e09e      	b.n	8008934 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	6a3a      	ldr	r2, [r7, #32]
 8008800:	429a      	cmp	r2, r3
 8008802:	d918      	bls.n	8008836 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	8992      	ldrh	r2, [r2, #12]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	18d1      	adds	r1, r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	899b      	ldrh	r3, [r3, #12]
 8008822:	461a      	mov	r2, r3
 8008824:	f7fd fb4e 	bl	8005ec4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	7d1b      	ldrb	r3, [r3, #20]
 800882c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	899b      	ldrh	r3, [r3, #12]
 800883a:	461a      	mov	r2, r3
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	fb02 f303 	mul.w	r3, r2, r3
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008844:	e04b      	b.n	80088de <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	d016      	beq.n	800887e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008858:	429a      	cmp	r2, r3
 800885a:	d210      	bcs.n	800887e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	7858      	ldrb	r0, [r3, #1]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008866:	2301      	movs	r3, #1
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	f7fd fa4b 	bl	8005d04 <disk_read>
 800886e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	755a      	strb	r2, [r3, #21]
 800887a:	2301      	movs	r3, #1
 800887c:	e05a      	b.n	8008934 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	899b      	ldrh	r3, [r3, #12]
 8008888:	4618      	mov	r0, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	8992      	ldrh	r2, [r2, #12]
 8008892:	fbb3 f1f2 	udiv	r1, r3, r2
 8008896:	fb01 f202 	mul.w	r2, r1, r2
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	1ac3      	subs	r3, r0, r3
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d901      	bls.n	80088ac <f_write+0x298>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	8992      	ldrh	r2, [r2, #12]
 80088ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80088be:	fb00 f202 	mul.w	r2, r0, r2
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	440b      	add	r3, r1
 80088c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c8:	69f9      	ldr	r1, [r7, #28]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fd fafa 	bl	8005ec4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	4413      	add	r3, r2
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	619a      	str	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	bf38      	it	cc
 80088fe:	461a      	movcc	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	60da      	str	r2, [r3, #12]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	441a      	add	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f aeb5 	bne.w	800868a <f_write+0x76>
 8008920:	e000      	b.n	8008924 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008922:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7d1b      	ldrb	r3, [r3, #20]
 8008928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892c:	b2da      	uxtb	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3730      	adds	r7, #48	; 0x30
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f107 0208 	add.w	r2, r7, #8
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fc19 	bl	8008184 <validate>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d168      	bne.n	8008a2e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7d1b      	ldrb	r3, [r3, #20]
 8008960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d062      	beq.n	8008a2e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7d1b      	ldrb	r3, [r3, #20]
 800896c:	b25b      	sxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	da15      	bge.n	800899e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7858      	ldrb	r0, [r3, #1]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1a      	ldr	r2, [r3, #32]
 8008980:	2301      	movs	r3, #1
 8008982:	f7fd f9df 	bl	8005d44 <disk_write>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <f_sync+0x54>
 800898c:	2301      	movs	r3, #1
 800898e:	e04f      	b.n	8008a30 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	7d1b      	ldrb	r3, [r3, #20]
 8008994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008998:	b2da      	uxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800899e:	f7fd f913 	bl	8005bc8 <get_fattime>
 80089a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f7fd fcb7 	bl	8006320 <move_window>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d138      	bne.n	8008a2e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	330b      	adds	r3, #11
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	330b      	adds	r3, #11
 80089cc:	f042 0220 	orr.w	r2, r2, #32
 80089d0:	b2d2      	uxtb	r2, r2
 80089d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	461a      	mov	r2, r3
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	f7fe fa43 	bl	8006e6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f103 021c 	add.w	r2, r3, #28
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fd fa3b 	bl	8005e6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3316      	adds	r3, #22
 80089fa:	6939      	ldr	r1, [r7, #16]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fd fa35 	bl	8005e6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3312      	adds	r3, #18
 8008a06:	2100      	movs	r1, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fd fa14 	bl	8005e36 <st_word>
					fs->wflag = 1;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2201      	movs	r2, #1
 8008a12:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd fcb0 	bl	800637c <sync_fs>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff7b 	bl	800893c <f_sync>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d118      	bne.n	8008a82 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f107 0208 	add.w	r2, r7, #8
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fb93 	bl	8008184 <validate>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10c      	bne.n	8008a82 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd fbb3 	bl	80061d8 <dec_lock>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b090      	sub	sp, #64	; 0x40
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008a96:	f107 0108 	add.w	r1, r7, #8
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff f8ea 	bl	8007c78 <find_volume>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11f      	bne.n	8008af2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe ffcc 	bl	8007a58 <follow_path>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d111      	bne.n	8008af2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da03      	bge.n	8008ae0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008ad8:	2306      	movs	r3, #6
 8008ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ade:	e008      	b.n	8008af2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <f_stat+0x66>
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fd1d 	bl	800752c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3740      	adds	r7, #64	; 0x40
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b16:	4b1f      	ldr	r3, [pc, #124]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b18:	7a5b      	ldrb	r3, [r3, #9]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d131      	bne.n	8008b84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b20:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b22:	7a5b      	ldrb	r3, [r3, #9]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b2e:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b30:	7a5b      	ldrb	r3, [r3, #9]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4a17      	ldr	r2, [pc, #92]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b3e:	4b15      	ldr	r3, [pc, #84]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b40:	7a5b      	ldrb	r3, [r3, #9]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b48:	4413      	add	r3, r2
 8008b4a:	79fa      	ldrb	r2, [r7, #7]
 8008b4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b50:	7a5b      	ldrb	r3, [r3, #9]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	b2d1      	uxtb	r1, r2
 8008b58:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <FATFS_LinkDriverEx+0x94>)
 8008b5a:	7251      	strb	r1, [r2, #9]
 8008b5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b5e:	7dbb      	ldrb	r3, [r7, #22]
 8008b60:	3330      	adds	r3, #48	; 0x30
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	223a      	movs	r2, #58	; 0x3a
 8008b6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3302      	adds	r3, #2
 8008b74:	222f      	movs	r2, #47	; 0x2f
 8008b76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3303      	adds	r3, #3
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	200026b8 	.word	0x200026b8

08008b98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff ffaa 	bl	8008b00 <FATFS_LinkDriverEx>
 8008bac:	4603      	mov	r3, r0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8008bc8:	d802      	bhi.n	8008bd0 <ff_convert+0x18>
		c = chr;
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	81fb      	strh	r3, [r7, #14]
 8008bce:	e025      	b.n	8008c1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	2bff      	cmp	r3, #255	; 0xff
 8008bda:	d805      	bhi.n	8008be8 <ff_convert+0x30>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	3b80      	subs	r3, #128	; 0x80
 8008be0:	4a12      	ldr	r2, [pc, #72]	; (8008c2c <ff_convert+0x74>)
 8008be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be6:	e000      	b.n	8008bea <ff_convert+0x32>
 8008be8:	2300      	movs	r3, #0
 8008bea:	81fb      	strh	r3, [r7, #14]
 8008bec:	e016      	b.n	8008c1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008bee:	2300      	movs	r3, #0
 8008bf0:	81fb      	strh	r3, [r7, #14]
 8008bf2:	e009      	b.n	8008c08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	4a0d      	ldr	r2, [pc, #52]	; (8008c2c <ff_convert+0x74>)
 8008bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d006      	beq.n	8008c10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c02:	89fb      	ldrh	r3, [r7, #14]
 8008c04:	3301      	adds	r3, #1
 8008c06:	81fb      	strh	r3, [r7, #14]
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c0c:	d9f2      	bls.n	8008bf4 <ff_convert+0x3c>
 8008c0e:	e000      	b.n	8008c12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c12:	89fb      	ldrh	r3, [r7, #14]
 8008c14:	3380      	adds	r3, #128	; 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	0800a690 	.word	0x0800a690

08008c30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c40:	d201      	bcs.n	8008c46 <ff_wtoupper+0x16>
 8008c42:	4b3e      	ldr	r3, [pc, #248]	; (8008d3c <ff_wtoupper+0x10c>)
 8008c44:	e000      	b.n	8008c48 <ff_wtoupper+0x18>
 8008c46:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <ff_wtoupper+0x110>)
 8008c48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	1c9a      	adds	r2, r3, #2
 8008c4e:	617a      	str	r2, [r7, #20]
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008c54:	8a7b      	ldrh	r3, [r7, #18]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d068      	beq.n	8008d2c <ff_wtoupper+0xfc>
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	8a7b      	ldrh	r3, [r7, #18]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d364      	bcc.n	8008d2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	1c9a      	adds	r2, r3, #2
 8008c66:	617a      	str	r2, [r7, #20]
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	823b      	strh	r3, [r7, #16]
 8008c6c:	8a3b      	ldrh	r3, [r7, #16]
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	81fb      	strh	r3, [r7, #14]
 8008c72:	8a3b      	ldrh	r3, [r7, #16]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008c78:	88fa      	ldrh	r2, [r7, #6]
 8008c7a:	8a79      	ldrh	r1, [r7, #18]
 8008c7c:	8a3b      	ldrh	r3, [r7, #16]
 8008c7e:	440b      	add	r3, r1
 8008c80:	429a      	cmp	r2, r3
 8008c82:	da49      	bge.n	8008d18 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008c84:	89fb      	ldrh	r3, [r7, #14]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d84f      	bhi.n	8008d2a <ff_wtoupper+0xfa>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <ff_wtoupper+0x60>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cc7 	.word	0x08008cc7
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008ced 	.word	0x08008ced
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008cfd 	.word	0x08008cfd
 8008cac:	08008d05 	.word	0x08008d05
 8008cb0:	08008d0d 	.word	0x08008d0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	8a7b      	ldrh	r3, [r7, #18]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	80fb      	strh	r3, [r7, #6]
 8008cc4:	e027      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	8a7b      	ldrh	r3, [r7, #18]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	80fb      	strh	r3, [r7, #6]
 8008cda:	e01c      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008cdc:	88fb      	ldrh	r3, [r7, #6]
 8008cde:	3b10      	subs	r3, #16
 8008ce0:	80fb      	strh	r3, [r7, #6]
 8008ce2:	e018      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	3b20      	subs	r3, #32
 8008ce8:	80fb      	strh	r3, [r7, #6]
 8008cea:	e014      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	3b30      	subs	r3, #48	; 0x30
 8008cf0:	80fb      	strh	r3, [r7, #6]
 8008cf2:	e010      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	3b1a      	subs	r3, #26
 8008cf8:	80fb      	strh	r3, [r7, #6]
 8008cfa:	e00c      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008cfc:	88fb      	ldrh	r3, [r7, #6]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	80fb      	strh	r3, [r7, #6]
 8008d02:	e008      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	3b50      	subs	r3, #80	; 0x50
 8008d08:	80fb      	strh	r3, [r7, #6]
 8008d0a:	e004      	b.n	8008d16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008d12:	80fb      	strh	r3, [r7, #6]
 8008d14:	bf00      	nop
			}
			break;
 8008d16:	e008      	b.n	8008d2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008d18:	89fb      	ldrh	r3, [r7, #14]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d195      	bne.n	8008c4a <ff_wtoupper+0x1a>
 8008d1e:	8a3b      	ldrh	r3, [r7, #16]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4413      	add	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008d28:	e78f      	b.n	8008c4a <ff_wtoupper+0x1a>
			break;
 8008d2a:	bf00      	nop
	}

	return chr;
 8008d2c:	88fb      	ldrh	r3, [r7, #6]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	0800a790 	.word	0x0800a790
 8008d40:	0800a984 	.word	0x0800a984

08008d44 <siprintf>:
 8008d44:	b40e      	push	{r1, r2, r3}
 8008d46:	b500      	push	{lr}
 8008d48:	b09c      	sub	sp, #112	; 0x70
 8008d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	9006      	str	r0, [sp, #24]
 8008d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d54:	4809      	ldr	r0, [pc, #36]	; (8008d7c <siprintf+0x38>)
 8008d56:	9107      	str	r1, [sp, #28]
 8008d58:	9104      	str	r1, [sp, #16]
 8008d5a:	4909      	ldr	r1, [pc, #36]	; (8008d80 <siprintf+0x3c>)
 8008d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d60:	9105      	str	r1, [sp, #20]
 8008d62:	6800      	ldr	r0, [r0, #0]
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	a902      	add	r1, sp, #8
 8008d68:	f000 f992 	bl	8009090 <_svfiprintf_r>
 8008d6c:	9b02      	ldr	r3, [sp, #8]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	b01c      	add	sp, #112	; 0x70
 8008d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d78:	b003      	add	sp, #12
 8008d7a:	4770      	bx	lr
 8008d7c:	20000074 	.word	0x20000074
 8008d80:	ffff0208 	.word	0xffff0208

08008d84 <memset>:
 8008d84:	4402      	add	r2, r0
 8008d86:	4603      	mov	r3, r0
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d100      	bne.n	8008d8e <memset+0xa>
 8008d8c:	4770      	bx	lr
 8008d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d92:	e7f9      	b.n	8008d88 <memset+0x4>

08008d94 <__errno>:
 8008d94:	4b01      	ldr	r3, [pc, #4]	; (8008d9c <__errno+0x8>)
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000074 	.word	0x20000074

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4d0d      	ldr	r5, [pc, #52]	; (8008dd8 <__libc_init_array+0x38>)
 8008da4:	4c0d      	ldr	r4, [pc, #52]	; (8008ddc <__libc_init_array+0x3c>)
 8008da6:	1b64      	subs	r4, r4, r5
 8008da8:	10a4      	asrs	r4, r4, #2
 8008daa:	2600      	movs	r6, #0
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	4d0b      	ldr	r5, [pc, #44]	; (8008de0 <__libc_init_array+0x40>)
 8008db2:	4c0c      	ldr	r4, [pc, #48]	; (8008de4 <__libc_init_array+0x44>)
 8008db4:	f001 fba2 	bl	800a4fc <_init>
 8008db8:	1b64      	subs	r4, r4, r5
 8008dba:	10a4      	asrs	r4, r4, #2
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc8:	4798      	blx	r3
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd2:	4798      	blx	r3
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	0800aaa8 	.word	0x0800aaa8
 8008ddc:	0800aaa8 	.word	0x0800aaa8
 8008de0:	0800aaa8 	.word	0x0800aaa8
 8008de4:	0800aaac 	.word	0x0800aaac

08008de8 <__retarget_lock_acquire_recursive>:
 8008de8:	4770      	bx	lr

08008dea <__retarget_lock_release_recursive>:
 8008dea:	4770      	bx	lr

08008dec <_free_r>:
 8008dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dee:	2900      	cmp	r1, #0
 8008df0:	d044      	beq.n	8008e7c <_free_r+0x90>
 8008df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df6:	9001      	str	r0, [sp, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8008dfe:	bfb8      	it	lt
 8008e00:	18e4      	addlt	r4, r4, r3
 8008e02:	f000 f8df 	bl	8008fc4 <__malloc_lock>
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <_free_r+0x94>)
 8008e08:	9801      	ldr	r0, [sp, #4]
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	b933      	cbnz	r3, 8008e1c <_free_r+0x30>
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6014      	str	r4, [r2, #0]
 8008e12:	b003      	add	sp, #12
 8008e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e18:	f000 b8da 	b.w	8008fd0 <__malloc_unlock>
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d908      	bls.n	8008e32 <_free_r+0x46>
 8008e20:	6825      	ldr	r5, [r4, #0]
 8008e22:	1961      	adds	r1, r4, r5
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf01      	itttt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	1949      	addeq	r1, r1, r5
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	e7ed      	b.n	8008e0e <_free_r+0x22>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x50>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x46>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1855      	adds	r5, r2, r1
 8008e40:	42a5      	cmp	r5, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x70>
 8008e44:	6824      	ldr	r4, [r4, #0]
 8008e46:	4421      	add	r1, r4
 8008e48:	1854      	adds	r4, r2, r1
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1e0      	bne.n	8008e12 <_free_r+0x26>
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	6053      	str	r3, [r2, #4]
 8008e56:	440c      	add	r4, r1
 8008e58:	6014      	str	r4, [r2, #0]
 8008e5a:	e7da      	b.n	8008e12 <_free_r+0x26>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x78>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	e7d6      	b.n	8008e12 <_free_r+0x26>
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	1961      	adds	r1, r4, r5
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6054      	str	r4, [r2, #4]
 8008e7a:	e7ca      	b.n	8008e12 <_free_r+0x26>
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bd30      	pop	{r4, r5, pc}
 8008e80:	20002804 	.word	0x20002804

08008e84 <sbrk_aligned>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0e      	ldr	r6, [pc, #56]	; (8008ec0 <sbrk_aligned+0x3c>)
 8008e88:	460c      	mov	r4, r1
 8008e8a:	6831      	ldr	r1, [r6, #0]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	b911      	cbnz	r1, 8008e96 <sbrk_aligned+0x12>
 8008e90:	f000 fba6 	bl	80095e0 <_sbrk_r>
 8008e94:	6030      	str	r0, [r6, #0]
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 fba1 	bl	80095e0 <_sbrk_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d00a      	beq.n	8008eb8 <sbrk_aligned+0x34>
 8008ea2:	1cc4      	adds	r4, r0, #3
 8008ea4:	f024 0403 	bic.w	r4, r4, #3
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d007      	beq.n	8008ebc <sbrk_aligned+0x38>
 8008eac:	1a21      	subs	r1, r4, r0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 fb96 	bl	80095e0 <_sbrk_r>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d101      	bne.n	8008ebc <sbrk_aligned+0x38>
 8008eb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	20002808 	.word	0x20002808

08008ec4 <_malloc_r>:
 8008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec8:	1ccd      	adds	r5, r1, #3
 8008eca:	f025 0503 	bic.w	r5, r5, #3
 8008ece:	3508      	adds	r5, #8
 8008ed0:	2d0c      	cmp	r5, #12
 8008ed2:	bf38      	it	cc
 8008ed4:	250c      	movcc	r5, #12
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	4607      	mov	r7, r0
 8008eda:	db01      	blt.n	8008ee0 <_malloc_r+0x1c>
 8008edc:	42a9      	cmp	r1, r5
 8008ede:	d905      	bls.n	8008eec <_malloc_r+0x28>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fc0 <_malloc_r+0xfc>
 8008ef0:	f000 f868 	bl	8008fc4 <__malloc_lock>
 8008ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef8:	461c      	mov	r4, r3
 8008efa:	bb5c      	cbnz	r4, 8008f54 <_malloc_r+0x90>
 8008efc:	4629      	mov	r1, r5
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff ffc0 	bl	8008e84 <sbrk_aligned>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	4604      	mov	r4, r0
 8008f08:	d155      	bne.n	8008fb6 <_malloc_r+0xf2>
 8008f0a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f0e:	4626      	mov	r6, r4
 8008f10:	2e00      	cmp	r6, #0
 8008f12:	d145      	bne.n	8008fa0 <_malloc_r+0xdc>
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	d048      	beq.n	8008faa <_malloc_r+0xe6>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	eb04 0903 	add.w	r9, r4, r3
 8008f22:	f000 fb5d 	bl	80095e0 <_sbrk_r>
 8008f26:	4581      	cmp	r9, r0
 8008f28:	d13f      	bne.n	8008faa <_malloc_r+0xe6>
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	1a6d      	subs	r5, r5, r1
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4638      	mov	r0, r7
 8008f32:	f7ff ffa7 	bl	8008e84 <sbrk_aligned>
 8008f36:	3001      	adds	r0, #1
 8008f38:	d037      	beq.n	8008faa <_malloc_r+0xe6>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	442b      	add	r3, r5
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	f8d8 3000 	ldr.w	r3, [r8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d038      	beq.n	8008fba <_malloc_r+0xf6>
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	42a2      	cmp	r2, r4
 8008f4c:	d12b      	bne.n	8008fa6 <_malloc_r+0xe2>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	e00f      	b.n	8008f74 <_malloc_r+0xb0>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	1b52      	subs	r2, r2, r5
 8008f58:	d41f      	bmi.n	8008f9a <_malloc_r+0xd6>
 8008f5a:	2a0b      	cmp	r2, #11
 8008f5c:	d917      	bls.n	8008f8e <_malloc_r+0xca>
 8008f5e:	1961      	adds	r1, r4, r5
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	6025      	str	r5, [r4, #0]
 8008f64:	bf18      	it	ne
 8008f66:	6059      	strne	r1, [r3, #4]
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	bf08      	it	eq
 8008f6c:	f8c8 1000 	streq.w	r1, [r8]
 8008f70:	5162      	str	r2, [r4, r5]
 8008f72:	604b      	str	r3, [r1, #4]
 8008f74:	4638      	mov	r0, r7
 8008f76:	f104 060b 	add.w	r6, r4, #11
 8008f7a:	f000 f829 	bl	8008fd0 <__malloc_unlock>
 8008f7e:	f026 0607 	bic.w	r6, r6, #7
 8008f82:	1d23      	adds	r3, r4, #4
 8008f84:	1af2      	subs	r2, r6, r3
 8008f86:	d0ae      	beq.n	8008ee6 <_malloc_r+0x22>
 8008f88:	1b9b      	subs	r3, r3, r6
 8008f8a:	50a3      	str	r3, [r4, r2]
 8008f8c:	e7ab      	b.n	8008ee6 <_malloc_r+0x22>
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	6862      	ldr	r2, [r4, #4]
 8008f92:	d1dd      	bne.n	8008f50 <_malloc_r+0x8c>
 8008f94:	f8c8 2000 	str.w	r2, [r8]
 8008f98:	e7ec      	b.n	8008f74 <_malloc_r+0xb0>
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	6864      	ldr	r4, [r4, #4]
 8008f9e:	e7ac      	b.n	8008efa <_malloc_r+0x36>
 8008fa0:	4634      	mov	r4, r6
 8008fa2:	6876      	ldr	r6, [r6, #4]
 8008fa4:	e7b4      	b.n	8008f10 <_malloc_r+0x4c>
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	e7cc      	b.n	8008f44 <_malloc_r+0x80>
 8008faa:	230c      	movs	r3, #12
 8008fac:	603b      	str	r3, [r7, #0]
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f000 f80e 	bl	8008fd0 <__malloc_unlock>
 8008fb4:	e797      	b.n	8008ee6 <_malloc_r+0x22>
 8008fb6:	6025      	str	r5, [r4, #0]
 8008fb8:	e7dc      	b.n	8008f74 <_malloc_r+0xb0>
 8008fba:	605b      	str	r3, [r3, #4]
 8008fbc:	deff      	udf	#255	; 0xff
 8008fbe:	bf00      	nop
 8008fc0:	20002804 	.word	0x20002804

08008fc4 <__malloc_lock>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__malloc_lock+0x8>)
 8008fc6:	f7ff bf0f 	b.w	8008de8 <__retarget_lock_acquire_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20002800 	.word	0x20002800

08008fd0 <__malloc_unlock>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	; (8008fd8 <__malloc_unlock+0x8>)
 8008fd2:	f7ff bf0a 	b.w	8008dea <__retarget_lock_release_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	20002800 	.word	0x20002800

08008fdc <__ssputs_r>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	688e      	ldr	r6, [r1, #8]
 8008fe2:	461f      	mov	r7, r3
 8008fe4:	42be      	cmp	r6, r7
 8008fe6:	680b      	ldr	r3, [r1, #0]
 8008fe8:	4682      	mov	sl, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	4690      	mov	r8, r2
 8008fee:	d82c      	bhi.n	800904a <__ssputs_r+0x6e>
 8008ff0:	898a      	ldrh	r2, [r1, #12]
 8008ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ff6:	d026      	beq.n	8009046 <__ssputs_r+0x6a>
 8008ff8:	6965      	ldr	r5, [r4, #20]
 8008ffa:	6909      	ldr	r1, [r1, #16]
 8008ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009000:	eba3 0901 	sub.w	r9, r3, r1
 8009004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009008:	1c7b      	adds	r3, r7, #1
 800900a:	444b      	add	r3, r9
 800900c:	106d      	asrs	r5, r5, #1
 800900e:	429d      	cmp	r5, r3
 8009010:	bf38      	it	cc
 8009012:	461d      	movcc	r5, r3
 8009014:	0553      	lsls	r3, r2, #21
 8009016:	d527      	bpl.n	8009068 <__ssputs_r+0x8c>
 8009018:	4629      	mov	r1, r5
 800901a:	f7ff ff53 	bl	8008ec4 <_malloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	b360      	cbz	r0, 800907c <__ssputs_r+0xa0>
 8009022:	6921      	ldr	r1, [r4, #16]
 8009024:	464a      	mov	r2, r9
 8009026:	f000 faeb 	bl	8009600 <memcpy>
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	6126      	str	r6, [r4, #16]
 8009038:	6165      	str	r5, [r4, #20]
 800903a:	444e      	add	r6, r9
 800903c:	eba5 0509 	sub.w	r5, r5, r9
 8009040:	6026      	str	r6, [r4, #0]
 8009042:	60a5      	str	r5, [r4, #8]
 8009044:	463e      	mov	r6, r7
 8009046:	42be      	cmp	r6, r7
 8009048:	d900      	bls.n	800904c <__ssputs_r+0x70>
 800904a:	463e      	mov	r6, r7
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	4632      	mov	r2, r6
 8009050:	4641      	mov	r1, r8
 8009052:	f000 faab 	bl	80095ac <memmove>
 8009056:	68a3      	ldr	r3, [r4, #8]
 8009058:	1b9b      	subs	r3, r3, r6
 800905a:	60a3      	str	r3, [r4, #8]
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	4433      	add	r3, r6
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	2000      	movs	r0, #0
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	462a      	mov	r2, r5
 800906a:	f000 fad7 	bl	800961c <_realloc_r>
 800906e:	4606      	mov	r6, r0
 8009070:	2800      	cmp	r0, #0
 8009072:	d1e0      	bne.n	8009036 <__ssputs_r+0x5a>
 8009074:	6921      	ldr	r1, [r4, #16]
 8009076:	4650      	mov	r0, sl
 8009078:	f7ff feb8 	bl	8008dec <_free_r>
 800907c:	230c      	movs	r3, #12
 800907e:	f8ca 3000 	str.w	r3, [sl]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800908e:	e7e9      	b.n	8009064 <__ssputs_r+0x88>

08009090 <_svfiprintf_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4698      	mov	r8, r3
 8009096:	898b      	ldrh	r3, [r1, #12]
 8009098:	061b      	lsls	r3, r3, #24
 800909a:	b09d      	sub	sp, #116	; 0x74
 800909c:	4607      	mov	r7, r0
 800909e:	460d      	mov	r5, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	d50e      	bpl.n	80090c2 <_svfiprintf_r+0x32>
 80090a4:	690b      	ldr	r3, [r1, #16]
 80090a6:	b963      	cbnz	r3, 80090c2 <_svfiprintf_r+0x32>
 80090a8:	2140      	movs	r1, #64	; 0x40
 80090aa:	f7ff ff0b 	bl	8008ec4 <_malloc_r>
 80090ae:	6028      	str	r0, [r5, #0]
 80090b0:	6128      	str	r0, [r5, #16]
 80090b2:	b920      	cbnz	r0, 80090be <_svfiprintf_r+0x2e>
 80090b4:	230c      	movs	r3, #12
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090bc:	e0d0      	b.n	8009260 <_svfiprintf_r+0x1d0>
 80090be:	2340      	movs	r3, #64	; 0x40
 80090c0:	616b      	str	r3, [r5, #20]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	2320      	movs	r3, #32
 80090c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d0:	2330      	movs	r3, #48	; 0x30
 80090d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009278 <_svfiprintf_r+0x1e8>
 80090d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090da:	f04f 0901 	mov.w	r9, #1
 80090de:	4623      	mov	r3, r4
 80090e0:	469a      	mov	sl, r3
 80090e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e6:	b10a      	cbz	r2, 80090ec <_svfiprintf_r+0x5c>
 80090e8:	2a25      	cmp	r2, #37	; 0x25
 80090ea:	d1f9      	bne.n	80090e0 <_svfiprintf_r+0x50>
 80090ec:	ebba 0b04 	subs.w	fp, sl, r4
 80090f0:	d00b      	beq.n	800910a <_svfiprintf_r+0x7a>
 80090f2:	465b      	mov	r3, fp
 80090f4:	4622      	mov	r2, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff ff6f 	bl	8008fdc <__ssputs_r>
 80090fe:	3001      	adds	r0, #1
 8009100:	f000 80a9 	beq.w	8009256 <_svfiprintf_r+0x1c6>
 8009104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009106:	445a      	add	r2, fp
 8009108:	9209      	str	r2, [sp, #36]	; 0x24
 800910a:	f89a 3000 	ldrb.w	r3, [sl]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80a1 	beq.w	8009256 <_svfiprintf_r+0x1c6>
 8009114:	2300      	movs	r3, #0
 8009116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800911a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800911e:	f10a 0a01 	add.w	sl, sl, #1
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800912a:	931a      	str	r3, [sp, #104]	; 0x68
 800912c:	4654      	mov	r4, sl
 800912e:	2205      	movs	r2, #5
 8009130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009134:	4850      	ldr	r0, [pc, #320]	; (8009278 <_svfiprintf_r+0x1e8>)
 8009136:	f7f7 f853 	bl	80001e0 <memchr>
 800913a:	9a04      	ldr	r2, [sp, #16]
 800913c:	b9d8      	cbnz	r0, 8009176 <_svfiprintf_r+0xe6>
 800913e:	06d0      	lsls	r0, r2, #27
 8009140:	bf44      	itt	mi
 8009142:	2320      	movmi	r3, #32
 8009144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009148:	0711      	lsls	r1, r2, #28
 800914a:	bf44      	itt	mi
 800914c:	232b      	movmi	r3, #43	; 0x2b
 800914e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009152:	f89a 3000 	ldrb.w	r3, [sl]
 8009156:	2b2a      	cmp	r3, #42	; 0x2a
 8009158:	d015      	beq.n	8009186 <_svfiprintf_r+0xf6>
 800915a:	9a07      	ldr	r2, [sp, #28]
 800915c:	4654      	mov	r4, sl
 800915e:	2000      	movs	r0, #0
 8009160:	f04f 0c0a 	mov.w	ip, #10
 8009164:	4621      	mov	r1, r4
 8009166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916a:	3b30      	subs	r3, #48	; 0x30
 800916c:	2b09      	cmp	r3, #9
 800916e:	d94d      	bls.n	800920c <_svfiprintf_r+0x17c>
 8009170:	b1b0      	cbz	r0, 80091a0 <_svfiprintf_r+0x110>
 8009172:	9207      	str	r2, [sp, #28]
 8009174:	e014      	b.n	80091a0 <_svfiprintf_r+0x110>
 8009176:	eba0 0308 	sub.w	r3, r0, r8
 800917a:	fa09 f303 	lsl.w	r3, r9, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	46a2      	mov	sl, r4
 8009184:	e7d2      	b.n	800912c <_svfiprintf_r+0x9c>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	1d19      	adds	r1, r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	9103      	str	r1, [sp, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfbb      	ittet	lt
 8009192:	425b      	neglt	r3, r3
 8009194:	f042 0202 	orrlt.w	r2, r2, #2
 8009198:	9307      	strge	r3, [sp, #28]
 800919a:	9307      	strlt	r3, [sp, #28]
 800919c:	bfb8      	it	lt
 800919e:	9204      	strlt	r2, [sp, #16]
 80091a0:	7823      	ldrb	r3, [r4, #0]
 80091a2:	2b2e      	cmp	r3, #46	; 0x2e
 80091a4:	d10c      	bne.n	80091c0 <_svfiprintf_r+0x130>
 80091a6:	7863      	ldrb	r3, [r4, #1]
 80091a8:	2b2a      	cmp	r3, #42	; 0x2a
 80091aa:	d134      	bne.n	8009216 <_svfiprintf_r+0x186>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	9203      	str	r2, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfb8      	it	lt
 80091b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091bc:	3402      	adds	r4, #2
 80091be:	9305      	str	r3, [sp, #20]
 80091c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009288 <_svfiprintf_r+0x1f8>
 80091c4:	7821      	ldrb	r1, [r4, #0]
 80091c6:	2203      	movs	r2, #3
 80091c8:	4650      	mov	r0, sl
 80091ca:	f7f7 f809 	bl	80001e0 <memchr>
 80091ce:	b138      	cbz	r0, 80091e0 <_svfiprintf_r+0x150>
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	eba0 000a 	sub.w	r0, r0, sl
 80091d6:	2240      	movs	r2, #64	; 0x40
 80091d8:	4082      	lsls	r2, r0
 80091da:	4313      	orrs	r3, r2
 80091dc:	3401      	adds	r4, #1
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	4825      	ldr	r0, [pc, #148]	; (800927c <_svfiprintf_r+0x1ec>)
 80091e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ea:	2206      	movs	r2, #6
 80091ec:	f7f6 fff8 	bl	80001e0 <memchr>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d038      	beq.n	8009266 <_svfiprintf_r+0x1d6>
 80091f4:	4b22      	ldr	r3, [pc, #136]	; (8009280 <_svfiprintf_r+0x1f0>)
 80091f6:	bb1b      	cbnz	r3, 8009240 <_svfiprintf_r+0x1b0>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	3307      	adds	r3, #7
 80091fc:	f023 0307 	bic.w	r3, r3, #7
 8009200:	3308      	adds	r3, #8
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009206:	4433      	add	r3, r6
 8009208:	9309      	str	r3, [sp, #36]	; 0x24
 800920a:	e768      	b.n	80090de <_svfiprintf_r+0x4e>
 800920c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009210:	460c      	mov	r4, r1
 8009212:	2001      	movs	r0, #1
 8009214:	e7a6      	b.n	8009164 <_svfiprintf_r+0xd4>
 8009216:	2300      	movs	r3, #0
 8009218:	3401      	adds	r4, #1
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	4619      	mov	r1, r3
 800921e:	f04f 0c0a 	mov.w	ip, #10
 8009222:	4620      	mov	r0, r4
 8009224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009228:	3a30      	subs	r2, #48	; 0x30
 800922a:	2a09      	cmp	r2, #9
 800922c:	d903      	bls.n	8009236 <_svfiprintf_r+0x1a6>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0c6      	beq.n	80091c0 <_svfiprintf_r+0x130>
 8009232:	9105      	str	r1, [sp, #20]
 8009234:	e7c4      	b.n	80091c0 <_svfiprintf_r+0x130>
 8009236:	fb0c 2101 	mla	r1, ip, r1, r2
 800923a:	4604      	mov	r4, r0
 800923c:	2301      	movs	r3, #1
 800923e:	e7f0      	b.n	8009222 <_svfiprintf_r+0x192>
 8009240:	ab03      	add	r3, sp, #12
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	462a      	mov	r2, r5
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <_svfiprintf_r+0x1f4>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	4638      	mov	r0, r7
 800924c:	f3af 8000 	nop.w
 8009250:	1c42      	adds	r2, r0, #1
 8009252:	4606      	mov	r6, r0
 8009254:	d1d6      	bne.n	8009204 <_svfiprintf_r+0x174>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	065b      	lsls	r3, r3, #25
 800925a:	f53f af2d 	bmi.w	80090b8 <_svfiprintf_r+0x28>
 800925e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009260:	b01d      	add	sp, #116	; 0x74
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	ab03      	add	r3, sp, #12
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	462a      	mov	r2, r5
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <_svfiprintf_r+0x1f4>)
 800926e:	a904      	add	r1, sp, #16
 8009270:	4638      	mov	r0, r7
 8009272:	f000 f879 	bl	8009368 <_printf_i>
 8009276:	e7eb      	b.n	8009250 <_svfiprintf_r+0x1c0>
 8009278:	0800aa40 	.word	0x0800aa40
 800927c:	0800aa4a 	.word	0x0800aa4a
 8009280:	00000000 	.word	0x00000000
 8009284:	08008fdd 	.word	0x08008fdd
 8009288:	0800aa46 	.word	0x0800aa46

0800928c <_printf_common>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	4616      	mov	r6, r2
 8009292:	4699      	mov	r9, r3
 8009294:	688a      	ldr	r2, [r1, #8]
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800929c:	4293      	cmp	r3, r2
 800929e:	bfb8      	it	lt
 80092a0:	4613      	movlt	r3, r2
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092a8:	4607      	mov	r7, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b10a      	cbz	r2, 80092b2 <_printf_common+0x26>
 80092ae:	3301      	adds	r3, #1
 80092b0:	6033      	str	r3, [r6, #0]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	0699      	lsls	r1, r3, #26
 80092b6:	bf42      	ittt	mi
 80092b8:	6833      	ldrmi	r3, [r6, #0]
 80092ba:	3302      	addmi	r3, #2
 80092bc:	6033      	strmi	r3, [r6, #0]
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	f015 0506 	ands.w	r5, r5, #6
 80092c4:	d106      	bne.n	80092d4 <_printf_common+0x48>
 80092c6:	f104 0a19 	add.w	sl, r4, #25
 80092ca:	68e3      	ldr	r3, [r4, #12]
 80092cc:	6832      	ldr	r2, [r6, #0]
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc26      	bgt.n	8009322 <_printf_common+0x96>
 80092d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092d8:	1e13      	subs	r3, r2, #0
 80092da:	6822      	ldr	r2, [r4, #0]
 80092dc:	bf18      	it	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	0692      	lsls	r2, r2, #26
 80092e2:	d42b      	bmi.n	800933c <_printf_common+0xb0>
 80092e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092e8:	4649      	mov	r1, r9
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c0      	blx	r8
 80092ee:	3001      	adds	r0, #1
 80092f0:	d01e      	beq.n	8009330 <_printf_common+0xa4>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	6922      	ldr	r2, [r4, #16]
 80092f6:	f003 0306 	and.w	r3, r3, #6
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	bf02      	ittt	eq
 80092fe:	68e5      	ldreq	r5, [r4, #12]
 8009300:	6833      	ldreq	r3, [r6, #0]
 8009302:	1aed      	subeq	r5, r5, r3
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	bf0c      	ite	eq
 8009308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800930c:	2500      	movne	r5, #0
 800930e:	4293      	cmp	r3, r2
 8009310:	bfc4      	itt	gt
 8009312:	1a9b      	subgt	r3, r3, r2
 8009314:	18ed      	addgt	r5, r5, r3
 8009316:	2600      	movs	r6, #0
 8009318:	341a      	adds	r4, #26
 800931a:	42b5      	cmp	r5, r6
 800931c:	d11a      	bne.n	8009354 <_printf_common+0xc8>
 800931e:	2000      	movs	r0, #0
 8009320:	e008      	b.n	8009334 <_printf_common+0xa8>
 8009322:	2301      	movs	r3, #1
 8009324:	4652      	mov	r2, sl
 8009326:	4649      	mov	r1, r9
 8009328:	4638      	mov	r0, r7
 800932a:	47c0      	blx	r8
 800932c:	3001      	adds	r0, #1
 800932e:	d103      	bne.n	8009338 <_printf_common+0xac>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	3501      	adds	r5, #1
 800933a:	e7c6      	b.n	80092ca <_printf_common+0x3e>
 800933c:	18e1      	adds	r1, r4, r3
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	2030      	movs	r0, #48	; 0x30
 8009342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009346:	4422      	add	r2, r4
 8009348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800934c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009350:	3302      	adds	r3, #2
 8009352:	e7c7      	b.n	80092e4 <_printf_common+0x58>
 8009354:	2301      	movs	r3, #1
 8009356:	4622      	mov	r2, r4
 8009358:	4649      	mov	r1, r9
 800935a:	4638      	mov	r0, r7
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d0e6      	beq.n	8009330 <_printf_common+0xa4>
 8009362:	3601      	adds	r6, #1
 8009364:	e7d9      	b.n	800931a <_printf_common+0x8e>
	...

08009368 <_printf_i>:
 8009368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	7e0f      	ldrb	r7, [r1, #24]
 800936e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009370:	2f78      	cmp	r7, #120	; 0x78
 8009372:	4691      	mov	r9, r2
 8009374:	4680      	mov	r8, r0
 8009376:	460c      	mov	r4, r1
 8009378:	469a      	mov	sl, r3
 800937a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800937e:	d807      	bhi.n	8009390 <_printf_i+0x28>
 8009380:	2f62      	cmp	r7, #98	; 0x62
 8009382:	d80a      	bhi.n	800939a <_printf_i+0x32>
 8009384:	2f00      	cmp	r7, #0
 8009386:	f000 80d4 	beq.w	8009532 <_printf_i+0x1ca>
 800938a:	2f58      	cmp	r7, #88	; 0x58
 800938c:	f000 80c0 	beq.w	8009510 <_printf_i+0x1a8>
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009398:	e03a      	b.n	8009410 <_printf_i+0xa8>
 800939a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800939e:	2b15      	cmp	r3, #21
 80093a0:	d8f6      	bhi.n	8009390 <_printf_i+0x28>
 80093a2:	a101      	add	r1, pc, #4	; (adr r1, 80093a8 <_printf_i+0x40>)
 80093a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a8:	08009401 	.word	0x08009401
 80093ac:	08009415 	.word	0x08009415
 80093b0:	08009391 	.word	0x08009391
 80093b4:	08009391 	.word	0x08009391
 80093b8:	08009391 	.word	0x08009391
 80093bc:	08009391 	.word	0x08009391
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009391 	.word	0x08009391
 80093c8:	08009391 	.word	0x08009391
 80093cc:	08009391 	.word	0x08009391
 80093d0:	08009391 	.word	0x08009391
 80093d4:	08009519 	.word	0x08009519
 80093d8:	08009441 	.word	0x08009441
 80093dc:	080094d3 	.word	0x080094d3
 80093e0:	08009391 	.word	0x08009391
 80093e4:	08009391 	.word	0x08009391
 80093e8:	0800953b 	.word	0x0800953b
 80093ec:	08009391 	.word	0x08009391
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009391 	.word	0x08009391
 80093f8:	08009391 	.word	0x08009391
 80093fc:	080094db 	.word	0x080094db
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	602a      	str	r2, [r5, #0]
 8009408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800940c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009410:	2301      	movs	r3, #1
 8009412:	e09f      	b.n	8009554 <_printf_i+0x1ec>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	0607      	lsls	r7, r0, #24
 800941a:	f103 0104 	add.w	r1, r3, #4
 800941e:	6029      	str	r1, [r5, #0]
 8009420:	d501      	bpl.n	8009426 <_printf_i+0xbe>
 8009422:	681e      	ldr	r6, [r3, #0]
 8009424:	e003      	b.n	800942e <_printf_i+0xc6>
 8009426:	0646      	lsls	r6, r0, #25
 8009428:	d5fb      	bpl.n	8009422 <_printf_i+0xba>
 800942a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800942e:	2e00      	cmp	r6, #0
 8009430:	da03      	bge.n	800943a <_printf_i+0xd2>
 8009432:	232d      	movs	r3, #45	; 0x2d
 8009434:	4276      	negs	r6, r6
 8009436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800943a:	485a      	ldr	r0, [pc, #360]	; (80095a4 <_printf_i+0x23c>)
 800943c:	230a      	movs	r3, #10
 800943e:	e012      	b.n	8009466 <_printf_i+0xfe>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	1d19      	adds	r1, r3, #4
 8009446:	6029      	str	r1, [r5, #0]
 8009448:	0605      	lsls	r5, r0, #24
 800944a:	d501      	bpl.n	8009450 <_printf_i+0xe8>
 800944c:	681e      	ldr	r6, [r3, #0]
 800944e:	e002      	b.n	8009456 <_printf_i+0xee>
 8009450:	0641      	lsls	r1, r0, #25
 8009452:	d5fb      	bpl.n	800944c <_printf_i+0xe4>
 8009454:	881e      	ldrh	r6, [r3, #0]
 8009456:	4853      	ldr	r0, [pc, #332]	; (80095a4 <_printf_i+0x23c>)
 8009458:	2f6f      	cmp	r7, #111	; 0x6f
 800945a:	bf0c      	ite	eq
 800945c:	2308      	moveq	r3, #8
 800945e:	230a      	movne	r3, #10
 8009460:	2100      	movs	r1, #0
 8009462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009466:	6865      	ldr	r5, [r4, #4]
 8009468:	60a5      	str	r5, [r4, #8]
 800946a:	2d00      	cmp	r5, #0
 800946c:	bfa2      	ittt	ge
 800946e:	6821      	ldrge	r1, [r4, #0]
 8009470:	f021 0104 	bicge.w	r1, r1, #4
 8009474:	6021      	strge	r1, [r4, #0]
 8009476:	b90e      	cbnz	r6, 800947c <_printf_i+0x114>
 8009478:	2d00      	cmp	r5, #0
 800947a:	d04b      	beq.n	8009514 <_printf_i+0x1ac>
 800947c:	4615      	mov	r5, r2
 800947e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009482:	fb03 6711 	mls	r7, r3, r1, r6
 8009486:	5dc7      	ldrb	r7, [r0, r7]
 8009488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800948c:	4637      	mov	r7, r6
 800948e:	42bb      	cmp	r3, r7
 8009490:	460e      	mov	r6, r1
 8009492:	d9f4      	bls.n	800947e <_printf_i+0x116>
 8009494:	2b08      	cmp	r3, #8
 8009496:	d10b      	bne.n	80094b0 <_printf_i+0x148>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	07de      	lsls	r6, r3, #31
 800949c:	d508      	bpl.n	80094b0 <_printf_i+0x148>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	4299      	cmp	r1, r3
 80094a4:	bfde      	ittt	le
 80094a6:	2330      	movle	r3, #48	; 0x30
 80094a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094b0:	1b52      	subs	r2, r2, r5
 80094b2:	6122      	str	r2, [r4, #16]
 80094b4:	f8cd a000 	str.w	sl, [sp]
 80094b8:	464b      	mov	r3, r9
 80094ba:	aa03      	add	r2, sp, #12
 80094bc:	4621      	mov	r1, r4
 80094be:	4640      	mov	r0, r8
 80094c0:	f7ff fee4 	bl	800928c <_printf_common>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d14a      	bne.n	800955e <_printf_i+0x1f6>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094cc:	b004      	add	sp, #16
 80094ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	f043 0320 	orr.w	r3, r3, #32
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	4833      	ldr	r0, [pc, #204]	; (80095a8 <_printf_i+0x240>)
 80094dc:	2778      	movs	r7, #120	; 0x78
 80094de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	6829      	ldr	r1, [r5, #0]
 80094e6:	061f      	lsls	r7, r3, #24
 80094e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094ec:	d402      	bmi.n	80094f4 <_printf_i+0x18c>
 80094ee:	065f      	lsls	r7, r3, #25
 80094f0:	bf48      	it	mi
 80094f2:	b2b6      	uxthmi	r6, r6
 80094f4:	07df      	lsls	r7, r3, #31
 80094f6:	bf48      	it	mi
 80094f8:	f043 0320 	orrmi.w	r3, r3, #32
 80094fc:	6029      	str	r1, [r5, #0]
 80094fe:	bf48      	it	mi
 8009500:	6023      	strmi	r3, [r4, #0]
 8009502:	b91e      	cbnz	r6, 800950c <_printf_i+0x1a4>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	f023 0320 	bic.w	r3, r3, #32
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	2310      	movs	r3, #16
 800950e:	e7a7      	b.n	8009460 <_printf_i+0xf8>
 8009510:	4824      	ldr	r0, [pc, #144]	; (80095a4 <_printf_i+0x23c>)
 8009512:	e7e4      	b.n	80094de <_printf_i+0x176>
 8009514:	4615      	mov	r5, r2
 8009516:	e7bd      	b.n	8009494 <_printf_i+0x12c>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	6826      	ldr	r6, [r4, #0]
 800951c:	6961      	ldr	r1, [r4, #20]
 800951e:	1d18      	adds	r0, r3, #4
 8009520:	6028      	str	r0, [r5, #0]
 8009522:	0635      	lsls	r5, r6, #24
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	d501      	bpl.n	800952c <_printf_i+0x1c4>
 8009528:	6019      	str	r1, [r3, #0]
 800952a:	e002      	b.n	8009532 <_printf_i+0x1ca>
 800952c:	0670      	lsls	r0, r6, #25
 800952e:	d5fb      	bpl.n	8009528 <_printf_i+0x1c0>
 8009530:	8019      	strh	r1, [r3, #0]
 8009532:	2300      	movs	r3, #0
 8009534:	6123      	str	r3, [r4, #16]
 8009536:	4615      	mov	r5, r2
 8009538:	e7bc      	b.n	80094b4 <_printf_i+0x14c>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	1d1a      	adds	r2, r3, #4
 800953e:	602a      	str	r2, [r5, #0]
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	2100      	movs	r1, #0
 8009546:	4628      	mov	r0, r5
 8009548:	f7f6 fe4a 	bl	80001e0 <memchr>
 800954c:	b108      	cbz	r0, 8009552 <_printf_i+0x1ea>
 800954e:	1b40      	subs	r0, r0, r5
 8009550:	6060      	str	r0, [r4, #4]
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	6123      	str	r3, [r4, #16]
 8009556:	2300      	movs	r3, #0
 8009558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800955c:	e7aa      	b.n	80094b4 <_printf_i+0x14c>
 800955e:	6923      	ldr	r3, [r4, #16]
 8009560:	462a      	mov	r2, r5
 8009562:	4649      	mov	r1, r9
 8009564:	4640      	mov	r0, r8
 8009566:	47d0      	blx	sl
 8009568:	3001      	adds	r0, #1
 800956a:	d0ad      	beq.n	80094c8 <_printf_i+0x160>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	079b      	lsls	r3, r3, #30
 8009570:	d413      	bmi.n	800959a <_printf_i+0x232>
 8009572:	68e0      	ldr	r0, [r4, #12]
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	4298      	cmp	r0, r3
 8009578:	bfb8      	it	lt
 800957a:	4618      	movlt	r0, r3
 800957c:	e7a6      	b.n	80094cc <_printf_i+0x164>
 800957e:	2301      	movs	r3, #1
 8009580:	4632      	mov	r2, r6
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	47d0      	blx	sl
 8009588:	3001      	adds	r0, #1
 800958a:	d09d      	beq.n	80094c8 <_printf_i+0x160>
 800958c:	3501      	adds	r5, #1
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	9903      	ldr	r1, [sp, #12]
 8009592:	1a5b      	subs	r3, r3, r1
 8009594:	42ab      	cmp	r3, r5
 8009596:	dcf2      	bgt.n	800957e <_printf_i+0x216>
 8009598:	e7eb      	b.n	8009572 <_printf_i+0x20a>
 800959a:	2500      	movs	r5, #0
 800959c:	f104 0619 	add.w	r6, r4, #25
 80095a0:	e7f5      	b.n	800958e <_printf_i+0x226>
 80095a2:	bf00      	nop
 80095a4:	0800aa51 	.word	0x0800aa51
 80095a8:	0800aa62 	.word	0x0800aa62

080095ac <memmove>:
 80095ac:	4288      	cmp	r0, r1
 80095ae:	b510      	push	{r4, lr}
 80095b0:	eb01 0402 	add.w	r4, r1, r2
 80095b4:	d902      	bls.n	80095bc <memmove+0x10>
 80095b6:	4284      	cmp	r4, r0
 80095b8:	4623      	mov	r3, r4
 80095ba:	d807      	bhi.n	80095cc <memmove+0x20>
 80095bc:	1e43      	subs	r3, r0, #1
 80095be:	42a1      	cmp	r1, r4
 80095c0:	d008      	beq.n	80095d4 <memmove+0x28>
 80095c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ca:	e7f8      	b.n	80095be <memmove+0x12>
 80095cc:	4402      	add	r2, r0
 80095ce:	4601      	mov	r1, r0
 80095d0:	428a      	cmp	r2, r1
 80095d2:	d100      	bne.n	80095d6 <memmove+0x2a>
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095de:	e7f7      	b.n	80095d0 <memmove+0x24>

080095e0 <_sbrk_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d06      	ldr	r5, [pc, #24]	; (80095fc <_sbrk_r+0x1c>)
 80095e4:	2300      	movs	r3, #0
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	602b      	str	r3, [r5, #0]
 80095ec:	f7f9 fa64 	bl	8002ab8 <_sbrk>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_sbrk_r+0x1a>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_sbrk_r+0x1a>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	200027fc 	.word	0x200027fc

08009600 <memcpy>:
 8009600:	440a      	add	r2, r1
 8009602:	4291      	cmp	r1, r2
 8009604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009608:	d100      	bne.n	800960c <memcpy+0xc>
 800960a:	4770      	bx	lr
 800960c:	b510      	push	{r4, lr}
 800960e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009616:	4291      	cmp	r1, r2
 8009618:	d1f9      	bne.n	800960e <memcpy+0xe>
 800961a:	bd10      	pop	{r4, pc}

0800961c <_realloc_r>:
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	4680      	mov	r8, r0
 8009622:	4614      	mov	r4, r2
 8009624:	460e      	mov	r6, r1
 8009626:	b921      	cbnz	r1, 8009632 <_realloc_r+0x16>
 8009628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4611      	mov	r1, r2
 800962e:	f7ff bc49 	b.w	8008ec4 <_malloc_r>
 8009632:	b92a      	cbnz	r2, 8009640 <_realloc_r+0x24>
 8009634:	f7ff fbda 	bl	8008dec <_free_r>
 8009638:	4625      	mov	r5, r4
 800963a:	4628      	mov	r0, r5
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	f000 f81b 	bl	800967a <_malloc_usable_size_r>
 8009644:	4284      	cmp	r4, r0
 8009646:	4607      	mov	r7, r0
 8009648:	d802      	bhi.n	8009650 <_realloc_r+0x34>
 800964a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800964e:	d812      	bhi.n	8009676 <_realloc_r+0x5a>
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff fc36 	bl	8008ec4 <_malloc_r>
 8009658:	4605      	mov	r5, r0
 800965a:	2800      	cmp	r0, #0
 800965c:	d0ed      	beq.n	800963a <_realloc_r+0x1e>
 800965e:	42bc      	cmp	r4, r7
 8009660:	4622      	mov	r2, r4
 8009662:	4631      	mov	r1, r6
 8009664:	bf28      	it	cs
 8009666:	463a      	movcs	r2, r7
 8009668:	f7ff ffca 	bl	8009600 <memcpy>
 800966c:	4631      	mov	r1, r6
 800966e:	4640      	mov	r0, r8
 8009670:	f7ff fbbc 	bl	8008dec <_free_r>
 8009674:	e7e1      	b.n	800963a <_realloc_r+0x1e>
 8009676:	4635      	mov	r5, r6
 8009678:	e7df      	b.n	800963a <_realloc_r+0x1e>

0800967a <_malloc_usable_size_r>:
 800967a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967e:	1f18      	subs	r0, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfbc      	itt	lt
 8009684:	580b      	ldrlt	r3, [r1, r0]
 8009686:	18c0      	addlt	r0, r0, r3
 8009688:	4770      	bx	lr
	...

0800968c <pow>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	ed2d 8b02 	vpush	{d8}
 8009692:	eeb0 8a40 	vmov.f32	s16, s0
 8009696:	eef0 8a60 	vmov.f32	s17, s1
 800969a:	ec55 4b11 	vmov	r4, r5, d1
 800969e:	f000 f953 	bl	8009948 <__ieee754_pow>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	ec57 6b10 	vmov	r6, r7, d0
 80096ae:	f7f7 fa3d 	bl	8000b2c <__aeabi_dcmpun>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d13b      	bne.n	800972e <pow+0xa2>
 80096b6:	ec51 0b18 	vmov	r0, r1, d8
 80096ba:	2200      	movs	r2, #0
 80096bc:	2300      	movs	r3, #0
 80096be:	f7f7 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80096c2:	b1b8      	cbz	r0, 80096f4 <pow+0x68>
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f7 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d146      	bne.n	8009762 <pow+0xd6>
 80096d4:	ec45 4b10 	vmov	d0, r4, r5
 80096d8:	f000 f851 	bl	800977e <finite>
 80096dc:	b338      	cbz	r0, 800972e <pow+0xa2>
 80096de:	2200      	movs	r2, #0
 80096e0:	2300      	movs	r3, #0
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f7 f9f9 	bl	8000adc <__aeabi_dcmplt>
 80096ea:	b300      	cbz	r0, 800972e <pow+0xa2>
 80096ec:	f7ff fb52 	bl	8008d94 <__errno>
 80096f0:	2322      	movs	r3, #34	; 0x22
 80096f2:	e01b      	b.n	800972c <pow+0xa0>
 80096f4:	ec47 6b10 	vmov	d0, r6, r7
 80096f8:	f000 f841 	bl	800977e <finite>
 80096fc:	b9e0      	cbnz	r0, 8009738 <pow+0xac>
 80096fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009702:	eef0 0a68 	vmov.f32	s1, s17
 8009706:	f000 f83a 	bl	800977e <finite>
 800970a:	b1a8      	cbz	r0, 8009738 <pow+0xac>
 800970c:	ec45 4b10 	vmov	d0, r4, r5
 8009710:	f000 f835 	bl	800977e <finite>
 8009714:	b180      	cbz	r0, 8009738 <pow+0xac>
 8009716:	4632      	mov	r2, r6
 8009718:	463b      	mov	r3, r7
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	f7f7 fa05 	bl	8000b2c <__aeabi_dcmpun>
 8009722:	2800      	cmp	r0, #0
 8009724:	d0e2      	beq.n	80096ec <pow+0x60>
 8009726:	f7ff fb35 	bl	8008d94 <__errno>
 800972a:	2321      	movs	r3, #33	; 0x21
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	ecbd 8b02 	vpop	{d8}
 8009732:	ec47 6b10 	vmov	d0, r6, r7
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	2200      	movs	r2, #0
 800973a:	2300      	movs	r3, #0
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f7 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009744:	2800      	cmp	r0, #0
 8009746:	d0f2      	beq.n	800972e <pow+0xa2>
 8009748:	eeb0 0a48 	vmov.f32	s0, s16
 800974c:	eef0 0a68 	vmov.f32	s1, s17
 8009750:	f000 f815 	bl	800977e <finite>
 8009754:	2800      	cmp	r0, #0
 8009756:	d0ea      	beq.n	800972e <pow+0xa2>
 8009758:	ec45 4b10 	vmov	d0, r4, r5
 800975c:	f000 f80f 	bl	800977e <finite>
 8009760:	e7c3      	b.n	80096ea <pow+0x5e>
 8009762:	4f01      	ldr	r7, [pc, #4]	; (8009768 <pow+0xdc>)
 8009764:	2600      	movs	r6, #0
 8009766:	e7e2      	b.n	800972e <pow+0xa2>
 8009768:	3ff00000 	.word	0x3ff00000

0800976c <fabs>:
 800976c:	ec51 0b10 	vmov	r0, r1, d0
 8009770:	ee10 2a10 	vmov	r2, s0
 8009774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009778:	ec43 2b10 	vmov	d0, r2, r3
 800977c:	4770      	bx	lr

0800977e <finite>:
 800977e:	b082      	sub	sp, #8
 8009780:	ed8d 0b00 	vstr	d0, [sp]
 8009784:	9801      	ldr	r0, [sp, #4]
 8009786:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800978a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800978e:	0fc0      	lsrs	r0, r0, #31
 8009790:	b002      	add	sp, #8
 8009792:	4770      	bx	lr

08009794 <__ieee754_sqrt>:
 8009794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	ec55 4b10 	vmov	r4, r5, d0
 800979c:	4e67      	ldr	r6, [pc, #412]	; (800993c <__ieee754_sqrt+0x1a8>)
 800979e:	43ae      	bics	r6, r5
 80097a0:	ee10 0a10 	vmov	r0, s0
 80097a4:	ee10 2a10 	vmov	r2, s0
 80097a8:	4629      	mov	r1, r5
 80097aa:	462b      	mov	r3, r5
 80097ac:	d10d      	bne.n	80097ca <__ieee754_sqrt+0x36>
 80097ae:	f7f6 ff23 	bl	80005f8 <__aeabi_dmul>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4620      	mov	r0, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7f6 fd67 	bl	800028c <__adddf3>
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	ec45 4b10 	vmov	d0, r4, r5
 80097c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	dc0b      	bgt.n	80097e6 <__ieee754_sqrt+0x52>
 80097ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097d2:	4326      	orrs	r6, r4
 80097d4:	d0f5      	beq.n	80097c2 <__ieee754_sqrt+0x2e>
 80097d6:	b135      	cbz	r5, 80097e6 <__ieee754_sqrt+0x52>
 80097d8:	f7f6 fd56 	bl	8000288 <__aeabi_dsub>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	f7f7 f834 	bl	800084c <__aeabi_ddiv>
 80097e4:	e7eb      	b.n	80097be <__ieee754_sqrt+0x2a>
 80097e6:	1509      	asrs	r1, r1, #20
 80097e8:	f000 808d 	beq.w	8009906 <__ieee754_sqrt+0x172>
 80097ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80097f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097f8:	07c9      	lsls	r1, r1, #31
 80097fa:	bf5c      	itt	pl
 80097fc:	005b      	lslpl	r3, r3, #1
 80097fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009802:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009806:	bf58      	it	pl
 8009808:	0052      	lslpl	r2, r2, #1
 800980a:	2500      	movs	r5, #0
 800980c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009810:	1076      	asrs	r6, r6, #1
 8009812:	0052      	lsls	r2, r2, #1
 8009814:	f04f 0e16 	mov.w	lr, #22
 8009818:	46ac      	mov	ip, r5
 800981a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800981e:	eb0c 0001 	add.w	r0, ip, r1
 8009822:	4298      	cmp	r0, r3
 8009824:	bfde      	ittt	le
 8009826:	1a1b      	suble	r3, r3, r0
 8009828:	eb00 0c01 	addle.w	ip, r0, r1
 800982c:	186d      	addle	r5, r5, r1
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	f1be 0e01 	subs.w	lr, lr, #1
 8009834:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009838:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800983c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009840:	d1ed      	bne.n	800981e <__ieee754_sqrt+0x8a>
 8009842:	4674      	mov	r4, lr
 8009844:	2720      	movs	r7, #32
 8009846:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800984a:	4563      	cmp	r3, ip
 800984c:	eb01 000e 	add.w	r0, r1, lr
 8009850:	dc02      	bgt.n	8009858 <__ieee754_sqrt+0xc4>
 8009852:	d113      	bne.n	800987c <__ieee754_sqrt+0xe8>
 8009854:	4290      	cmp	r0, r2
 8009856:	d811      	bhi.n	800987c <__ieee754_sqrt+0xe8>
 8009858:	2800      	cmp	r0, #0
 800985a:	eb00 0e01 	add.w	lr, r0, r1
 800985e:	da57      	bge.n	8009910 <__ieee754_sqrt+0x17c>
 8009860:	f1be 0f00 	cmp.w	lr, #0
 8009864:	db54      	blt.n	8009910 <__ieee754_sqrt+0x17c>
 8009866:	f10c 0801 	add.w	r8, ip, #1
 800986a:	eba3 030c 	sub.w	r3, r3, ip
 800986e:	4290      	cmp	r0, r2
 8009870:	bf88      	it	hi
 8009872:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009876:	1a12      	subs	r2, r2, r0
 8009878:	440c      	add	r4, r1
 800987a:	46c4      	mov	ip, r8
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	3f01      	subs	r7, #1
 8009880:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009884:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009888:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800988c:	d1dd      	bne.n	800984a <__ieee754_sqrt+0xb6>
 800988e:	4313      	orrs	r3, r2
 8009890:	d01b      	beq.n	80098ca <__ieee754_sqrt+0x136>
 8009892:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009940 <__ieee754_sqrt+0x1ac>
 8009896:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009944 <__ieee754_sqrt+0x1b0>
 800989a:	e9da 0100 	ldrd	r0, r1, [sl]
 800989e:	e9db 2300 	ldrd	r2, r3, [fp]
 80098a2:	f7f6 fcf1 	bl	8000288 <__aeabi_dsub>
 80098a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	4640      	mov	r0, r8
 80098b0:	4649      	mov	r1, r9
 80098b2:	f7f7 f91d 	bl	8000af0 <__aeabi_dcmple>
 80098b6:	b140      	cbz	r0, 80098ca <__ieee754_sqrt+0x136>
 80098b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80098bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80098c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c4:	d126      	bne.n	8009914 <__ieee754_sqrt+0x180>
 80098c6:	3501      	adds	r5, #1
 80098c8:	463c      	mov	r4, r7
 80098ca:	106a      	asrs	r2, r5, #1
 80098cc:	0863      	lsrs	r3, r4, #1
 80098ce:	07e9      	lsls	r1, r5, #31
 80098d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80098d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80098d8:	bf48      	it	mi
 80098da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80098de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80098e2:	461c      	mov	r4, r3
 80098e4:	e76d      	b.n	80097c2 <__ieee754_sqrt+0x2e>
 80098e6:	0ad3      	lsrs	r3, r2, #11
 80098e8:	3815      	subs	r0, #21
 80098ea:	0552      	lsls	r2, r2, #21
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0fa      	beq.n	80098e6 <__ieee754_sqrt+0x152>
 80098f0:	02dc      	lsls	r4, r3, #11
 80098f2:	d50a      	bpl.n	800990a <__ieee754_sqrt+0x176>
 80098f4:	f1c1 0420 	rsb	r4, r1, #32
 80098f8:	fa22 f404 	lsr.w	r4, r2, r4
 80098fc:	1e4d      	subs	r5, r1, #1
 80098fe:	408a      	lsls	r2, r1
 8009900:	4323      	orrs	r3, r4
 8009902:	1b41      	subs	r1, r0, r5
 8009904:	e772      	b.n	80097ec <__ieee754_sqrt+0x58>
 8009906:	4608      	mov	r0, r1
 8009908:	e7f0      	b.n	80098ec <__ieee754_sqrt+0x158>
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	3101      	adds	r1, #1
 800990e:	e7ef      	b.n	80098f0 <__ieee754_sqrt+0x15c>
 8009910:	46e0      	mov	r8, ip
 8009912:	e7aa      	b.n	800986a <__ieee754_sqrt+0xd6>
 8009914:	f7f6 fcba 	bl	800028c <__adddf3>
 8009918:	e9da 8900 	ldrd	r8, r9, [sl]
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f7 f8da 	bl	8000adc <__aeabi_dcmplt>
 8009928:	b120      	cbz	r0, 8009934 <__ieee754_sqrt+0x1a0>
 800992a:	1ca0      	adds	r0, r4, #2
 800992c:	bf08      	it	eq
 800992e:	3501      	addeq	r5, #1
 8009930:	3402      	adds	r4, #2
 8009932:	e7ca      	b.n	80098ca <__ieee754_sqrt+0x136>
 8009934:	3401      	adds	r4, #1
 8009936:	f024 0401 	bic.w	r4, r4, #1
 800993a:	e7c6      	b.n	80098ca <__ieee754_sqrt+0x136>
 800993c:	7ff00000 	.word	0x7ff00000
 8009940:	20000078 	.word	0x20000078
 8009944:	20000080 	.word	0x20000080

08009948 <__ieee754_pow>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	ed2d 8b06 	vpush	{d8-d10}
 8009950:	b089      	sub	sp, #36	; 0x24
 8009952:	ed8d 1b00 	vstr	d1, [sp]
 8009956:	e9dd 2900 	ldrd	r2, r9, [sp]
 800995a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800995e:	ea58 0102 	orrs.w	r1, r8, r2
 8009962:	ec57 6b10 	vmov	r6, r7, d0
 8009966:	d115      	bne.n	8009994 <__ieee754_pow+0x4c>
 8009968:	19b3      	adds	r3, r6, r6
 800996a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800996e:	4152      	adcs	r2, r2
 8009970:	4299      	cmp	r1, r3
 8009972:	4b89      	ldr	r3, [pc, #548]	; (8009b98 <__ieee754_pow+0x250>)
 8009974:	4193      	sbcs	r3, r2
 8009976:	f080 84d1 	bcs.w	800a31c <__ieee754_pow+0x9d4>
 800997a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fc83 	bl	800028c <__adddf3>
 8009986:	ec41 0b10 	vmov	d0, r0, r1
 800998a:	b009      	add	sp, #36	; 0x24
 800998c:	ecbd 8b06 	vpop	{d8-d10}
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	4b81      	ldr	r3, [pc, #516]	; (8009b9c <__ieee754_pow+0x254>)
 8009996:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800999a:	429c      	cmp	r4, r3
 800999c:	ee10 aa10 	vmov	sl, s0
 80099a0:	463d      	mov	r5, r7
 80099a2:	dc06      	bgt.n	80099b2 <__ieee754_pow+0x6a>
 80099a4:	d101      	bne.n	80099aa <__ieee754_pow+0x62>
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	d1e7      	bne.n	800997a <__ieee754_pow+0x32>
 80099aa:	4598      	cmp	r8, r3
 80099ac:	dc01      	bgt.n	80099b2 <__ieee754_pow+0x6a>
 80099ae:	d10f      	bne.n	80099d0 <__ieee754_pow+0x88>
 80099b0:	b172      	cbz	r2, 80099d0 <__ieee754_pow+0x88>
 80099b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80099b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80099ba:	ea55 050a 	orrs.w	r5, r5, sl
 80099be:	d1dc      	bne.n	800997a <__ieee754_pow+0x32>
 80099c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099c4:	18db      	adds	r3, r3, r3
 80099c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80099ca:	4152      	adcs	r2, r2
 80099cc:	429d      	cmp	r5, r3
 80099ce:	e7d0      	b.n	8009972 <__ieee754_pow+0x2a>
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	da3b      	bge.n	8009a4c <__ieee754_pow+0x104>
 80099d4:	4b72      	ldr	r3, [pc, #456]	; (8009ba0 <__ieee754_pow+0x258>)
 80099d6:	4598      	cmp	r8, r3
 80099d8:	dc51      	bgt.n	8009a7e <__ieee754_pow+0x136>
 80099da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80099de:	4598      	cmp	r8, r3
 80099e0:	f340 84ab 	ble.w	800a33a <__ieee754_pow+0x9f2>
 80099e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80099e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099ec:	2b14      	cmp	r3, #20
 80099ee:	dd0f      	ble.n	8009a10 <__ieee754_pow+0xc8>
 80099f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80099f4:	fa22 f103 	lsr.w	r1, r2, r3
 80099f8:	fa01 f303 	lsl.w	r3, r1, r3
 80099fc:	4293      	cmp	r3, r2
 80099fe:	f040 849c 	bne.w	800a33a <__ieee754_pow+0x9f2>
 8009a02:	f001 0101 	and.w	r1, r1, #1
 8009a06:	f1c1 0302 	rsb	r3, r1, #2
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	b182      	cbz	r2, 8009a30 <__ieee754_pow+0xe8>
 8009a0e:	e05f      	b.n	8009ad0 <__ieee754_pow+0x188>
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	d15b      	bne.n	8009acc <__ieee754_pow+0x184>
 8009a14:	f1c3 0314 	rsb	r3, r3, #20
 8009a18:	fa48 f103 	asr.w	r1, r8, r3
 8009a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a20:	4543      	cmp	r3, r8
 8009a22:	f040 8487 	bne.w	800a334 <__ieee754_pow+0x9ec>
 8009a26:	f001 0101 	and.w	r1, r1, #1
 8009a2a:	f1c1 0302 	rsb	r3, r1, #2
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	4b5c      	ldr	r3, [pc, #368]	; (8009ba4 <__ieee754_pow+0x25c>)
 8009a32:	4598      	cmp	r8, r3
 8009a34:	d132      	bne.n	8009a9c <__ieee754_pow+0x154>
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	f280 8477 	bge.w	800a32c <__ieee754_pow+0x9e4>
 8009a3e:	4959      	ldr	r1, [pc, #356]	; (8009ba4 <__ieee754_pow+0x25c>)
 8009a40:	4632      	mov	r2, r6
 8009a42:	463b      	mov	r3, r7
 8009a44:	2000      	movs	r0, #0
 8009a46:	f7f6 ff01 	bl	800084c <__aeabi_ddiv>
 8009a4a:	e79c      	b.n	8009986 <__ieee754_pow+0x3e>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	d13d      	bne.n	8009ad0 <__ieee754_pow+0x188>
 8009a54:	4b51      	ldr	r3, [pc, #324]	; (8009b9c <__ieee754_pow+0x254>)
 8009a56:	4598      	cmp	r8, r3
 8009a58:	d1ea      	bne.n	8009a30 <__ieee754_pow+0xe8>
 8009a5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a62:	ea53 030a 	orrs.w	r3, r3, sl
 8009a66:	f000 8459 	beq.w	800a31c <__ieee754_pow+0x9d4>
 8009a6a:	4b4f      	ldr	r3, [pc, #316]	; (8009ba8 <__ieee754_pow+0x260>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	dd08      	ble.n	8009a82 <__ieee754_pow+0x13a>
 8009a70:	f1b9 0f00 	cmp.w	r9, #0
 8009a74:	f2c0 8456 	blt.w	800a324 <__ieee754_pow+0x9dc>
 8009a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a7c:	e783      	b.n	8009986 <__ieee754_pow+0x3e>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e7e5      	b.n	8009a4e <__ieee754_pow+0x106>
 8009a82:	f1b9 0f00 	cmp.w	r9, #0
 8009a86:	f04f 0000 	mov.w	r0, #0
 8009a8a:	f04f 0100 	mov.w	r1, #0
 8009a8e:	f6bf af7a 	bge.w	8009986 <__ieee754_pow+0x3e>
 8009a92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a9a:	e774      	b.n	8009986 <__ieee754_pow+0x3e>
 8009a9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009aa0:	d106      	bne.n	8009ab0 <__ieee754_pow+0x168>
 8009aa2:	4632      	mov	r2, r6
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	f7f6 fda5 	bl	80005f8 <__aeabi_dmul>
 8009aae:	e76a      	b.n	8009986 <__ieee754_pow+0x3e>
 8009ab0:	4b3e      	ldr	r3, [pc, #248]	; (8009bac <__ieee754_pow+0x264>)
 8009ab2:	4599      	cmp	r9, r3
 8009ab4:	d10c      	bne.n	8009ad0 <__ieee754_pow+0x188>
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	db0a      	blt.n	8009ad0 <__ieee754_pow+0x188>
 8009aba:	ec47 6b10 	vmov	d0, r6, r7
 8009abe:	b009      	add	sp, #36	; 0x24
 8009ac0:	ecbd 8b06 	vpop	{d8-d10}
 8009ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	f7ff be64 	b.w	8009794 <__ieee754_sqrt>
 8009acc:	2300      	movs	r3, #0
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	ec47 6b10 	vmov	d0, r6, r7
 8009ad4:	f7ff fe4a 	bl	800976c <fabs>
 8009ad8:	ec51 0b10 	vmov	r0, r1, d0
 8009adc:	f1ba 0f00 	cmp.w	sl, #0
 8009ae0:	d129      	bne.n	8009b36 <__ieee754_pow+0x1ee>
 8009ae2:	b124      	cbz	r4, 8009aee <__ieee754_pow+0x1a6>
 8009ae4:	4b2f      	ldr	r3, [pc, #188]	; (8009ba4 <__ieee754_pow+0x25c>)
 8009ae6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d123      	bne.n	8009b36 <__ieee754_pow+0x1ee>
 8009aee:	f1b9 0f00 	cmp.w	r9, #0
 8009af2:	da05      	bge.n	8009b00 <__ieee754_pow+0x1b8>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	2000      	movs	r0, #0
 8009afa:	492a      	ldr	r1, [pc, #168]	; (8009ba4 <__ieee754_pow+0x25c>)
 8009afc:	f7f6 fea6 	bl	800084c <__aeabi_ddiv>
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	f6bf af40 	bge.w	8009986 <__ieee754_pow+0x3e>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b10:	431c      	orrs	r4, r3
 8009b12:	d108      	bne.n	8009b26 <__ieee754_pow+0x1de>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f7f6 fbb4 	bl	8000288 <__aeabi_dsub>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	e78f      	b.n	8009a46 <__ieee754_pow+0xfe>
 8009b26:	9b04      	ldr	r3, [sp, #16]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	f47f af2c 	bne.w	8009986 <__ieee754_pow+0x3e>
 8009b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b32:	4619      	mov	r1, r3
 8009b34:	e727      	b.n	8009986 <__ieee754_pow+0x3e>
 8009b36:	0feb      	lsrs	r3, r5, #31
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	9306      	str	r3, [sp, #24]
 8009b3c:	9a06      	ldr	r2, [sp, #24]
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d102      	bne.n	8009b4a <__ieee754_pow+0x202>
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	e7e6      	b.n	8009b18 <__ieee754_pow+0x1d0>
 8009b4a:	4b19      	ldr	r3, [pc, #100]	; (8009bb0 <__ieee754_pow+0x268>)
 8009b4c:	4598      	cmp	r8, r3
 8009b4e:	f340 80fb 	ble.w	8009d48 <__ieee754_pow+0x400>
 8009b52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b56:	4598      	cmp	r8, r3
 8009b58:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <__ieee754_pow+0x260>)
 8009b5a:	dd0c      	ble.n	8009b76 <__ieee754_pow+0x22e>
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	dc0f      	bgt.n	8009b80 <__ieee754_pow+0x238>
 8009b60:	f1b9 0f00 	cmp.w	r9, #0
 8009b64:	da0f      	bge.n	8009b86 <__ieee754_pow+0x23e>
 8009b66:	2000      	movs	r0, #0
 8009b68:	b009      	add	sp, #36	; 0x24
 8009b6a:	ecbd 8b06 	vpop	{d8-d10}
 8009b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b72:	f000 bcba 	b.w	800a4ea <__math_oflow>
 8009b76:	429c      	cmp	r4, r3
 8009b78:	dbf2      	blt.n	8009b60 <__ieee754_pow+0x218>
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <__ieee754_pow+0x25c>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	dd19      	ble.n	8009bb4 <__ieee754_pow+0x26c>
 8009b80:	f1b9 0f00 	cmp.w	r9, #0
 8009b84:	dcef      	bgt.n	8009b66 <__ieee754_pow+0x21e>
 8009b86:	2000      	movs	r0, #0
 8009b88:	b009      	add	sp, #36	; 0x24
 8009b8a:	ecbd 8b06 	vpop	{d8-d10}
 8009b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b92:	f000 bca1 	b.w	800a4d8 <__math_uflow>
 8009b96:	bf00      	nop
 8009b98:	fff00000 	.word	0xfff00000
 8009b9c:	7ff00000 	.word	0x7ff00000
 8009ba0:	433fffff 	.word	0x433fffff
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	3fefffff 	.word	0x3fefffff
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	41e00000 	.word	0x41e00000
 8009bb4:	4b60      	ldr	r3, [pc, #384]	; (8009d38 <__ieee754_pow+0x3f0>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f7f6 fb66 	bl	8000288 <__aeabi_dsub>
 8009bbc:	a354      	add	r3, pc, #336	; (adr r3, 8009d10 <__ieee754_pow+0x3c8>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	460d      	mov	r5, r1
 8009bc6:	f7f6 fd17 	bl	80005f8 <__aeabi_dmul>
 8009bca:	a353      	add	r3, pc, #332	; (adr r3, 8009d18 <__ieee754_pow+0x3d0>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4b57      	ldr	r3, [pc, #348]	; (8009d3c <__ieee754_pow+0x3f4>)
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	2200      	movs	r2, #0
 8009be4:	4620      	mov	r0, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	a14b      	add	r1, pc, #300	; (adr r1, 8009d20 <__ieee754_pow+0x3d8>)
 8009bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf6:	f7f6 fb47 	bl	8000288 <__aeabi_dsub>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fcfb 	bl	80005f8 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	2000      	movs	r0, #0
 8009c08:	494d      	ldr	r1, [pc, #308]	; (8009d40 <__ieee754_pow+0x3f8>)
 8009c0a:	f7f6 fb3d 	bl	8000288 <__aeabi_dsub>
 8009c0e:	4622      	mov	r2, r4
 8009c10:	4680      	mov	r8, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	462b      	mov	r3, r5
 8009c16:	4620      	mov	r0, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fce7 	bl	80005f8 <__aeabi_dmul>
 8009c2a:	a33f      	add	r3, pc, #252	; (adr r3, 8009d28 <__ieee754_pow+0x3e0>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4650      	mov	r0, sl
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	f7f6 fb24 	bl	8000288 <__aeabi_dsub>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4680      	mov	r8, r0
 8009c46:	4689      	mov	r9, r1
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 fb1e 	bl	800028c <__adddf3>
 8009c50:	2000      	movs	r0, #0
 8009c52:	4632      	mov	r2, r6
 8009c54:	463b      	mov	r3, r7
 8009c56:	4604      	mov	r4, r0
 8009c58:	460d      	mov	r5, r1
 8009c5a:	f7f6 fb15 	bl	8000288 <__aeabi_dsub>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fb0f 	bl	8000288 <__aeabi_dsub>
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	4313      	orrs	r3, r2
 8009c72:	4682      	mov	sl, r0
 8009c74:	468b      	mov	fp, r1
 8009c76:	f040 81e7 	bne.w	800a048 <__ieee754_pow+0x700>
 8009c7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009d30 <__ieee754_pow+0x3e8>
 8009c7e:	eeb0 8a47 	vmov.f32	s16, s14
 8009c82:	eef0 8a67 	vmov.f32	s17, s15
 8009c86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	463b      	mov	r3, r7
 8009c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c94:	f7f6 faf8 	bl	8000288 <__aeabi_dsub>
 8009c98:	4622      	mov	r2, r4
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	4689      	mov	r9, r1
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4659      	mov	r1, fp
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 fae8 	bl	800028c <__adddf3>
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	4689      	mov	r9, r1
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	f7f6 fad8 	bl	800028c <__adddf3>
 8009cdc:	4b19      	ldr	r3, [pc, #100]	; (8009d44 <__ieee754_pow+0x3fc>)
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	ec45 4b19 	vmov	d9, r4, r5
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	468b      	mov	fp, r1
 8009cea:	f340 82f0 	ble.w	800a2ce <__ieee754_pow+0x986>
 8009cee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009cf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009cf6:	4303      	orrs	r3, r0
 8009cf8:	f000 81e4 	beq.w	800a0c4 <__ieee754_pow+0x77c>
 8009cfc:	ec51 0b18 	vmov	r0, r1, d8
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	f7f6 feea 	bl	8000adc <__aeabi_dcmplt>
 8009d08:	3800      	subs	r0, #0
 8009d0a:	bf18      	it	ne
 8009d0c:	2001      	movne	r0, #1
 8009d0e:	e72b      	b.n	8009b68 <__ieee754_pow+0x220>
 8009d10:	60000000 	.word	0x60000000
 8009d14:	3ff71547 	.word	0x3ff71547
 8009d18:	f85ddf44 	.word	0xf85ddf44
 8009d1c:	3e54ae0b 	.word	0x3e54ae0b
 8009d20:	55555555 	.word	0x55555555
 8009d24:	3fd55555 	.word	0x3fd55555
 8009d28:	652b82fe 	.word	0x652b82fe
 8009d2c:	3ff71547 	.word	0x3ff71547
 8009d30:	00000000 	.word	0x00000000
 8009d34:	bff00000 	.word	0xbff00000
 8009d38:	3ff00000 	.word	0x3ff00000
 8009d3c:	3fd00000 	.word	0x3fd00000
 8009d40:	3fe00000 	.word	0x3fe00000
 8009d44:	408fffff 	.word	0x408fffff
 8009d48:	4bd5      	ldr	r3, [pc, #852]	; (800a0a0 <__ieee754_pow+0x758>)
 8009d4a:	402b      	ands	r3, r5
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	b92b      	cbnz	r3, 8009d5c <__ieee754_pow+0x414>
 8009d50:	4bd4      	ldr	r3, [pc, #848]	; (800a0a4 <__ieee754_pow+0x75c>)
 8009d52:	f7f6 fc51 	bl	80005f8 <__aeabi_dmul>
 8009d56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	1523      	asrs	r3, r4, #20
 8009d5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d62:	4413      	add	r3, r2
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	4bd0      	ldr	r3, [pc, #832]	; (800a0a8 <__ieee754_pow+0x760>)
 8009d68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d70:	429c      	cmp	r4, r3
 8009d72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d76:	dd08      	ble.n	8009d8a <__ieee754_pow+0x442>
 8009d78:	4bcc      	ldr	r3, [pc, #816]	; (800a0ac <__ieee754_pow+0x764>)
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	f340 8162 	ble.w	800a044 <__ieee754_pow+0x6fc>
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	3301      	adds	r3, #1
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009d8a:	2400      	movs	r4, #0
 8009d8c:	00e3      	lsls	r3, r4, #3
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	4bc7      	ldr	r3, [pc, #796]	; (800a0b0 <__ieee754_pow+0x768>)
 8009d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d96:	ed93 7b00 	vldr	d7, [r3]
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	ec53 2b17 	vmov	r2, r3, d7
 8009da0:	eeb0 9a47 	vmov.f32	s18, s14
 8009da4:	eef0 9a67 	vmov.f32	s19, s15
 8009da8:	4682      	mov	sl, r0
 8009daa:	f7f6 fa6d 	bl	8000288 <__aeabi_dsub>
 8009dae:	4652      	mov	r2, sl
 8009db0:	4606      	mov	r6, r0
 8009db2:	460f      	mov	r7, r1
 8009db4:	462b      	mov	r3, r5
 8009db6:	ec51 0b19 	vmov	r0, r1, d9
 8009dba:	f7f6 fa67 	bl	800028c <__adddf3>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	49bb      	ldr	r1, [pc, #748]	; (800a0b4 <__ieee754_pow+0x76c>)
 8009dc6:	f7f6 fd41 	bl	800084c <__aeabi_ddiv>
 8009dca:	ec41 0b1a 	vmov	d10, r0, r1
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009de0:	9302      	str	r3, [sp, #8]
 8009de2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009de6:	46ab      	mov	fp, r5
 8009de8:	106d      	asrs	r5, r5, #1
 8009dea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009dee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009df2:	ec41 0b18 	vmov	d8, r0, r1
 8009df6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4614      	mov	r4, r2
 8009e02:	461d      	mov	r5, r3
 8009e04:	f7f6 fbf8 	bl	80005f8 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fa3a 	bl	8000288 <__aeabi_dsub>
 8009e14:	ec53 2b19 	vmov	r2, r3, d9
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 fa32 	bl	8000288 <__aeabi_dsub>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4650      	mov	r0, sl
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	f7f6 fa2c 	bl	8000288 <__aeabi_dsub>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 fa22 	bl	8000288 <__aeabi_dsub>
 8009e44:	ec53 2b1a 	vmov	r2, r3, d10
 8009e48:	f7f6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8009e4c:	ec53 2b18 	vmov	r2, r3, d8
 8009e50:	ec41 0b19 	vmov	d9, r0, r1
 8009e54:	ec51 0b18 	vmov	r0, r1, d8
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	a37c      	add	r3, pc, #496	; (adr r3, 800a050 <__ieee754_pow+0x708>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	4604      	mov	r4, r0
 8009e64:	460d      	mov	r5, r1
 8009e66:	f7f6 fbc7 	bl	80005f8 <__aeabi_dmul>
 8009e6a:	a37b      	add	r3, pc, #492	; (adr r3, 800a058 <__ieee754_pow+0x710>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 fa0c 	bl	800028c <__adddf3>
 8009e74:	4622      	mov	r2, r4
 8009e76:	462b      	mov	r3, r5
 8009e78:	f7f6 fbbe 	bl	80005f8 <__aeabi_dmul>
 8009e7c:	a378      	add	r3, pc, #480	; (adr r3, 800a060 <__ieee754_pow+0x718>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	f7f6 fa03 	bl	800028c <__adddf3>
 8009e86:	4622      	mov	r2, r4
 8009e88:	462b      	mov	r3, r5
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	a376      	add	r3, pc, #472	; (adr r3, 800a068 <__ieee754_pow+0x720>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f7f6 f9fa 	bl	800028c <__adddf3>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fbac 	bl	80005f8 <__aeabi_dmul>
 8009ea0:	a373      	add	r3, pc, #460	; (adr r3, 800a070 <__ieee754_pow+0x728>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 f9f1 	bl	800028c <__adddf3>
 8009eaa:	4622      	mov	r2, r4
 8009eac:	462b      	mov	r3, r5
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	a371      	add	r3, pc, #452	; (adr r3, 800a078 <__ieee754_pow+0x730>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 f9e8 	bl	800028c <__adddf3>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f7f6 fb96 	bl	80005f8 <__aeabi_dmul>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	f7f6 fb90 	bl	80005f8 <__aeabi_dmul>
 8009ed8:	4642      	mov	r2, r8
 8009eda:	4604      	mov	r4, r0
 8009edc:	460d      	mov	r5, r1
 8009ede:	464b      	mov	r3, r9
 8009ee0:	ec51 0b18 	vmov	r0, r1, d8
 8009ee4:	f7f6 f9d2 	bl	800028c <__adddf3>
 8009ee8:	ec53 2b19 	vmov	r2, r3, d9
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	f7f6 f9ca 	bl	800028c <__adddf3>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	4682      	mov	sl, r0
 8009efc:	468b      	mov	fp, r1
 8009efe:	464b      	mov	r3, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	4b6b      	ldr	r3, [pc, #428]	; (800a0b8 <__ieee754_pow+0x770>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	f7f6 f9bc 	bl	800028c <__adddf3>
 8009f14:	4652      	mov	r2, sl
 8009f16:	465b      	mov	r3, fp
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	4b62      	ldr	r3, [pc, #392]	; (800a0b8 <__ieee754_pow+0x770>)
 8009f30:	4680      	mov	r8, r0
 8009f32:	4689      	mov	r9, r1
 8009f34:	2200      	movs	r2, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9a5 	bl	8000288 <__aeabi_dsub>
 8009f3e:	4632      	mov	r2, r6
 8009f40:	463b      	mov	r3, r7
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	f7f6 f99b 	bl	8000288 <__aeabi_dsub>
 8009f52:	ec53 2b18 	vmov	r2, r3, d8
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	462b      	mov	r3, r5
 8009f62:	ec51 0b19 	vmov	r0, r1, d9
 8009f66:	f7f6 fb47 	bl	80005f8 <__aeabi_dmul>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4630      	mov	r0, r6
 8009f70:	4639      	mov	r1, r7
 8009f72:	f7f6 f98b 	bl	800028c <__adddf3>
 8009f76:	4606      	mov	r6, r0
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	f7f6 f983 	bl	800028c <__adddf3>
 8009f86:	a33e      	add	r3, pc, #248	; (adr r3, 800a080 <__ieee754_pow+0x738>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	460d      	mov	r5, r1
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	4642      	mov	r2, r8
 8009f98:	ec41 0b18 	vmov	d8, r0, r1
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 f971 	bl	8000288 <__aeabi_dsub>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f7f6 f96b 	bl	8000288 <__aeabi_dsub>
 8009fb2:	a335      	add	r3, pc, #212	; (adr r3, 800a088 <__ieee754_pow+0x740>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 fb1e 	bl	80005f8 <__aeabi_dmul>
 8009fbc:	a334      	add	r3, pc, #208	; (adr r3, 800a090 <__ieee754_pow+0x748>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f959 	bl	800028c <__adddf3>
 8009fda:	9a07      	ldr	r2, [sp, #28]
 8009fdc:	4b37      	ldr	r3, [pc, #220]	; (800a0bc <__ieee754_pow+0x774>)
 8009fde:	4413      	add	r3, r2
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 f952 	bl	800028c <__adddf3>
 8009fe8:	4682      	mov	sl, r0
 8009fea:	9805      	ldr	r0, [sp, #20]
 8009fec:	468b      	mov	fp, r1
 8009fee:	f7f6 fa99 	bl	8000524 <__aeabi_i2d>
 8009ff2:	9a07      	ldr	r2, [sp, #28]
 8009ff4:	4b32      	ldr	r3, [pc, #200]	; (800a0c0 <__ieee754_pow+0x778>)
 8009ff6:	4413      	add	r3, r2
 8009ff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	4652      	mov	r2, sl
 800a002:	465b      	mov	r3, fp
 800a004:	ec51 0b18 	vmov	r0, r1, d8
 800a008:	f7f6 f940 	bl	800028c <__adddf3>
 800a00c:	4642      	mov	r2, r8
 800a00e:	464b      	mov	r3, r9
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	f7f6 f938 	bl	800028c <__adddf3>
 800a01c:	2000      	movs	r0, #0
 800a01e:	4632      	mov	r2, r6
 800a020:	463b      	mov	r3, r7
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
 800a026:	f7f6 f92f 	bl	8000288 <__aeabi_dsub>
 800a02a:	4642      	mov	r2, r8
 800a02c:	464b      	mov	r3, r9
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	ec53 2b18 	vmov	r2, r3, d8
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4650      	mov	r0, sl
 800a040:	4659      	mov	r1, fp
 800a042:	e610      	b.n	8009c66 <__ieee754_pow+0x31e>
 800a044:	2401      	movs	r4, #1
 800a046:	e6a1      	b.n	8009d8c <__ieee754_pow+0x444>
 800a048:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a098 <__ieee754_pow+0x750>
 800a04c:	e617      	b.n	8009c7e <__ieee754_pow+0x336>
 800a04e:	bf00      	nop
 800a050:	4a454eef 	.word	0x4a454eef
 800a054:	3fca7e28 	.word	0x3fca7e28
 800a058:	93c9db65 	.word	0x93c9db65
 800a05c:	3fcd864a 	.word	0x3fcd864a
 800a060:	a91d4101 	.word	0xa91d4101
 800a064:	3fd17460 	.word	0x3fd17460
 800a068:	518f264d 	.word	0x518f264d
 800a06c:	3fd55555 	.word	0x3fd55555
 800a070:	db6fabff 	.word	0xdb6fabff
 800a074:	3fdb6db6 	.word	0x3fdb6db6
 800a078:	33333303 	.word	0x33333303
 800a07c:	3fe33333 	.word	0x3fe33333
 800a080:	e0000000 	.word	0xe0000000
 800a084:	3feec709 	.word	0x3feec709
 800a088:	dc3a03fd 	.word	0xdc3a03fd
 800a08c:	3feec709 	.word	0x3feec709
 800a090:	145b01f5 	.word	0x145b01f5
 800a094:	be3e2fe0 	.word	0xbe3e2fe0
 800a098:	00000000 	.word	0x00000000
 800a09c:	3ff00000 	.word	0x3ff00000
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	43400000 	.word	0x43400000
 800a0a8:	0003988e 	.word	0x0003988e
 800a0ac:	000bb679 	.word	0x000bb679
 800a0b0:	0800aa78 	.word	0x0800aa78
 800a0b4:	3ff00000 	.word	0x3ff00000
 800a0b8:	40080000 	.word	0x40080000
 800a0bc:	0800aa98 	.word	0x0800aa98
 800a0c0:	0800aa88 	.word	0x0800aa88
 800a0c4:	a3b3      	add	r3, pc, #716	; (adr r3, 800a394 <__ieee754_pow+0xa4c>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 f8dd 	bl	800028c <__adddf3>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	ec41 0b1a 	vmov	d10, r0, r1
 800a0d8:	462b      	mov	r3, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 f8d3 	bl	8000288 <__aeabi_dsub>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	ec51 0b1a 	vmov	r0, r1, d10
 800a0ea:	f7f6 fd15 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f47f ae04 	bne.w	8009cfc <__ieee754_pow+0x3b4>
 800a0f4:	4aa2      	ldr	r2, [pc, #648]	; (800a380 <__ieee754_pow+0xa38>)
 800a0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	f340 8107 	ble.w	800a30e <__ieee754_pow+0x9c6>
 800a100:	151b      	asrs	r3, r3, #20
 800a102:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a106:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a10a:	fa4a fa03 	asr.w	sl, sl, r3
 800a10e:	44da      	add	sl, fp
 800a110:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a114:	489b      	ldr	r0, [pc, #620]	; (800a384 <__ieee754_pow+0xa3c>)
 800a116:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a11a:	4108      	asrs	r0, r1
 800a11c:	ea00 030a 	and.w	r3, r0, sl
 800a120:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a124:	f1c1 0114 	rsb	r1, r1, #20
 800a128:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a12c:	fa4a fa01 	asr.w	sl, sl, r1
 800a130:	f1bb 0f00 	cmp.w	fp, #0
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	bfb8      	it	lt
 800a13e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a142:	f7f6 f8a1 	bl	8000288 <__aeabi_dsub>
 800a146:	ec41 0b19 	vmov	d9, r0, r1
 800a14a:	4642      	mov	r2, r8
 800a14c:	464b      	mov	r3, r9
 800a14e:	ec51 0b19 	vmov	r0, r1, d9
 800a152:	f7f6 f89b 	bl	800028c <__adddf3>
 800a156:	a37a      	add	r3, pc, #488	; (adr r3, 800a340 <__ieee754_pow+0x9f8>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	2000      	movs	r0, #0
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	f7f6 fa49 	bl	80005f8 <__aeabi_dmul>
 800a166:	ec53 2b19 	vmov	r2, r3, d9
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 f889 	bl	8000288 <__aeabi_dsub>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 f883 	bl	8000288 <__aeabi_dsub>
 800a182:	a371      	add	r3, pc, #452	; (adr r3, 800a348 <__ieee754_pow+0xa00>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	a370      	add	r3, pc, #448	; (adr r3, 800a350 <__ieee754_pow+0xa08>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	4680      	mov	r8, r0
 800a194:	4689      	mov	r9, r1
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 fa2d 	bl	80005f8 <__aeabi_dmul>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	4632      	mov	r2, r6
 800a1bc:	463b      	mov	r3, r7
 800a1be:	4680      	mov	r8, r0
 800a1c0:	4689      	mov	r9, r1
 800a1c2:	f7f6 f861 	bl	8000288 <__aeabi_dsub>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 f85b 	bl	8000288 <__aeabi_dsub>
 800a1d2:	4642      	mov	r2, r8
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	464b      	mov	r3, r9
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	f7f6 fa0b 	bl	80005f8 <__aeabi_dmul>
 800a1e2:	a35d      	add	r3, pc, #372	; (adr r3, 800a358 <__ieee754_pow+0xa10>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	a35b      	add	r3, pc, #364	; (adr r3, 800a360 <__ieee754_pow+0xa18>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f847 	bl	8000288 <__aeabi_dsub>
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	f7f6 f9fb 	bl	80005f8 <__aeabi_dmul>
 800a202:	a359      	add	r3, pc, #356	; (adr r3, 800a368 <__ieee754_pow+0xa20>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f840 	bl	800028c <__adddf3>
 800a20c:	4622      	mov	r2, r4
 800a20e:	462b      	mov	r3, r5
 800a210:	f7f6 f9f2 	bl	80005f8 <__aeabi_dmul>
 800a214:	a356      	add	r3, pc, #344	; (adr r3, 800a370 <__ieee754_pow+0xa28>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 f835 	bl	8000288 <__aeabi_dsub>
 800a21e:	4622      	mov	r2, r4
 800a220:	462b      	mov	r3, r5
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	a354      	add	r3, pc, #336	; (adr r3, 800a378 <__ieee754_pow+0xa30>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 f82e 	bl	800028c <__adddf3>
 800a230:	4622      	mov	r2, r4
 800a232:	462b      	mov	r3, r5
 800a234:	f7f6 f9e0 	bl	80005f8 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f7f6 f822 	bl	8000288 <__aeabi_dsub>
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	2200      	movs	r2, #0
 800a256:	ec41 0b19 	vmov	d9, r0, r1
 800a25a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a25e:	4620      	mov	r0, r4
 800a260:	4629      	mov	r1, r5
 800a262:	f7f6 f811 	bl	8000288 <__aeabi_dsub>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	ec51 0b19 	vmov	r0, r1, d9
 800a26e:	f7f6 faed 	bl	800084c <__aeabi_ddiv>
 800a272:	4632      	mov	r2, r6
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	463b      	mov	r3, r7
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f6 f9bb 	bl	80005f8 <__aeabi_dmul>
 800a282:	4632      	mov	r2, r6
 800a284:	463b      	mov	r3, r7
 800a286:	f7f6 f801 	bl	800028c <__adddf3>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f7f5 fff9 	bl	8000288 <__aeabi_dsub>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	f7f5 fff5 	bl	8000288 <__aeabi_dsub>
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	4939      	ldr	r1, [pc, #228]	; (800a388 <__ieee754_pow+0xa40>)
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f7f5 ffef 	bl	8000288 <__aeabi_dsub>
 800a2aa:	ec41 0b10 	vmov	d0, r0, r1
 800a2ae:	ee10 3a90 	vmov	r3, s1
 800a2b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a2b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ba:	da2b      	bge.n	800a314 <__ieee754_pow+0x9cc>
 800a2bc:	4650      	mov	r0, sl
 800a2be:	f000 f86f 	bl	800a3a0 <scalbn>
 800a2c2:	ec51 0b10 	vmov	r0, r1, d0
 800a2c6:	ec53 2b18 	vmov	r2, r3, d8
 800a2ca:	f7ff bbee 	b.w	8009aaa <__ieee754_pow+0x162>
 800a2ce:	4b2f      	ldr	r3, [pc, #188]	; (800a38c <__ieee754_pow+0xa44>)
 800a2d0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2d4:	429e      	cmp	r6, r3
 800a2d6:	f77f af0d 	ble.w	800a0f4 <__ieee754_pow+0x7ac>
 800a2da:	4b2d      	ldr	r3, [pc, #180]	; (800a390 <__ieee754_pow+0xa48>)
 800a2dc:	440b      	add	r3, r1
 800a2de:	4303      	orrs	r3, r0
 800a2e0:	d009      	beq.n	800a2f6 <__ieee754_pow+0x9ae>
 800a2e2:	ec51 0b18 	vmov	r0, r1, d8
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f7f6 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800a2ee:	3800      	subs	r0, #0
 800a2f0:	bf18      	it	ne
 800a2f2:	2001      	movne	r0, #1
 800a2f4:	e448      	b.n	8009b88 <__ieee754_pow+0x240>
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	f7f5 ffc5 	bl	8000288 <__aeabi_dsub>
 800a2fe:	4642      	mov	r2, r8
 800a300:	464b      	mov	r3, r9
 800a302:	f7f6 fbff 	bl	8000b04 <__aeabi_dcmpge>
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f aef4 	beq.w	800a0f4 <__ieee754_pow+0x7ac>
 800a30c:	e7e9      	b.n	800a2e2 <__ieee754_pow+0x99a>
 800a30e:	f04f 0a00 	mov.w	sl, #0
 800a312:	e71a      	b.n	800a14a <__ieee754_pow+0x802>
 800a314:	ec51 0b10 	vmov	r0, r1, d0
 800a318:	4619      	mov	r1, r3
 800a31a:	e7d4      	b.n	800a2c6 <__ieee754_pow+0x97e>
 800a31c:	491a      	ldr	r1, [pc, #104]	; (800a388 <__ieee754_pow+0xa40>)
 800a31e:	2000      	movs	r0, #0
 800a320:	f7ff bb31 	b.w	8009986 <__ieee754_pow+0x3e>
 800a324:	2000      	movs	r0, #0
 800a326:	2100      	movs	r1, #0
 800a328:	f7ff bb2d 	b.w	8009986 <__ieee754_pow+0x3e>
 800a32c:	4630      	mov	r0, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	f7ff bb29 	b.w	8009986 <__ieee754_pow+0x3e>
 800a334:	9204      	str	r2, [sp, #16]
 800a336:	f7ff bb7b 	b.w	8009a30 <__ieee754_pow+0xe8>
 800a33a:	2300      	movs	r3, #0
 800a33c:	f7ff bb65 	b.w	8009a0a <__ieee754_pow+0xc2>
 800a340:	00000000 	.word	0x00000000
 800a344:	3fe62e43 	.word	0x3fe62e43
 800a348:	fefa39ef 	.word	0xfefa39ef
 800a34c:	3fe62e42 	.word	0x3fe62e42
 800a350:	0ca86c39 	.word	0x0ca86c39
 800a354:	be205c61 	.word	0xbe205c61
 800a358:	72bea4d0 	.word	0x72bea4d0
 800a35c:	3e663769 	.word	0x3e663769
 800a360:	c5d26bf1 	.word	0xc5d26bf1
 800a364:	3ebbbd41 	.word	0x3ebbbd41
 800a368:	af25de2c 	.word	0xaf25de2c
 800a36c:	3f11566a 	.word	0x3f11566a
 800a370:	16bebd93 	.word	0x16bebd93
 800a374:	3f66c16c 	.word	0x3f66c16c
 800a378:	5555553e 	.word	0x5555553e
 800a37c:	3fc55555 	.word	0x3fc55555
 800a380:	3fe00000 	.word	0x3fe00000
 800a384:	fff00000 	.word	0xfff00000
 800a388:	3ff00000 	.word	0x3ff00000
 800a38c:	4090cbff 	.word	0x4090cbff
 800a390:	3f6f3400 	.word	0x3f6f3400
 800a394:	652b82fe 	.word	0x652b82fe
 800a398:	3c971547 	.word	0x3c971547
 800a39c:	00000000 	.word	0x00000000

0800a3a0 <scalbn>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	ec55 4b10 	vmov	r4, r5, d0
 800a3a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	b999      	cbnz	r1, 800a3d8 <scalbn+0x38>
 800a3b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3b4:	4323      	orrs	r3, r4
 800a3b6:	d03f      	beq.n	800a438 <scalbn+0x98>
 800a3b8:	4b35      	ldr	r3, [pc, #212]	; (800a490 <scalbn+0xf0>)
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	ee10 0a10 	vmov	r0, s0
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f7f6 f919 	bl	80005f8 <__aeabi_dmul>
 800a3c6:	4b33      	ldr	r3, [pc, #204]	; (800a494 <scalbn+0xf4>)
 800a3c8:	429e      	cmp	r6, r3
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	da10      	bge.n	800a3f2 <scalbn+0x52>
 800a3d0:	a327      	add	r3, pc, #156	; (adr r3, 800a470 <scalbn+0xd0>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	e01f      	b.n	800a418 <scalbn+0x78>
 800a3d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a3dc:	4291      	cmp	r1, r2
 800a3de:	d10c      	bne.n	800a3fa <scalbn+0x5a>
 800a3e0:	ee10 2a10 	vmov	r2, s0
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 ff50 	bl	800028c <__adddf3>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	e022      	b.n	800a438 <scalbn+0x98>
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a3f8:	3936      	subs	r1, #54	; 0x36
 800a3fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a3fe:	4296      	cmp	r6, r2
 800a400:	dd0d      	ble.n	800a41e <scalbn+0x7e>
 800a402:	2d00      	cmp	r5, #0
 800a404:	a11c      	add	r1, pc, #112	; (adr r1, 800a478 <scalbn+0xd8>)
 800a406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40a:	da02      	bge.n	800a412 <scalbn+0x72>
 800a40c:	a11c      	add	r1, pc, #112	; (adr r1, 800a480 <scalbn+0xe0>)
 800a40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a412:	a319      	add	r3, pc, #100	; (adr r3, 800a478 <scalbn+0xd8>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f6 f8ee 	bl	80005f8 <__aeabi_dmul>
 800a41c:	e7e6      	b.n	800a3ec <scalbn+0x4c>
 800a41e:	1872      	adds	r2, r6, r1
 800a420:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a424:	428a      	cmp	r2, r1
 800a426:	dcec      	bgt.n	800a402 <scalbn+0x62>
 800a428:	2a00      	cmp	r2, #0
 800a42a:	dd08      	ble.n	800a43e <scalbn+0x9e>
 800a42c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a430:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a438:	ec45 4b10 	vmov	d0, r4, r5
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
 800a43e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a442:	da08      	bge.n	800a456 <scalbn+0xb6>
 800a444:	2d00      	cmp	r5, #0
 800a446:	a10a      	add	r1, pc, #40	; (adr r1, 800a470 <scalbn+0xd0>)
 800a448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44c:	dac0      	bge.n	800a3d0 <scalbn+0x30>
 800a44e:	a10e      	add	r1, pc, #56	; (adr r1, 800a488 <scalbn+0xe8>)
 800a450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a454:	e7bc      	b.n	800a3d0 <scalbn+0x30>
 800a456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a45a:	3236      	adds	r2, #54	; 0x36
 800a45c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a460:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a464:	4620      	mov	r0, r4
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <scalbn+0xf8>)
 800a468:	2200      	movs	r2, #0
 800a46a:	e7d5      	b.n	800a418 <scalbn+0x78>
 800a46c:	f3af 8000 	nop.w
 800a470:	c2f8f359 	.word	0xc2f8f359
 800a474:	01a56e1f 	.word	0x01a56e1f
 800a478:	8800759c 	.word	0x8800759c
 800a47c:	7e37e43c 	.word	0x7e37e43c
 800a480:	8800759c 	.word	0x8800759c
 800a484:	fe37e43c 	.word	0xfe37e43c
 800a488:	c2f8f359 	.word	0xc2f8f359
 800a48c:	81a56e1f 	.word	0x81a56e1f
 800a490:	43500000 	.word	0x43500000
 800a494:	ffff3cb0 	.word	0xffff3cb0
 800a498:	3c900000 	.word	0x3c900000

0800a49c <with_errno>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	4604      	mov	r4, r0
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	4616      	mov	r6, r2
 800a4a4:	f7fe fc76 	bl	8008d94 <__errno>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	6006      	str	r6, [r0, #0]
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}

0800a4b0 <xflow>:
 800a4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	461d      	mov	r5, r3
 800a4b6:	b108      	cbz	r0, 800a4bc <xflow+0xc>
 800a4b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4bc:	e9cd 2300 	strd	r2, r3, [sp]
 800a4c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	2222      	movs	r2, #34	; 0x22
 800a4ce:	b003      	add	sp, #12
 800a4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d4:	f7ff bfe2 	b.w	800a49c <with_errno>

0800a4d8 <__math_uflow>:
 800a4d8:	b508      	push	{r3, lr}
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4e0:	f7ff ffe6 	bl	800a4b0 <xflow>
 800a4e4:	ec41 0b10 	vmov	d0, r0, r1
 800a4e8:	bd08      	pop	{r3, pc}

0800a4ea <__math_oflow>:
 800a4ea:	b508      	push	{r3, lr}
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a4f2:	f7ff ffdd 	bl	800a4b0 <xflow>
 800a4f6:	ec41 0b10 	vmov	d0, r0, r1
 800a4fa:	bd08      	pop	{r3, pc}

0800a4fc <_init>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr

0800a508 <_fini>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr
