
full_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005948  08005948  00015948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a30  08005a30  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08005a30  08005a30  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a30  08005a30  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005a38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000100  08005b38  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005b38  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af24  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002147  00000000  00000000  0002b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000824  00000000  00000000  0002dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020114  00000000  00000000  0002e4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e06e  00000000  00000000  0004e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd359  00000000  00000000  0005c656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003128  00000000  00000000  001199b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0011cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800592c 	.word	0x0800592c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800592c 	.word	0x0800592c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <read_callibration_data>:

#define atmPress 101325 //Pa



void read_callibration_data (void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000bf0:	23aa      	movs	r3, #170	; 0xaa
 8000bf2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, HAL_MAX_DELAY);
 8000bf4:	8afa      	ldrh	r2, [r7, #22]
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2316      	movs	r3, #22
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	463b      	mov	r3, r7
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	21ee      	movs	r1, #238	; 0xee
 8000c08:	4836      	ldr	r0, [pc, #216]	; (8000ce4 <read_callibration_data+0x10c>)
 8000c0a:	f001 feb7 	bl	800297c <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000c0e:	783b      	ldrb	r3, [r7, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <read_callibration_data+0x110>)
 8000c1e:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <read_callibration_data+0x114>)
 8000c30:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000c32:	793b      	ldrb	r3, [r7, #4]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <read_callibration_data+0x118>)
 8000c42:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <read_callibration_data+0x11c>)
 8000c56:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000c58:	7a3b      	ldrb	r3, [r7, #8]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	7a7b      	ldrb	r3, [r7, #9]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <read_callibration_data+0x120>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000c6c:	7abb      	ldrb	r3, [r7, #10]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <read_callibration_data+0x124>)
 8000c7e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <read_callibration_data+0x128>)
 8000c90:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <read_callibration_data+0x12c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ca4:	7c3b      	ldrb	r3, [r7, #16]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	7c7b      	ldrb	r3, [r7, #17]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <read_callibration_data+0x130>)
 8000cb4:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000cb6:	7cbb      	ldrb	r3, [r7, #18]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	7cfb      	ldrb	r3, [r7, #19]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <read_callibration_data+0x134>)
 8000cc6:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000cc8:	7d3b      	ldrb	r3, [r7, #20]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	7d7b      	ldrb	r3, [r7, #21]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <read_callibration_data+0x138>)
 8000cd8:	801a      	strh	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000174 	.word	0x20000174
 8000ce8:	2000011c 	.word	0x2000011c
 8000cec:	2000011e 	.word	0x2000011e
 8000cf0:	20000120 	.word	0x20000120
 8000cf4:	20000122 	.word	0x20000122
 8000cf8:	20000124 	.word	0x20000124
 8000cfc:	20000126 	.word	0x20000126
 8000d00:	20000128 	.word	0x20000128
 8000d04:	2000012a 	.word	0x2000012a
 8000d08:	2000012c 	.word	0x2000012c
 8000d0c:	2000012e 	.word	0x2000012e
 8000d10:	20000130 	.word	0x20000130

08000d14 <Get_UTemp>:


// Get uncompensated Temp
void Get_UTemp (BMP180_t *Datastruct){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x2E;
 8000d1c:	232e      	movs	r3, #46	; 0x2e
 8000d1e:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp_RAW[2] = {0};
 8000d20:	2300      	movs	r3, #0
 8000d22:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	f107 030f 	add.w	r3, r7, #15
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	22f4      	movs	r2, #244	; 0xf4
 8000d38:	21ee      	movs	r1, #238	; 0xee
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <Get_UTemp+0x6c>)
 8000d3c:	f001 fd0a 	bl	8002754 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8000d40:	2005      	movs	r0, #5
 8000d42:	f001 f9c5 	bl	80020d0 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	22f6      	movs	r2, #246	; 0xf6
 8000d5a:	21ee      	movs	r1, #238	; 0xee
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <Get_UTemp+0x6c>)
 8000d5e:	f001 fe0d 	bl	800297c <HAL_I2C_Mem_Read>
	Datastruct->Temperature_RAW = ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	801a      	strh	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000174 	.word	0x20000174

08000d84 <BMP180_Get_Temp>:

void BMP180_Get_Temp (BMP180_t *Datastruct){
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	Get_UTemp(Datastruct);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffc1 	bl	8000d14 <Get_UTemp>
	UT = Datastruct->Temperature_RAW;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <BMP180_Get_Temp+0x108>)
 8000d9a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <BMP180_Get_Temp+0x108>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <BMP180_Get_Temp+0x10c>)
 8000da2:	8812      	ldrh	r2, [r2, #0]
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb64 	bl	8000474 <__aeabi_i2d>
 8000dac:	4604      	mov	r4, r0
 8000dae:	460d      	mov	r5, r1
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <BMP180_Get_Temp+0x110>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb5d 	bl	8000474 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <BMP180_Get_Temp+0x114>)
 8000dc0:	f7ff fcec 	bl	800079c <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	f7ff fbbc 	bl	8000548 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fe66 	bl	8000aa8 <__aeabi_d2iz>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a2f      	ldr	r2, [pc, #188]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000de0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <BMP180_Get_Temp+0x11c>)
 8000de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb43 	bl	8000474 <__aeabi_i2d>
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <BMP180_Get_Temp+0x120>)
 8000df4:	f7ff fba8 	bl	8000548 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	461d      	mov	r5, r3
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <BMP180_Get_Temp+0x124>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb30 	bl	8000474 <__aeabi_i2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4620      	mov	r0, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	f7ff fcbe 	bl	800079c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fe3e 	bl	8000aa8 <__aeabi_d2iz>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <BMP180_Get_Temp+0x128>)
 8000e30:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <BMP180_Get_Temp+0x128>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <BMP180_Get_Temp+0x12c>)
 8000e3e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <BMP180_Get_Temp+0x12c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3308      	adds	r3, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb14 	bl	8000474 <__aeabi_i2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <BMP180_Get_Temp+0x130>)
 8000e52:	f7ff fca3 	bl	800079c <__aeabi_ddiv>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4917      	ldr	r1, [pc, #92]	; (8000eb8 <BMP180_Get_Temp+0x134>)
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
	Datastruct->Temperature = Temp / 10.0;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <BMP180_Get_Temp+0x134>)
 8000e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <BMP180_Get_Temp+0x138>)
 8000e6c:	f7ff fc96 	bl	800079c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fe5e 	bl	8000b38 <__aeabi_d2f>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000134 	.word	0x20000134
 8000e90:	20000126 	.word	0x20000126
 8000e94:	20000124 	.word	0x20000124
 8000e98:	40e00000 	.word	0x40e00000
 8000e9c:	2000013c 	.word	0x2000013c
 8000ea0:	2000012e 	.word	0x2000012e
 8000ea4:	40a00000 	.word	0x40a00000
 8000ea8:	20000130 	.word	0x20000130
 8000eac:	20000140 	.word	0x20000140
 8000eb0:	2000014c 	.word	0x2000014c
 8000eb4:	40300000 	.word	0x40300000
 8000eb8:	20000168 	.word	0x20000168
 8000ebc:	40240000 	.word	0x40240000

08000ec0 <Get_UPress>:

// Get uncompensated Pressure
void Get_UPress (BMP180_t *Datastruct, int oss){   // oversampling setting 0,1,2,3
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	uint8_t datatowrite = 0x34+(oss<<6);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	019b      	lsls	r3, r3, #6
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3334      	adds	r3, #52	; 0x34
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <Get_UPress+0x80>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	22f4      	movs	r2, #244	; 0xf4
 8000ef6:	21ee      	movs	r1, #238	; 0xee
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <Get_UPress+0x84>)
 8000efa:	f001 fc2b 	bl	8002754 <HAL_I2C_Mem_Write>
//			break;
//		case (3):
//			HAL_Delay (26);
//			break;
//	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2303      	movs	r3, #3
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	22f6      	movs	r2, #246	; 0xf6
 8000f12:	21ee      	movs	r1, #238	; 0xee
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <Get_UPress+0x84>)
 8000f16:	f001 fd31 	bl	800297c <HAL_I2C_Mem_Read>
	Datastruct->Pressure_RAW = (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8000f1a:	7b3b      	ldrb	r3, [r7, #12]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	4413      	add	r3, r2
 8000f24:	7bba      	ldrb	r2, [r7, #14]
 8000f26:	441a      	add	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f1c3 0308 	rsb	r3, r3, #8
 8000f2e:	fa42 f303 	asr.w	r3, r2, r3
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08005948 	.word	0x08005948
 8000f44:	20000174 	.word	0x20000174

08000f48 <BMP180_Get_Press>:


void BMP180_Get_Press (BMP180_t *Datastruct, int oss){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	Get_UPress(Datastruct, oss);
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffb3 	bl	8000ec0 <Get_UPress>
	UP = Datastruct->Pressure_RAW;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4baa      	ldr	r3, [pc, #680]	; (800120c <BMP180_Get_Press+0x2c4>)
 8000f62:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000f64:	4baa      	ldr	r3, [pc, #680]	; (8001210 <BMP180_Get_Press+0x2c8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4aaa      	ldr	r2, [pc, #680]	; (8001214 <BMP180_Get_Press+0x2cc>)
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa80 	bl	8000474 <__aeabi_i2d>
 8000f74:	4604      	mov	r4, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	4ba7      	ldr	r3, [pc, #668]	; (8001218 <BMP180_Get_Press+0x2d0>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa79 	bl	8000474 <__aeabi_i2d>
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4ba5      	ldr	r3, [pc, #660]	; (800121c <BMP180_Get_Press+0x2d4>)
 8000f88:	f7ff fc08 	bl	800079c <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4620      	mov	r0, r4
 8000f92:	4629      	mov	r1, r5
 8000f94:	f7ff fad8 	bl	8000548 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fd82 	bl	8000aa8 <__aeabi_d2iz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000fa8:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <BMP180_Get_Press+0x2dc>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa5f 	bl	8000474 <__aeabi_i2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <BMP180_Get_Press+0x2e0>)
 8000fbc:	f7ff fac4 	bl	8000548 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4614      	mov	r4, r2
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	4b98      	ldr	r3, [pc, #608]	; (800122c <BMP180_Get_Press+0x2e4>)
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b93      	ldr	r3, [pc, #588]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa4c 	bl	8000474 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff fbda 	bl	800079c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd5a 	bl	8000aa8 <__aeabi_d2iz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a8e      	ldr	r2, [pc, #568]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8000ff8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ffa:	4b89      	ldr	r3, [pc, #548]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b8c      	ldr	r3, [pc, #560]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a8b      	ldr	r2, [pc, #556]	; (8001234 <BMP180_Get_Press+0x2ec>)
 8001006:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001008:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <BMP180_Get_Press+0x2ec>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001010:	4a89      	ldr	r2, [pc, #548]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001012:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001014:	4b89      	ldr	r3, [pc, #548]	; (800123c <BMP180_Get_Press+0x2f4>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa2a 	bl	8000474 <__aeabi_i2d>
 8001020:	4604      	mov	r4, r0
 8001022:	460d      	mov	r5, r1
 8001024:	4b84      	ldr	r3, [pc, #528]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a83      	ldr	r2, [pc, #524]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa1f 	bl	8000474 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <BMP180_Get_Press+0x2f8>)
 800103c:	f7ff fbae 	bl	800079c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <BMP180_Get_Press+0x2e0>)
 800105a:	f7ff fb9f 	bl	800079c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fd1f 	bl	8000aa8 <__aeabi_d2iz>
 800106a:	4603      	mov	r3, r0
 800106c:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <BMP180_Get_Press+0x2d8>)
 800106e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <BMP180_Get_Press+0x2fc>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	461a      	mov	r2, r3
 8001078:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9f7 	bl	8000474 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <BMP180_Get_Press+0x2e0>)
 800108c:	f7ff fb86 	bl	800079c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd06 	bl	8000aa8 <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	4a64      	ldr	r2, [pc, #400]	; (8001230 <BMP180_Get_Press+0x2e8>)
 80010a0:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <BMP180_Get_Press+0x2d8>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b62      	ldr	r3, [pc, #392]	; (8001230 <BMP180_Get_Press+0x2e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <BMP180_Get_Press+0x300>)
 80010ae:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BMP180_Get_Press+0x304>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	4b63      	ldr	r3, [pc, #396]	; (8001248 <BMP180_Get_Press+0x300>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	441a      	add	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	3302      	adds	r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da00      	bge.n	80010cc <BMP180_Get_Press+0x184>
 80010ca:	3303      	adds	r3, #3
 80010cc:	109b      	asrs	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b5f      	ldr	r3, [pc, #380]	; (8001250 <BMP180_Get_Press+0x308>)
 80010d2:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80010d4:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <BMP180_Get_Press+0x30c>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <BMP180_Get_Press+0x2f0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9c5 	bl	8000474 <__aeabi_i2d>
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <BMP180_Get_Press+0x310>)
 80010f0:	f7ff fb54 	bl	800079c <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fcd4 	bl	8000aa8 <__aeabi_d2iz>
 8001100:	4603      	mov	r3, r0
 8001102:	4a47      	ldr	r2, [pc, #284]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8001104:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <BMP180_Get_Press+0x314>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9b1 	bl	8000474 <__aeabi_i2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a47      	ldr	r2, [pc, #284]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9a6 	bl	8000474 <__aeabi_i2d>
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b44      	ldr	r3, [pc, #272]	; (8001240 <BMP180_Get_Press+0x2f8>)
 800112e:	f7ff fb35 	bl	800079c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <BMP180_Get_Press+0x318>)
 800114c:	f7ff fb26 	bl	800079c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fca6 	bl	8000aa8 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	4a34      	ldr	r2, [pc, #208]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001160:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	3302      	adds	r3, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f980 	bl	8000474 <__aeabi_i2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <BMP180_Get_Press+0x31c>)
 800117a:	f7ff fb0f 	bl	800079c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc8f 	bl	8000aa8 <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <BMP180_Get_Press+0x300>)
 800118e:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <BMP180_Get_Press+0x320>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <BMP180_Get_Press+0x300>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f956 	bl	8000454 <__aeabi_ui2d>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <BMP180_Get_Press+0x2d4>)
 80011ae:	f7ff faf5 	bl	800079c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc9d 	bl	8000af8 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <BMP180_Get_Press+0x324>)
 80011c2:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <BMP180_Get_Press+0x2c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <BMP180_Get_Press+0x308>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	fa41 f202 	asr.w	r2, r1, r2
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <BMP180_Get_Press+0x328>)
 80011e0:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <BMP180_Get_Press+0x328>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db46      	blt.n	8001278 <BMP180_Get_Press+0x330>
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <BMP180_Get_Press+0x328>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	005a      	lsls	r2, r3, #1
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <BMP180_Get_Press+0x324>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f92b 	bl	8000454 <__aeabi_ui2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	491c      	ldr	r1, [pc, #112]	; (8001274 <BMP180_Get_Press+0x32c>)
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
 8001208:	e045      	b.n	8001296 <BMP180_Get_Press+0x34e>
 800120a:	bf00      	nop
 800120c:	20000138 	.word	0x20000138
 8001210:	20000134 	.word	0x20000134
 8001214:	20000126 	.word	0x20000126
 8001218:	20000124 	.word	0x20000124
 800121c:	40e00000 	.word	0x40e00000
 8001220:	2000013c 	.word	0x2000013c
 8001224:	2000012e 	.word	0x2000012e
 8001228:	40a00000 	.word	0x40a00000
 800122c:	20000130 	.word	0x20000130
 8001230:	20000140 	.word	0x20000140
 8001234:	2000014c 	.word	0x2000014c
 8001238:	20000154 	.word	0x20000154
 800123c:	2000012a 	.word	0x2000012a
 8001240:	40b00000 	.word	0x40b00000
 8001244:	2000011e 	.word	0x2000011e
 8001248:	20000144 	.word	0x20000144
 800124c:	2000011c 	.word	0x2000011c
 8001250:	20000148 	.word	0x20000148
 8001254:	20000120 	.word	0x20000120
 8001258:	40c00000 	.word	0x40c00000
 800125c:	20000128 	.word	0x20000128
 8001260:	40f00000 	.word	0x40f00000
 8001264:	40100000 	.word	0x40100000
 8001268:	20000122 	.word	0x20000122
 800126c:	20000150 	.word	0x20000150
 8001270:	20000158 	.word	0x20000158
 8001274:	20000160 	.word	0x20000160
	else Press = (B7/B4)*2;
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <BMP180_Get_Press+0x458>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <BMP180_Get_Press+0x45c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8e4 	bl	8000454 <__aeabi_ui2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4945      	ldr	r1, [pc, #276]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <BMP180_Get_Press+0x464>)
 80012a2:	f7ff fa7b 	bl	800079c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <BMP180_Get_Press+0x460>)
 80012b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <BMP180_Get_Press+0x464>)
 80012ba:	f7ff fa6f 	bl	800079c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fbe9 	bl	8000aa8 <__aeabi_d2iz>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <BMP180_Get_Press+0x468>)
 80012da:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <BMP180_Get_Press+0x468>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f640 32de 	movw	r2, #3038	; 0xbde
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8c3 	bl	8000474 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <BMP180_Get_Press+0x46c>)
 80012f4:	f7ff fa52 	bl	800079c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbd2 	bl	8000aa8 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <BMP180_Get_Press+0x468>)
 8001308:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <BMP180_Get_Press+0x460>)
 800130c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001310:	a321      	add	r3, pc, #132	; (adr r3, 8001398 <BMP180_Get_Press+0x450>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f917 	bl	8000548 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <BMP180_Get_Press+0x46c>)
 8001328:	f7ff fa38 	bl	800079c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fbb8 	bl	8000aa8 <__aeabi_d2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <BMP180_Get_Press+0x470>)
 800133c:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <BMP180_Get_Press+0x468>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <BMP180_Get_Press+0x470>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f891 	bl	8000474 <__aeabi_i2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <BMP180_Get_Press+0x474>)
 8001358:	f7ff fa20 	bl	800079c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7fe ff37 	bl	80001dc <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001374:	e9c1 2300 	strd	r2, r3, [r1]

	Datastruct->Pressure = Press;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <BMP180_Get_Press+0x460>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fbd9 	bl	8000b38 <__aeabi_d2f>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	c0bcbd00 	.word	0xc0bcbd00
 80013a0:	20000158 	.word	0x20000158
 80013a4:	20000150 	.word	0x20000150
 80013a8:	20000160 	.word	0x20000160
 80013ac:	40700000 	.word	0x40700000
 80013b0:	2000013c 	.word	0x2000013c
 80013b4:	40f00000 	.word	0x40f00000
 80013b8:	20000140 	.word	0x20000140
 80013bc:	40300000 	.word	0x40300000

080013c0 <BMP180_Get_Alt>:


void BMP180_Get_Alt (BMP180_t *Datastruct, int oss){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	BMP180_Get_Press (Datastruct, oss);
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fdbb 	bl	8000f48 <BMP180_Get_Press>
	Datastruct->Altitude = 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <BMP180_Get_Alt+0x90>)
 80013d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d8:	a317      	add	r3, pc, #92	; (adr r3, 8001438 <BMP180_Get_Alt+0x78>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f9dd 	bl	800079c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b17 	vmov	d7, r2, r3
 80013ea:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001440 <BMP180_Get_Alt+0x80>
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f003 f8cb 	bl	8004590 <pow>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <BMP180_Get_Alt+0x94>)
 8001404:	f7fe fee8 	bl	80001d8 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	a30d      	add	r3, pc, #52	; (adr r3, 8001448 <BMP180_Get_Alt+0x88>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f897 	bl	8000548 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb89 	bl	8000b38 <__aeabi_d2f>
 8001426:	4602      	mov	r2, r0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	611a      	str	r2, [r3, #16]
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	40f8bcd0 	.word	0x40f8bcd0
 8001440:	ccd745e4 	.word	0xccd745e4
 8001444:	3fc85b95 	.word	0x3fc85b95
 8001448:	00000000 	.word	0x00000000
 800144c:	40e5a540 	.word	0x40e5a540
 8001450:	20000160 	.word	0x20000160
 8001454:	3ff00000 	.word	0x3ff00000

08001458 <BMP180_Init>:

void BMP180_Init (void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	read_callibration_data();
 800145c:	f7ff fbbc 	bl	8000bd8 <read_callibration_data>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <BMP180_Read_All>:

void BMP180_Read_All (BMP180_t *Datastruct, int oss){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	BMP180_Get_Temp(Datastruct);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc88 	bl	8000d84 <BMP180_Get_Temp>
	BMP180_Get_Alt(Datastruct, oss); //GetAlt calls GetPress
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <BMP180_Get_Alt>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <BUZZER_Toggle>:

void BUZZER_TurnOff(void){
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, OFF);
}

void BUZZER_Toggle(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f001 f8aa 	bl	80025e8 <HAL_GPIO_TogglePin>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <LED_Toggle>:

void LED_TurnOff(void){
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, OFF);
}

void LED_Toggle(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_GPIO_PIN);
 800149c:	2108      	movs	r1, #8
 800149e:	4802      	ldr	r0, [pc, #8]	; (80014a8 <LED_Toggle+0x10>)
 80014a0:	f001 f8a2 	bl	80025e8 <HAL_GPIO_TogglePin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	48000400 	.word	0x48000400

080014ac <MPU6050_Init>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	2275      	movs	r2, #117	; 0x75
 80014c2:	21d0      	movs	r1, #208	; 0xd0
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <MPU6050_Init+0xa4>)
 80014c6:	f001 fa59 	bl	800297c <HAL_I2C_Mem_Read>

    if(check == 104){ // 0x68 will be returned by the sensor if everything goes well
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b68      	cmp	r3, #104	; 0x68
 80014ce:	d139      	bne.n	8001544 <MPU6050_Init+0x98>
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	226b      	movs	r2, #107	; 0x6b
 80014e4:	21d0      	movs	r1, #208	; 0xd0
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <MPU6050_Init+0xa4>)
 80014e8:	f001 f934 	bl	8002754 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80014ec:	2307      	movs	r3, #7
 80014ee:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	2301      	movs	r3, #1
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	2219      	movs	r2, #25
 8001500:	21d0      	movs	r1, #208	; 0xd0
 8001502:	4813      	ldr	r0, [pc, #76]	; (8001550 <MPU6050_Init+0xa4>)
 8001504:	f001 f926 	bl	8002754 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	1dbb      	adds	r3, r7, #6
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	221c      	movs	r2, #28
 800151c:	21d0      	movs	r1, #208	; 0xd0
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MPU6050_Init+0xa4>)
 8001520:	f001 f918 	bl	8002754 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	221b      	movs	r2, #27
 8001538:	21d0      	movs	r1, #208	; 0xd0
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MPU6050_Init+0xa4>)
 800153c:	f001 f90a 	bl	8002754 <HAL_I2C_Mem_Write>
        return 0;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <MPU6050_Init+0x9a>
    }
    return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000174 	.word	0x20000174
 8001554:	00000000 	.word	0x00000000

08001558 <MPU6050_Read_All>:

    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(MPU6050_t *DataStruct){
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b094      	sub	sp, #80	; 0x50
 800155e:	af04      	add	r7, sp, #16
 8001560:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001562:	2364      	movs	r3, #100	; 0x64
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	230e      	movs	r3, #14
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	223b      	movs	r2, #59	; 0x3b
 8001574:	21d0      	movs	r1, #208	; 0xd0
 8001576:	488e      	ldr	r0, [pc, #568]	; (80017b0 <MPU6050_Read_All+0x258>)
 8001578:	f001 fa00 	bl	800297c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80015a0:	7b3b      	ldrb	r3, [r7, #12]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80015b2:	7bbb      	ldrb	r3, [r7, #14]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80015c0:	7c3b      	ldrb	r3, [r7, #16]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	7c7b      	ldrb	r3, [r7, #17]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80015d2:	7cbb      	ldrb	r3, [r7, #18]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21a      	sxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80015e4:	7d3b      	ldrb	r3, [r7, #20]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	7d7b      	ldrb	r3, [r7, #21]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff39 	bl	8000474 <__aeabi_i2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <MPU6050_Read_All+0x25c>)
 8001608:	f7ff f8c8 	bl	800079c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff29 	bl	8000474 <__aeabi_i2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <MPU6050_Read_All+0x25c>)
 8001628:	f7ff f8b8 	bl	800079c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff19 	bl	8000474 <__aeabi_i2d>
 8001642:	a355      	add	r3, pc, #340	; (adr r3, 8001798 <MPU6050_Read_All+0x240>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f8a8 	bl	800079c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001656:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	eddf 6a55 	vldr	s13, [pc, #340]	; 80017b8 <MPU6050_Read_All+0x260>
 8001666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80017bc <MPU6050_Read_All+0x264>
 800166e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fef8 	bl	8000474 <__aeabi_i2d>
 8001684:	a346      	add	r3, pc, #280	; (adr r3, 80017a0 <MPU6050_Read_All+0x248>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f887 	bl	800079c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fee8 	bl	8000474 <__aeabi_i2d>
 80016a4:	a33e      	add	r3, pc, #248	; (adr r3, 80017a0 <MPU6050_Read_All+0x248>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff f877 	bl	800079c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fed8 	bl	8000474 <__aeabi_i2d>
 80016c4:	a336      	add	r3, pc, #216	; (adr r3, 80017a0 <MPU6050_Read_All+0x248>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f867 	bl	800079c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80016d8:	f000 fcee 	bl	80020b8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <MPU6050_Read_All+0x268>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe feb5 	bl	8000454 <__aeabi_ui2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <MPU6050_Read_All+0x26c>)
 80016f0:	f7ff f854 	bl	800079c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80016fc:	f000 fcdc 	bl	80020b8 <HAL_GetTick>
 8001700:	4603      	mov	r3, r0
 8001702:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <MPU6050_Read_All+0x268>)
 8001704:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	fb03 f202 	mul.w	r2, r3, r2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800171e:	4619      	mov	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fea1 	bl	8000474 <__aeabi_i2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ec43 2b10 	vmov	d0, r2, r3
 800173a:	f002 ff99 	bl	8004670 <sqrt>
 800173e:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0){
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800174e:	f7ff f963 	bl	8000a18 <__aeabi_dcmpeq>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d137      	bne.n	80017c8 <MPU6050_Read_All+0x270>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe88 	bl	8000474 <__aeabi_i2d>
 8001764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001768:	f7ff f818 	bl	800079c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b17 	vmov	d7, r2, r3
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	f002 ffa4 	bl	80046c8 <atan>
 8001780:	ec51 0b10 	vmov	r0, r1, d0
 8001784:	a308      	add	r3, pc, #32	; (adr r3, 80017a8 <MPU6050_Read_All+0x250>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001796:	e01d      	b.n	80017d4 <MPU6050_Read_All+0x27c>
 8001798:	00000000 	.word	0x00000000
 800179c:	40cc2900 	.word	0x40cc2900
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40606000 	.word	0x40606000
 80017a8:	1a63c1f8 	.word	0x1a63c1f8
 80017ac:	404ca5dc 	.word	0x404ca5dc
 80017b0:	20000174 	.word	0x20000174
 80017b4:	40d00000 	.word	0x40d00000
 80017b8:	43aa0000 	.word	0x43aa0000
 80017bc:	42121eb8 	.word	0x42121eb8
 80017c0:	20000170 	.word	0x20000170
 80017c4:	408f4000 	.word	0x408f4000
    }
    else {
        roll = 0.0;
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017da:	425b      	negs	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe49 	bl	8000474 <__aeabi_i2d>
 80017e2:	4682      	mov	sl, r0
 80017e4:	468b      	mov	fp, r1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe41 	bl	8000474 <__aeabi_i2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ec43 2b11 	vmov	d1, r2, r3
 80017fa:	ec4b ab10 	vmov	d0, sl, fp
 80017fe:	f002 fec5 	bl	800458c <atan2>
 8001802:	ec51 0b10 	vmov	r0, r1, d0
 8001806:	a348      	add	r3, pc, #288	; (adr r3, 8001928 <MPU6050_Read_All+0x3d0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fe9c 	bl	8000548 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)){
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <MPU6050_Read_All+0x3c0>)
 800181e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001822:	f7ff f903 	bl	8000a2c <__aeabi_dcmplt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <MPU6050_Read_All+0x2ea>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <MPU6050_Read_All+0x3c4>)
 8001838:	f7ff f916 	bl	8000a68 <__aeabi_dcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d114      	bne.n	800186c <MPU6050_Read_All+0x314>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <MPU6050_Read_All+0x3c4>)
 8001848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184c:	f7ff f90c 	bl	8000a68 <__aeabi_dcmpgt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <MPU6050_Read_All+0x32a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MPU6050_Read_All+0x3c0>)
 8001862:	f7ff f8e3 	bl	8000a2c <__aeabi_dcmplt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <MPU6050_Read_All+0x32a>
        KalmanY.angle = pitch;
 800186c:	492c      	ldr	r1, [pc, #176]	; (8001920 <MPU6050_Read_All+0x3c8>)
 800186e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001872:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800187c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001880:	e014      	b.n	80018ac <MPU6050_Read_All+0x354>
    }
    else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001888:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800188c:	eeb0 1a47 	vmov.f32	s2, s14
 8001890:	eef0 1a67 	vmov.f32	s3, s15
 8001894:	ed97 0b06 	vldr	d0, [r7, #24]
 8001898:	4821      	ldr	r0, [pc, #132]	; (8001920 <MPU6050_Read_All+0x3c8>)
 800189a:	f000 f849 	bl	8001930 <Kalman_getAngle>
 800189e:	eeb0 7a40 	vmov.f32	s14, s0
 80018a2:	eef0 7a60 	vmov.f32	s15, s1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80018b2:	4690      	mov	r8, r2
 80018b4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MPU6050_Read_All+0x3c4>)
 80018be:	4640      	mov	r0, r8
 80018c0:	4649      	mov	r1, r9
 80018c2:	f7ff f8d1 	bl	8000a68 <__aeabi_dcmpgt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <MPU6050_Read_All+0x386>
        DataStruct->Gx = -DataStruct->Gx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018d2:	4614      	mov	r4, r2
 80018d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80018e4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80018e8:	eeb0 1a47 	vmov.f32	s2, s14
 80018ec:	eef0 1a67 	vmov.f32	s3, s15
 80018f0:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <MPU6050_Read_All+0x3cc>)
 80018f6:	f000 f81b 	bl	8001930 <Kalman_getAngle>
 80018fa:	eeb0 7a40 	vmov.f32	s14, s0
 80018fe:	eef0 7a60 	vmov.f32	s15, s1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001908:	bf00      	nop
 800190a:	3740      	adds	r7, #64	; 0x40
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	c0568000 	.word	0xc0568000
 800191c:	40568000 	.word	0x40568000
 8001920:	20000048 	.word	0x20000048
 8001924:	20000000 	.word	0x20000000
 8001928:	1a63c1f8 	.word	0x1a63c1f8
 800192c:	404ca5dc 	.word	0x404ca5dc

08001930 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt){
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b096      	sub	sp, #88	; 0x58
 8001934:	af00      	add	r7, sp, #0
 8001936:	61f8      	str	r0, [r7, #28]
 8001938:	ed87 0b04 	vstr	d0, [r7, #16]
 800193c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001940:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800194a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800194e:	f7fe fc43 	bl	80001d8 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc32 	bl	80001dc <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	f7fe fdd9 	bl	8000548 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019a4:	f7fe fc18 	bl	80001d8 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80019b6:	f7fe fc0f 	bl	80001d8 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fc08 	bl	80001dc <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d8:	f7fe fdb6 	bl	8000548 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fbfa 	bl	80001dc <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	69f9      	ldr	r1, [r7, #28]
 80019ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a02:	f7fe fda1 	bl	8000548 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fbe3 	bl	80001d8 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	69f9      	ldr	r1, [r7, #28]
 8001a18:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2c:	f7fe fd8c 	bl	8000548 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fbce 	bl	80001d8 <__aeabi_dsub>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	69f9      	ldr	r1, [r7, #28]
 8001a42:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a56:	f7fe fd77 	bl	8000548 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4629      	mov	r1, r5
 8001a62:	f7fe fbbb 	bl	80001dc <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a7c:	f7fe fbae 	bl	80001dc <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a92:	f7fe fe83 	bl	800079c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001aa8:	f7fe fe78 	bl	800079c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001aba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abe:	f7fe fb8b 	bl	80001d8 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ad0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ad8:	f7fe fd36 	bl	8000548 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fb7a 	bl	80001dc <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	69f9      	ldr	r1, [r7, #28]
 8001aee:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001af8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b00:	f7fe fd22 	bl	8000548 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fb66 	bl	80001dc <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	69f9      	ldr	r1, [r7, #28]
 8001b16:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001b34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fb46 	bl	80001d8 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	69f9      	ldr	r1, [r7, #28]
 8001b52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b64:	f7fe fcf0 	bl	8000548 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb32 	bl	80001d8 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fb1e 	bl	80001d8 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001bac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bb4:	f7fe fcc8 	bl	8000548 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fb0a 	bl	80001d8 <__aeabi_dsub>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	69f9      	ldr	r1, [r7, #28]
 8001bca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bd4:	ec43 2b17 	vmov	d7, r2, r3
};
 8001bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bdc:	eef0 0a67 	vmov.f32	s1, s15
 8001be0:	3758      	adds	r7, #88	; 0x58
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bec:	f000 f9fb 	bl	8001fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf0:	f000 f81c 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f000 f8ae 	bl	8001d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bf8:	f000 f86e 	bl	8001cd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init();
 8001bfc:	f7ff fc2c 	bl	8001458 <BMP180_Init>
  MPU6050_Init();
 8001c00:	f7ff fc54 	bl	80014ac <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP180_Read_All(&BMP180, 0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <main+0x3c>)
 8001c08:	f7ff fc2c 	bl	8001464 <BMP180_Read_All>
	  MPU6050_Read_All(&MPU6050);
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <main+0x40>)
 8001c0e:	f7ff fca3 	bl	8001558 <MPU6050_Read_All>
	  LED_Toggle();
 8001c12:	f7ff fc41 	bl	8001498 <LED_Toggle>
	  BUZZER_Toggle();
 8001c16:	f7ff fc35 	bl	8001484 <BUZZER_Toggle>
	  HAL_Delay(50);
 8001c1a:	2032      	movs	r0, #50	; 0x32
 8001c1c:	f000 fa58 	bl	80020d0 <HAL_Delay>
	  BMP180_Read_All(&BMP180, 0);
 8001c20:	e7f0      	b.n	8001c04 <main+0x1c>
 8001c22:	bf00      	nop
 8001c24:	200001c8 	.word	0x200001c8
 8001c28:	200001e0 	.word	0x200001e0

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b096      	sub	sp, #88	; 0x58
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2244      	movs	r2, #68	; 0x44
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fc74 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c52:	f001 fb1b 	bl	800328c <HAL_PWREx_ControlVoltageScaling>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c5c:	f000 f8dc 	bl	8001e18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c60:	f001 faf6 	bl	8003250 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <SystemClock_Config+0xa8>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <SystemClock_Config+0xa8>)
 8001c6c:	f023 0318 	bic.w	r3, r3, #24
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c74:	2314      	movs	r3, #20
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c84:	2360      	movs	r3, #96	; 0x60
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fb51 	bl	8003338 <HAL_RCC_OscConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c9c:	f000 f8bc 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 ff51 	bl	8003b60 <HAL_RCC_ClockConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cc4:	f000 f8a8 	bl	8001e18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001cc8:	f002 fb2c 	bl	8004324 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ccc:	bf00      	nop
 8001cce:	3758      	adds	r7, #88	; 0x58
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_I2C1_Init+0x78>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001ce4:	f640 6214 	movw	r2, #3604	; 0xe14
 8001ce8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d16:	f000 fc81 	bl	800261c <HAL_I2C_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d20:	f000 f87a 	bl	8001e18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d24:	2100      	movs	r1, #0
 8001d26:	4809      	ldr	r0, [pc, #36]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d28:	f001 f9fa 	bl	8003120 <HAL_I2CEx_ConfigAnalogFilter>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d32:	f000 f871 	bl	8001e18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <MX_I2C1_Init+0x74>)
 8001d3a:	f001 fa3c 	bl	80031b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d44:	f000 f868 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000174 	.word	0x20000174
 8001d50:	40005400 	.word	0x40005400

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_GPIO_Init+0xbc>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_GPIO_Port, GPIO_Output_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbc:	f000 fbfc 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OutputB3_GPIO_Port, GPIO_OutputB3_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <MX_GPIO_Init+0xc0>)
 8001dc6:	f000 fbf7 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Output_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_Pin;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f000 fa7d 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OutputB3_Pin */
  GPIO_InitStruct.Pin = GPIO_OutputB3_Pin;
 8001dea:	2308      	movs	r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_OutputB3_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_GPIO_Init+0xc0>)
 8001e02:	f000 fa6f 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000400 	.word	0x48000400

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <Error_Handler+0x8>
	...

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x44>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x44>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6613      	str	r3, [r2, #96]	; 0x60
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x44>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x44>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x44>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x44>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b09e      	sub	sp, #120	; 0x78
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2254      	movs	r2, #84	; 0x54
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fb4b 	bl	8004528 <memset>
  if(hi2c->Instance==I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_I2C_MspInit+0xa4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d135      	bne.n	8001f08 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e9c:	2340      	movs	r3, #64	; 0x40
 8001e9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 f845 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001eb4:	f7ff ffb0 	bl	8001e18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ed0:	23c0      	movs	r3, #192	; 0xc0
 8001ed2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed4:	2312      	movs	r3, #18
 8001ed6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480b      	ldr	r0, [pc, #44]	; (8001f18 <HAL_I2C_MspInit+0xac>)
 8001eec:	f000 f9fa 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_I2C_MspInit+0xa8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3778      	adds	r7, #120	; 0x78
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler+0x4>

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f000 f892 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff ffea 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f002 fabf 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7ff fe0f 	bl	8001be8 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001fd8:	08005a38 	.word	0x08005a38
  ldr r2, =_sbss
 8001fdc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001fe0:	20000374 	.word	0x20000374

08001fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_IRQHandler>

08001fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f943 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f80e 	bl	8002018 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e001      	b.n	800200c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002008:	f7ff ff0c 	bl	8001e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_InitTick+0x70>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f941 	bl	80022ca <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d809      	bhi.n	8002068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 f919 	bl	8002292 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_InitTick+0x74>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e007      	b.n	8002078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e004      	b.n	8002078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e001      	b.n	8002078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000098 	.word	0x20000098
 8002088:	20000090 	.word	0x20000090
 800208c:	20000094 	.word	0x20000094

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000098 	.word	0x20000098
 80020b4:	20000238 	.word	0x20000238

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000238 	.word	0x20000238

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000098 	.word	0x20000098

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff47 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff5c 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffb0 	bl	8002238 <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e148      	b.n	8002586 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 813a 	beq.w	8002580 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 0201 	and.w	r2, r3, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8094 	beq.w	8002580 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6613      	str	r3, [r2, #96]	; 0x60
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a4d      	ldr	r2, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800249a:	d00d      	beq.n	80024b8 <HAL_GPIO_Init+0x1d4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a43      	ldr	r2, [pc, #268]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <HAL_GPIO_Init+0x1d0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x1d6>
 80024b0:	2307      	movs	r3, #7
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x1d6>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x1d6>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ca:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fc:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f aeaf 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43d9      	mvns	r1, r3
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	400b      	ands	r3, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e08d      	b.n	800274a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fc12 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e006      	b.n	80026a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d108      	bne.n	80026be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	e007      	b.n	80026ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	460b      	mov	r3, r1
 8002768:	813b      	strh	r3, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	f040 80f9 	bne.w	800296e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_I2C_Mem_Write+0x34>
 8002782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0ed      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Mem_Write+0x4e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0e6      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027aa:	f7ff fc85 	bl	80020b8 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2319      	movs	r3, #25
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fac3 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d1      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2221      	movs	r2, #33	; 0x21
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027f4:	88f8      	ldrh	r0, [r7, #6]
 80027f6:	893a      	ldrh	r2, [r7, #8]
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4603      	mov	r3, r0
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f9d3 	bl	8002bb0 <I2C_RequestMemoryWrite>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0a9      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d90e      	bls.n	8002844 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	b2da      	uxtb	r2, r3
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fc3d 	bl	80030bc <I2C_TransferConfig>
 8002842:	e00f      	b.n	8002864 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	b2da      	uxtb	r2, r3
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fc2c 	bl	80030bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fabc 	bl	8002de6 <I2C_WaitOnTXISFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e07b      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d034      	beq.n	800291c <HAL_I2C_Mem_Write+0x1c8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d130      	bne.n	800291c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fa3f 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04d      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d90e      	bls.n	80028fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fbe1 	bl	80030bc <I2C_TransferConfig>
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fbd0 	bl	80030bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d19e      	bne.n	8002864 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 faa2 	bl	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01a      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2220      	movs	r2, #32
 8002940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_I2C_Mem_Write+0x224>)
 800294e:	400b      	ands	r3, r1
 8002950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	fe00e800 	.word	0xfe00e800

0800297c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	f040 80fd 	bne.w	8002b9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x34>
 80029aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0f1      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Mem_Read+0x4e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0ea      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029d2:	f7ff fb71 	bl	80020b8 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2319      	movs	r3, #25
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f9af 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d5      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2222      	movs	r2, #34	; 0x22
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1c:	88f8      	ldrh	r0, [r7, #6]
 8002a1e:	893a      	ldrh	r2, [r7, #8]
 8002a20:	8979      	ldrh	r1, [r7, #10]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f913 	bl	8002c58 <I2C_RequestMemoryRead>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0ad      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2bff      	cmp	r3, #255	; 0xff
 8002a4c:	d90e      	bls.n	8002a6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_I2C_Mem_Read+0x22c>)
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fb29 	bl	80030bc <I2C_TransferConfig>
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_I2C_Mem_Read+0x22c>)
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fb18 	bl	80030bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2200      	movs	r2, #0
 8002a94:	2104      	movs	r1, #4
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f956 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07c      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d034      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x1d0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d130      	bne.n	8002b4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	2200      	movs	r2, #0
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f927 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e04d      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2bff      	cmp	r3, #255	; 0xff
 8002b0c:	d90e      	bls.n	8002b2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fac9 	bl	80030bc <I2C_TransferConfig>
 8002b2a:	e00f      	b.n	8002b4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fab8 	bl	80030bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d19a      	bne.n	8002a8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f98a 	bl	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e01a      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_I2C_Mem_Read+0x230>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	80002400 	.word	0x80002400
 8002bac:	fe00e800 	.word	0xfe00e800

08002bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <I2C_RequestMemoryWrite+0xa4>)
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fa6f 	bl	80030bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8ff 	bl	8002de6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e02c      	b.n	8002c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf8:	893b      	ldrh	r3, [r7, #8]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
 8002c02:	e015      	b.n	8002c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c04:	893b      	ldrh	r3, [r7, #8]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	69b9      	ldr	r1, [r7, #24]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8e5 	bl	8002de6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e012      	b.n	8002c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c26:	893b      	ldrh	r3, [r7, #8]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f884 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	80002000 	.word	0x80002000

08002c58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	817b      	strh	r3, [r7, #10]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	813b      	strh	r3, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <I2C_RequestMemoryRead+0xa4>)
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa1c 	bl	80030bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f8ac 	bl	8002de6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e02c      	b.n	8002cf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca8:	e015      	b.n	8002cd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f892 	bl	8002de6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e012      	b.n	8002cf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f831 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	80002000 	.word	0x80002000

08002d00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d103      	bne.n	8002d1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d007      	beq.n	8002d3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	619a      	str	r2, [r3, #24]
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	e031      	b.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d02d      	beq.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7ff f9a9 	bl	80020b8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d122      	bne.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d113      	bne.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d0be      	beq.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002df2:	e033      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f87f 	bl	8002efc <I2C_IsErrorOccurred>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e031      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d025      	beq.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7ff f952 	bl	80020b8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11a      	bne.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d013      	beq.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e007      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d1c4      	bne.n	8002df4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	e02f      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f838 	bl	8002efc <I2C_IsErrorOccurred>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02d      	b.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7ff f90f 	bl	80020b8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11a      	bne.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d013      	beq.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d1c8      	bne.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d068      	beq.n	8002ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f30:	e049      	b.n	8002fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d045      	beq.n	8002fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7ff f8bd 	bl	80020b8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_IsErrorOccurred+0x54>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d13a      	bne.n	8002fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f72:	d121      	bne.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7a:	d01d      	beq.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d01a      	beq.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f92:	f7ff f891 	bl	80020b8 <HAL_GetTick>
 8002f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	e00e      	b.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f9a:	f7ff f88d 	bl	80020b8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b19      	cmp	r3, #25
 8002fa6:	d907      	bls.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fb6:	e006      	b.n	8002fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d1e9      	bne.n	8002f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d003      	beq.n	8002fdc <I2C_IsErrorOccurred+0xe0>
 8002fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0aa      	beq.n	8002f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800303e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe45 	bl	8002d00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <I2C_IsErrorOccurred+0x1bc>)
 8003082:	400b      	ands	r3, r1
 8003084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	fe00e800 	.word	0xfe00e800

080030bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	4613      	mov	r3, r2
 80030cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030d4:	7a7b      	ldrb	r3, [r7, #9]
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	0d5b      	lsrs	r3, r3, #21
 80030f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <I2C_TransferConfig+0x60>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	43db      	mvns	r3, r3
 8003100:	ea02 0103 	and.w	r1, r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	03ff63ff 	.word	0x03ff63ff

08003120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	d138      	bne.n	80031a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003140:	2302      	movs	r3, #2
 8003142:	e032      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d139      	bne.n	8003240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e033      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2224      	movs	r2, #36	; 0x24
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40007000 	.word	0x40007000

08003270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_PWREx_GetVoltageRange+0x18>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329a:	d130      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d038      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2232      	movs	r2, #50	; 0x32
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d0:	e002      	b.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d102      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f2      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d110      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e00f      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d007      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003314:	4a05      	ldr	r2, [pc, #20]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40007000 	.word	0x40007000
 8003330:	20000090 	.word	0x20000090
 8003334:	431bde83 	.word	0x431bde83

08003338 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f000 bc02 	b.w	8003b50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334c:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003356:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80e4 	beq.w	8003536 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_RCC_OscConfig+0x4c>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	f040 808b 	bne.w	8003492 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	f040 8087 	bne.w	8003492 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_OscConfig+0x64>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e3d9      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_RCC_OscConfig+0x7e>
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b4:	e005      	b.n	80033c2 <HAL_RCC_OscConfig+0x8a>
 80033b6:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d223      	bcs.n	800340e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd54 	bl	8003e78 <RCC_SetFlashLatencyFromMSIRange>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e3ba      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	496d      	ldr	r1, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4968      	ldr	r1, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	e025      	b.n	800345a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4960      	ldr	r1, [pc, #384]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	495b      	ldr	r1, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fd14 	bl	8003e78 <RCC_SetFlashLatencyFromMSIRange>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e37a      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800345a:	f000 fc81 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	4950      	ldr	r1, [pc, #320]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_RCC_OscConfig+0x278>)
 8003478:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fdca 	bl	8002018 <HAL_InitTick>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d052      	beq.n	8003534 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	e35e      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d032      	beq.n	8003500 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fe07 	bl	80020b8 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ae:	f7fe fe03 	bl	80020b8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e347      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4930      	ldr	r1, [pc, #192]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	492b      	ldr	r1, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e01a      	b.n	8003536 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350c:	f7fe fdd4 	bl	80020b8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003514:	f7fe fdd0 	bl	80020b8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e314      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1dc>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d073      	beq.n	800362a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x21c>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d10e      	bne.n	800356c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d063      	beq.n	8003628 <HAL_RCC_OscConfig+0x2f0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d15f      	bne.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e2f1      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x24c>
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e025      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d114      	bne.n	80035b8 <HAL_RCC_OscConfig+0x280>
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800594c 	.word	0x0800594c
 80035b0:	20000090 	.word	0x20000090
 80035b4:	20000094 	.word	0x20000094
 80035b8:	4ba0      	ldr	r3, [pc, #640]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9f      	ldr	r2, [pc, #636]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b9d      	ldr	r3, [pc, #628]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a9c      	ldr	r2, [pc, #624]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe fd6e 	bl	80020b8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe fd6a 	bl	80020b8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e2ae      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2a8>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fd5a 	bl	80020b8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe fd56 	bl	80020b8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e29a      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361a:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x2d0>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d060      	beq.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x310>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d119      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d116      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x328>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e277      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	4973      	ldr	r1, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003674:	e040      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367e:	4b6f      	ldr	r3, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fd15 	bl	80020b8 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fd11 	bl	80020b8 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e255      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b62      	ldr	r3, [pc, #392]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	495f      	ldr	r1, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5c      	ldr	r2, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe fcf1 	bl	80020b8 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe fced 	bl	80020b8 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e231      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03c      	beq.n	800377e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fccc 	bl	80020b8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003724:	f7fe fcc8 	bl	80020b8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e20c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCC_OscConfig+0x3ec>
 8003744:	e01b      	b.n	800377e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fcaf 	bl	80020b8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375e:	f7fe fcab 	bl	80020b8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1ef      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a6 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fc72 	bl	80020b8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fe fc6e 	bl	80020b8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1b2      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_RCC_OscConfig+0x4d8>
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380e:	e029      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d115      	bne.n	8003844 <HAL_RCC_OscConfig+0x50c>
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003838:	e014      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	4a99      	ldr	r2, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a95      	ldr	r2, [pc, #596]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d016      	beq.n	800389a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fc24 	bl	80020b8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fc20 	bl	80020b8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e162      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ed      	beq.n	8003874 <HAL_RCC_OscConfig+0x53c>
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fc0d 	bl	80020b8 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe fc09 	bl	80020b8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e14b      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ed      	bne.n	80038a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a77      	ldr	r2, [pc, #476]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03c      	beq.n	800395e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01c      	beq.n	8003926 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038ec:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f2:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fbdc 	bl	80020b8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003904:	f7fe fbd8 	bl	80020b8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e11c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ef      	beq.n	8003904 <HAL_RCC_OscConfig+0x5cc>
 8003924:	e01b      	b.n	800395e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392c:	4a60      	ldr	r2, [pc, #384]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fe fbbf 	bl	80020b8 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393e:	f7fe fbbb 	bl	80020b8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0ff      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003950:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ef      	bne.n	800393e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80f3 	beq.w	8003b4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	2b02      	cmp	r3, #2
 800396e:	f040 80c9 	bne.w	8003b04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d12c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	3b01      	subs	r3, #1
 8003992:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d123      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d11b      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d113      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	3b01      	subs	r3, #1
 80039c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d06b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d062      	beq.n	8003aac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0ac      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 80039fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a02:	f7fe fb59 	bl	80020b8 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fe fb55 	bl	80020b8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e099      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_RCC_OscConfig+0x77c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a42:	0212      	lsls	r2, r2, #8
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0552      	lsls	r2, r2, #21
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0652      	lsls	r2, r2, #25
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a62:	06d2      	lsls	r2, r2, #27
 8003a64:	430a      	orrs	r2, r1
 8003a66:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a84:	f7fe fb18 	bl	80020b8 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb14 	bl	80020b8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e058      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_OscConfig+0x778>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aaa:	e050      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04f      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d144      	bne.n	8003b4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003adc:	f7fe faec 	bl	80020b8 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe fae8 	bl	80020b8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e02c      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7ac>
 8003b02:	e024      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d01f      	beq.n	8003b4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fe facf 	bl	80020b8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe facb 	bl	80020b8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4905      	ldr	r1, [pc, #20]	; (8003b58 <HAL_RCC_OscConfig+0x820>)
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_OscConfig+0x824>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
 8003b48:	e001      	b.n	8003b4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	feeefffc 	.word	0xfeeefffc

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0e7      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d910      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4970      	ldr	r1, [pc, #448]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cf      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d908      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4960      	ldr	r1, [pc, #384]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04c      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	4b5a      	ldr	r3, [pc, #360]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0a6      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e09a      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c16:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08e      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e086      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4943      	ldr	r1, [pc, #268]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fe fa36 	bl	80020b8 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fe fa32 	bl	80020b8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e06e      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d208      	bcs.n	8003ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	492b      	ldr	r1, [pc, #172]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d210      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 0207 	bic.w	r2, r3, #7
 8003cbc:	4923      	ldr	r1, [pc, #140]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e036      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4918      	ldr	r1, [pc, #96]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4910      	ldr	r1, [pc, #64]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d14:	f000 f824 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	490b      	ldr	r1, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1f4>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1f8>)
 8003d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1fc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe f96d 	bl	8002018 <HAL_InitTick>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d42:	7afb      	ldrb	r3, [r7, #11]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40021000 	.word	0x40021000
 8003d54:	0800594c 	.word	0x0800594c
 8003d58:	20000090 	.word	0x20000090
 8003d5c:	20000094 	.word	0x20000094

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d121      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d11e      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d134      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d003      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0xac>
 8003e04:	e005      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e08:	617b      	str	r3, [r7, #20]
      break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0e:	617b      	str	r3, [r7, #20]
      break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	0e5b      	lsrs	r3, r3, #25
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e58:	69bb      	ldr	r3, [r7, #24]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800595c 	.word	0x0800595c
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e90:	f7ff f9ee 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003e94:	6178      	str	r0, [r7, #20]
 8003e96:	e014      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003eb0:	f7ff f9de 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d10b      	bne.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d919      	bls.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ed4:	d902      	bls.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e013      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003edc:	2301      	movs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e010      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d902      	bls.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ee8:	2303      	movs	r3, #3
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e00a      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d102      	bne.n	8003efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	e004      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b70      	cmp	r3, #112	; 0x70
 8003efe:	d101      	bne.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f00:	2301      	movs	r3, #1
 8003f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 0207 	bic.w	r2, r3, #7
 8003f0c:	4909      	ldr	r1, [pc, #36]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f40:	2300      	movs	r3, #0
 8003f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f44:	2300      	movs	r3, #0
 8003f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d031      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f5c:	d01a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f62:	d814      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f6c:	d10f      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f7a:	e00c      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f9de 	bl	8004344 <RCCEx_PLLSAI1_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8c:	e003      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	74fb      	strb	r3, [r7, #19]
      break;
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f9c:	4b51      	ldr	r3, [pc, #324]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	494e      	ldr	r1, [pc, #312]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fb2:	e001      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 809e 	beq.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fca:	4b46      	ldr	r3, [pc, #280]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6593      	str	r3, [r2, #88]	; 0x58
 8003fec:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a39      	ldr	r2, [pc, #228]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004008:	f7fe f856 	bl	80020b8 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800400e:	e009      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fe f852 	bl	80020b8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	74fb      	strb	r3, [r7, #19]
        break;
 8004022:	e005      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004024:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d15a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004040:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	429a      	cmp	r2, r3
 8004050:	d019      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d016      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe f812 	bl	80020b8 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe f80e 	bl	80020b8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d902      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	74fb      	strb	r3, [r7, #19]
            break;
 80040ae:	e006      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ec      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	4904      	ldr	r1, [pc, #16]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	74bb      	strb	r3, [r7, #18]
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f0:	7c7b      	ldrb	r3, [r7, #17]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f6:	4b8a      	ldr	r3, [pc, #552]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	4a89      	ldr	r2, [pc, #548]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410e:	4b84      	ldr	r3, [pc, #528]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f023 0203 	bic.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4980      	ldr	r1, [pc, #512]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 020c 	bic.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	4978      	ldr	r1, [pc, #480]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	496f      	ldr	r1, [pc, #444]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004174:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	4967      	ldr	r1, [pc, #412]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004196:	4b62      	ldr	r3, [pc, #392]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	495e      	ldr	r1, [pc, #376]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4956      	ldr	r1, [pc, #344]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041da:	4b51      	ldr	r3, [pc, #324]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	494d      	ldr	r1, [pc, #308]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d028      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fc:	4b48      	ldr	r3, [pc, #288]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4945      	ldr	r1, [pc, #276]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421a:	d106      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421c:	4b40      	ldr	r3, [pc, #256]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004226:	60d3      	str	r3, [r2, #12]
 8004228:	e011      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004232:	d10c      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f882 	bl	8004344 <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d028      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	492d      	ldr	r1, [pc, #180]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a28      	ldr	r2, [pc, #160]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004284:	60d3      	str	r3, [r2, #12]
 8004286:	e011      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f853 	bl	8004344 <RCCEx_PLLSAI1_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01c      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f830 	bl	8004344 <RCCEx_PLLSAI1_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430c:	4904      	ldr	r1, [pc, #16]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004314:	7cbb      	ldrb	r3, [r7, #18]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000

08004324 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6013      	str	r3, [r2, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000

08004344 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004352:	4b74      	ldr	r3, [pc, #464]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800435e:	4b71      	ldr	r3, [pc, #452]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0203 	and.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d10d      	bne.n	800438a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
       ||
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004376:	4b6b      	ldr	r3, [pc, #428]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
       ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d047      	beq.n	800441a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	e044      	b.n	800441a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d018      	beq.n	80043ca <RCCEx_PLLSAI1_Config+0x86>
 8004398:	2b03      	cmp	r3, #3
 800439a:	d825      	bhi.n	80043e8 <RCCEx_PLLSAI1_Config+0xa4>
 800439c:	2b01      	cmp	r3, #1
 800439e:	d002      	beq.n	80043a6 <RCCEx_PLLSAI1_Config+0x62>
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d009      	beq.n	80043b8 <RCCEx_PLLSAI1_Config+0x74>
 80043a4:	e020      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043a6:	4b5f      	ldr	r3, [pc, #380]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11d      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b6:	e01a      	b.n	80043ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b8:	4b5a      	ldr	r3, [pc, #360]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e013      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ca:	4b56      	ldr	r3, [pc, #344]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043d6:	4b53      	ldr	r3, [pc, #332]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043e6:	e006      	b.n	80043f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e004      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10d      	bne.n	800441a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043fe:	4b49      	ldr	r3, [pc, #292]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	430b      	orrs	r3, r1
 8004414:	4943      	ldr	r1, [pc, #268]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d17c      	bne.n	800451a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004420:	4b40      	ldr	r3, [pc, #256]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd fe44 	bl	80020b8 <HAL_GetTick>
 8004430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004432:	e009      	b.n	8004448 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004434:	f7fd fe40 	bl	80020b8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d902      	bls.n	8004448 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	73fb      	strb	r3, [r7, #15]
        break;
 8004446:	e005      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ef      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d15f      	bne.n	800451a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d110      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004468:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6892      	ldr	r2, [r2, #8]
 8004470:	0211      	lsls	r1, r2, #8
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	06d2      	lsls	r2, r2, #27
 8004478:	430a      	orrs	r2, r1
 800447a:	492a      	ldr	r1, [pc, #168]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	610b      	str	r3, [r1, #16]
 8004480:	e027      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d112      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	0211      	lsls	r1, r2, #8
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6912      	ldr	r2, [r2, #16]
 800449e:	0852      	lsrs	r2, r2, #1
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0552      	lsls	r2, r2, #21
 80044a4:	430a      	orrs	r2, r1
 80044a6:	491f      	ldr	r1, [pc, #124]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	610b      	str	r3, [r1, #16]
 80044ac:	e011      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	0211      	lsls	r1, r2, #8
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6952      	ldr	r2, [r2, #20]
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0652      	lsls	r2, r2, #25
 80044ca:	430a      	orrs	r2, r1
 80044cc:	4915      	ldr	r1, [pc, #84]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fd fdeb 	bl	80020b8 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e4:	e009      	b.n	80044fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e6:	f7fd fde7 	bl	80020b8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d902      	bls.n	80044fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	73fb      	strb	r3, [r7, #15]
          break;
 80044f8:	e005      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0ef      	beq.n	80044e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200000e8 	.word	0x200000e8

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f001 f9e8 	bl	800592c <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	08005a30 	.word	0x08005a30
 8004580:	08005a30 	.word	0x08005a30
 8004584:	08005a30 	.word	0x08005a30
 8004588:	08005a34 	.word	0x08005a34

0800458c <atan2>:
 800458c:	f000 bb2c 	b.w	8004be8 <__ieee754_atan2>

08004590 <pow>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	ed2d 8b02 	vpush	{d8}
 8004596:	eeb0 8a40 	vmov.f32	s16, s0
 800459a:	eef0 8a60 	vmov.f32	s17, s1
 800459e:	ec55 4b11 	vmov	r4, r5, d1
 80045a2:	f000 fbe9 	bl	8004d78 <__ieee754_pow>
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	ec57 6b10 	vmov	r6, r7, d0
 80045b2:	f7fc fa63 	bl	8000a7c <__aeabi_dcmpun>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d13b      	bne.n	8004632 <pow+0xa2>
 80045ba:	ec51 0b18 	vmov	r0, r1, d8
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	f7fc fa29 	bl	8000a18 <__aeabi_dcmpeq>
 80045c6:	b1b8      	cbz	r0, 80045f8 <pow+0x68>
 80045c8:	2200      	movs	r2, #0
 80045ca:	2300      	movs	r3, #0
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fc fa22 	bl	8000a18 <__aeabi_dcmpeq>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d146      	bne.n	8004666 <pow+0xd6>
 80045d8:	ec45 4b10 	vmov	d0, r4, r5
 80045dc:	f000 fa1d 	bl	8004a1a <finite>
 80045e0:	b338      	cbz	r0, 8004632 <pow+0xa2>
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fc fa1f 	bl	8000a2c <__aeabi_dcmplt>
 80045ee:	b300      	cbz	r0, 8004632 <pow+0xa2>
 80045f0:	f7ff ffa2 	bl	8004538 <__errno>
 80045f4:	2322      	movs	r3, #34	; 0x22
 80045f6:	e01b      	b.n	8004630 <pow+0xa0>
 80045f8:	ec47 6b10 	vmov	d0, r6, r7
 80045fc:	f000 fa0d 	bl	8004a1a <finite>
 8004600:	b9e0      	cbnz	r0, 800463c <pow+0xac>
 8004602:	eeb0 0a48 	vmov.f32	s0, s16
 8004606:	eef0 0a68 	vmov.f32	s1, s17
 800460a:	f000 fa06 	bl	8004a1a <finite>
 800460e:	b1a8      	cbz	r0, 800463c <pow+0xac>
 8004610:	ec45 4b10 	vmov	d0, r4, r5
 8004614:	f000 fa01 	bl	8004a1a <finite>
 8004618:	b180      	cbz	r0, 800463c <pow+0xac>
 800461a:	4632      	mov	r2, r6
 800461c:	463b      	mov	r3, r7
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fc fa2b 	bl	8000a7c <__aeabi_dcmpun>
 8004626:	2800      	cmp	r0, #0
 8004628:	d0e2      	beq.n	80045f0 <pow+0x60>
 800462a:	f7ff ff85 	bl	8004538 <__errno>
 800462e:	2321      	movs	r3, #33	; 0x21
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	ecbd 8b02 	vpop	{d8}
 8004636:	ec47 6b10 	vmov	d0, r6, r7
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4630      	mov	r0, r6
 8004642:	4639      	mov	r1, r7
 8004644:	f7fc f9e8 	bl	8000a18 <__aeabi_dcmpeq>
 8004648:	2800      	cmp	r0, #0
 800464a:	d0f2      	beq.n	8004632 <pow+0xa2>
 800464c:	eeb0 0a48 	vmov.f32	s0, s16
 8004650:	eef0 0a68 	vmov.f32	s1, s17
 8004654:	f000 f9e1 	bl	8004a1a <finite>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0ea      	beq.n	8004632 <pow+0xa2>
 800465c:	ec45 4b10 	vmov	d0, r4, r5
 8004660:	f000 f9db 	bl	8004a1a <finite>
 8004664:	e7c3      	b.n	80045ee <pow+0x5e>
 8004666:	4f01      	ldr	r7, [pc, #4]	; (800466c <pow+0xdc>)
 8004668:	2600      	movs	r6, #0
 800466a:	e7e2      	b.n	8004632 <pow+0xa2>
 800466c:	3ff00000 	.word	0x3ff00000

08004670 <sqrt>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	ed2d 8b02 	vpush	{d8}
 8004676:	ec55 4b10 	vmov	r4, r5, d0
 800467a:	f000 f9d9 	bl	8004a30 <__ieee754_sqrt>
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	eeb0 8a40 	vmov.f32	s16, s0
 800468a:	eef0 8a60 	vmov.f32	s17, s1
 800468e:	f7fc f9f5 	bl	8000a7c <__aeabi_dcmpun>
 8004692:	b990      	cbnz	r0, 80046ba <sqrt+0x4a>
 8004694:	2200      	movs	r2, #0
 8004696:	2300      	movs	r3, #0
 8004698:	4620      	mov	r0, r4
 800469a:	4629      	mov	r1, r5
 800469c:	f7fc f9c6 	bl	8000a2c <__aeabi_dcmplt>
 80046a0:	b158      	cbz	r0, 80046ba <sqrt+0x4a>
 80046a2:	f7ff ff49 	bl	8004538 <__errno>
 80046a6:	2321      	movs	r3, #33	; 0x21
 80046a8:	6003      	str	r3, [r0, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2300      	movs	r3, #0
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f7fc f873 	bl	800079c <__aeabi_ddiv>
 80046b6:	ec41 0b18 	vmov	d8, r0, r1
 80046ba:	eeb0 0a48 	vmov.f32	s0, s16
 80046be:	eef0 0a68 	vmov.f32	s1, s17
 80046c2:	ecbd 8b02 	vpop	{d8}
 80046c6:	bd38      	pop	{r3, r4, r5, pc}

080046c8 <atan>:
 80046c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	ec55 4b10 	vmov	r4, r5, d0
 80046d0:	4bc3      	ldr	r3, [pc, #780]	; (80049e0 <atan+0x318>)
 80046d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80046d6:	429e      	cmp	r6, r3
 80046d8:	46ab      	mov	fp, r5
 80046da:	dd18      	ble.n	800470e <atan+0x46>
 80046dc:	4bc1      	ldr	r3, [pc, #772]	; (80049e4 <atan+0x31c>)
 80046de:	429e      	cmp	r6, r3
 80046e0:	dc01      	bgt.n	80046e6 <atan+0x1e>
 80046e2:	d109      	bne.n	80046f8 <atan+0x30>
 80046e4:	b144      	cbz	r4, 80046f8 <atan+0x30>
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	4620      	mov	r0, r4
 80046ec:	4629      	mov	r1, r5
 80046ee:	f7fb fd75 	bl	80001dc <__adddf3>
 80046f2:	4604      	mov	r4, r0
 80046f4:	460d      	mov	r5, r1
 80046f6:	e006      	b.n	8004706 <atan+0x3e>
 80046f8:	f1bb 0f00 	cmp.w	fp, #0
 80046fc:	f300 8131 	bgt.w	8004962 <atan+0x29a>
 8004700:	a59b      	add	r5, pc, #620	; (adr r5, 8004970 <atan+0x2a8>)
 8004702:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004706:	ec45 4b10 	vmov	d0, r4, r5
 800470a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470e:	4bb6      	ldr	r3, [pc, #728]	; (80049e8 <atan+0x320>)
 8004710:	429e      	cmp	r6, r3
 8004712:	dc14      	bgt.n	800473e <atan+0x76>
 8004714:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004718:	429e      	cmp	r6, r3
 800471a:	dc0d      	bgt.n	8004738 <atan+0x70>
 800471c:	a396      	add	r3, pc, #600	; (adr r3, 8004978 <atan+0x2b0>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	ee10 0a10 	vmov	r0, s0
 8004726:	4629      	mov	r1, r5
 8004728:	f7fb fd58 	bl	80001dc <__adddf3>
 800472c:	4baf      	ldr	r3, [pc, #700]	; (80049ec <atan+0x324>)
 800472e:	2200      	movs	r2, #0
 8004730:	f7fc f99a 	bl	8000a68 <__aeabi_dcmpgt>
 8004734:	2800      	cmp	r0, #0
 8004736:	d1e6      	bne.n	8004706 <atan+0x3e>
 8004738:	f04f 3aff 	mov.w	sl, #4294967295
 800473c:	e02b      	b.n	8004796 <atan+0xce>
 800473e:	f000 f963 	bl	8004a08 <fabs>
 8004742:	4bab      	ldr	r3, [pc, #684]	; (80049f0 <atan+0x328>)
 8004744:	429e      	cmp	r6, r3
 8004746:	ec55 4b10 	vmov	r4, r5, d0
 800474a:	f300 80bf 	bgt.w	80048cc <atan+0x204>
 800474e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004752:	429e      	cmp	r6, r3
 8004754:	f300 80a0 	bgt.w	8004898 <atan+0x1d0>
 8004758:	ee10 2a10 	vmov	r2, s0
 800475c:	ee10 0a10 	vmov	r0, s0
 8004760:	462b      	mov	r3, r5
 8004762:	4629      	mov	r1, r5
 8004764:	f7fb fd3a 	bl	80001dc <__adddf3>
 8004768:	4ba0      	ldr	r3, [pc, #640]	; (80049ec <atan+0x324>)
 800476a:	2200      	movs	r2, #0
 800476c:	f7fb fd34 	bl	80001d8 <__aeabi_dsub>
 8004770:	2200      	movs	r2, #0
 8004772:	4606      	mov	r6, r0
 8004774:	460f      	mov	r7, r1
 8004776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f7fb fd2d 	bl	80001dc <__adddf3>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fc f807 	bl	800079c <__aeabi_ddiv>
 800478e:	f04f 0a00 	mov.w	sl, #0
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb fed3 	bl	8000548 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4680      	mov	r8, r0
 80047a8:	4689      	mov	r9, r1
 80047aa:	f7fb fecd 	bl	8000548 <__aeabi_dmul>
 80047ae:	a374      	add	r3, pc, #464	; (adr r3, 8004980 <atan+0x2b8>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	f7fb fec6 	bl	8000548 <__aeabi_dmul>
 80047bc:	a372      	add	r3, pc, #456	; (adr r3, 8004988 <atan+0x2c0>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb fd0b 	bl	80001dc <__adddf3>
 80047c6:	4632      	mov	r2, r6
 80047c8:	463b      	mov	r3, r7
 80047ca:	f7fb febd 	bl	8000548 <__aeabi_dmul>
 80047ce:	a370      	add	r3, pc, #448	; (adr r3, 8004990 <atan+0x2c8>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fb fd02 	bl	80001dc <__adddf3>
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	f7fb feb4 	bl	8000548 <__aeabi_dmul>
 80047e0:	a36d      	add	r3, pc, #436	; (adr r3, 8004998 <atan+0x2d0>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb fcf9 	bl	80001dc <__adddf3>
 80047ea:	4632      	mov	r2, r6
 80047ec:	463b      	mov	r3, r7
 80047ee:	f7fb feab 	bl	8000548 <__aeabi_dmul>
 80047f2:	a36b      	add	r3, pc, #428	; (adr r3, 80049a0 <atan+0x2d8>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb fcf0 	bl	80001dc <__adddf3>
 80047fc:	4632      	mov	r2, r6
 80047fe:	463b      	mov	r3, r7
 8004800:	f7fb fea2 	bl	8000548 <__aeabi_dmul>
 8004804:	a368      	add	r3, pc, #416	; (adr r3, 80049a8 <atan+0x2e0>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fce7 	bl	80001dc <__adddf3>
 800480e:	4642      	mov	r2, r8
 8004810:	464b      	mov	r3, r9
 8004812:	f7fb fe99 	bl	8000548 <__aeabi_dmul>
 8004816:	a366      	add	r3, pc, #408	; (adr r3, 80049b0 <atan+0x2e8>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	4680      	mov	r8, r0
 800481e:	4689      	mov	r9, r1
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	f7fb fe90 	bl	8000548 <__aeabi_dmul>
 8004828:	a363      	add	r3, pc, #396	; (adr r3, 80049b8 <atan+0x2f0>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f7fb fcd3 	bl	80001d8 <__aeabi_dsub>
 8004832:	4632      	mov	r2, r6
 8004834:	463b      	mov	r3, r7
 8004836:	f7fb fe87 	bl	8000548 <__aeabi_dmul>
 800483a:	a361      	add	r3, pc, #388	; (adr r3, 80049c0 <atan+0x2f8>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb fcca 	bl	80001d8 <__aeabi_dsub>
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	f7fb fe7e 	bl	8000548 <__aeabi_dmul>
 800484c:	a35e      	add	r3, pc, #376	; (adr r3, 80049c8 <atan+0x300>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f7fb fcc1 	bl	80001d8 <__aeabi_dsub>
 8004856:	4632      	mov	r2, r6
 8004858:	463b      	mov	r3, r7
 800485a:	f7fb fe75 	bl	8000548 <__aeabi_dmul>
 800485e:	a35c      	add	r3, pc, #368	; (adr r3, 80049d0 <atan+0x308>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fcb8 	bl	80001d8 <__aeabi_dsub>
 8004868:	4632      	mov	r2, r6
 800486a:	463b      	mov	r3, r7
 800486c:	f7fb fe6c 	bl	8000548 <__aeabi_dmul>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4640      	mov	r0, r8
 8004876:	4649      	mov	r1, r9
 8004878:	f7fb fcb0 	bl	80001dc <__adddf3>
 800487c:	4622      	mov	r2, r4
 800487e:	462b      	mov	r3, r5
 8004880:	f7fb fe62 	bl	8000548 <__aeabi_dmul>
 8004884:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	d14b      	bne.n	8004926 <atan+0x25e>
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fca1 	bl	80001d8 <__aeabi_dsub>
 8004896:	e72c      	b.n	80046f2 <atan+0x2a>
 8004898:	ee10 0a10 	vmov	r0, s0
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <atan+0x324>)
 800489e:	2200      	movs	r2, #0
 80048a0:	4629      	mov	r1, r5
 80048a2:	f7fb fc99 	bl	80001d8 <__aeabi_dsub>
 80048a6:	4b51      	ldr	r3, [pc, #324]	; (80049ec <atan+0x324>)
 80048a8:	4606      	mov	r6, r0
 80048aa:	460f      	mov	r7, r1
 80048ac:	2200      	movs	r2, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fb fc93 	bl	80001dc <__adddf3>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4630      	mov	r0, r6
 80048bc:	4639      	mov	r1, r7
 80048be:	f7fb ff6d 	bl	800079c <__aeabi_ddiv>
 80048c2:	f04f 0a01 	mov.w	sl, #1
 80048c6:	4604      	mov	r4, r0
 80048c8:	460d      	mov	r5, r1
 80048ca:	e764      	b.n	8004796 <atan+0xce>
 80048cc:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <atan+0x32c>)
 80048ce:	429e      	cmp	r6, r3
 80048d0:	da1d      	bge.n	800490e <atan+0x246>
 80048d2:	ee10 0a10 	vmov	r0, s0
 80048d6:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <atan+0x330>)
 80048d8:	2200      	movs	r2, #0
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fb fc7c 	bl	80001d8 <__aeabi_dsub>
 80048e0:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <atan+0x330>)
 80048e2:	4606      	mov	r6, r0
 80048e4:	460f      	mov	r7, r1
 80048e6:	2200      	movs	r2, #0
 80048e8:	4620      	mov	r0, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	f7fb fe2c 	bl	8000548 <__aeabi_dmul>
 80048f0:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <atan+0x324>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	f7fb fc72 	bl	80001dc <__adddf3>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4630      	mov	r0, r6
 80048fe:	4639      	mov	r1, r7
 8004900:	f7fb ff4c 	bl	800079c <__aeabi_ddiv>
 8004904:	f04f 0a02 	mov.w	sl, #2
 8004908:	4604      	mov	r4, r0
 800490a:	460d      	mov	r5, r1
 800490c:	e743      	b.n	8004796 <atan+0xce>
 800490e:	462b      	mov	r3, r5
 8004910:	ee10 2a10 	vmov	r2, s0
 8004914:	4939      	ldr	r1, [pc, #228]	; (80049fc <atan+0x334>)
 8004916:	2000      	movs	r0, #0
 8004918:	f7fb ff40 	bl	800079c <__aeabi_ddiv>
 800491c:	f04f 0a03 	mov.w	sl, #3
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	e737      	b.n	8004796 <atan+0xce>
 8004926:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <atan+0x338>)
 8004928:	4e36      	ldr	r6, [pc, #216]	; (8004a04 <atan+0x33c>)
 800492a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fc51 	bl	80001d8 <__aeabi_dsub>
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f7fb fc4d 	bl	80001d8 <__aeabi_dsub>
 800493e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	e9d6 0100 	ldrd	r0, r1, [r6]
 800494a:	f7fb fc45 	bl	80001d8 <__aeabi_dsub>
 800494e:	f1bb 0f00 	cmp.w	fp, #0
 8004952:	4604      	mov	r4, r0
 8004954:	460d      	mov	r5, r1
 8004956:	f6bf aed6 	bge.w	8004706 <atan+0x3e>
 800495a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800495e:	461d      	mov	r5, r3
 8004960:	e6d1      	b.n	8004706 <atan+0x3e>
 8004962:	a51d      	add	r5, pc, #116	; (adr r5, 80049d8 <atan+0x310>)
 8004964:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004968:	e6cd      	b.n	8004706 <atan+0x3e>
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	54442d18 	.word	0x54442d18
 8004974:	bff921fb 	.word	0xbff921fb
 8004978:	8800759c 	.word	0x8800759c
 800497c:	7e37e43c 	.word	0x7e37e43c
 8004980:	e322da11 	.word	0xe322da11
 8004984:	3f90ad3a 	.word	0x3f90ad3a
 8004988:	24760deb 	.word	0x24760deb
 800498c:	3fa97b4b 	.word	0x3fa97b4b
 8004990:	a0d03d51 	.word	0xa0d03d51
 8004994:	3fb10d66 	.word	0x3fb10d66
 8004998:	c54c206e 	.word	0xc54c206e
 800499c:	3fb745cd 	.word	0x3fb745cd
 80049a0:	920083ff 	.word	0x920083ff
 80049a4:	3fc24924 	.word	0x3fc24924
 80049a8:	5555550d 	.word	0x5555550d
 80049ac:	3fd55555 	.word	0x3fd55555
 80049b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80049b4:	bfa2b444 	.word	0xbfa2b444
 80049b8:	52defd9a 	.word	0x52defd9a
 80049bc:	3fadde2d 	.word	0x3fadde2d
 80049c0:	af749a6d 	.word	0xaf749a6d
 80049c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80049c8:	fe231671 	.word	0xfe231671
 80049cc:	3fbc71c6 	.word	0x3fbc71c6
 80049d0:	9998ebc4 	.word	0x9998ebc4
 80049d4:	3fc99999 	.word	0x3fc99999
 80049d8:	54442d18 	.word	0x54442d18
 80049dc:	3ff921fb 	.word	0x3ff921fb
 80049e0:	440fffff 	.word	0x440fffff
 80049e4:	7ff00000 	.word	0x7ff00000
 80049e8:	3fdbffff 	.word	0x3fdbffff
 80049ec:	3ff00000 	.word	0x3ff00000
 80049f0:	3ff2ffff 	.word	0x3ff2ffff
 80049f4:	40038000 	.word	0x40038000
 80049f8:	3ff80000 	.word	0x3ff80000
 80049fc:	bff00000 	.word	0xbff00000
 8004a00:	080059b0 	.word	0x080059b0
 8004a04:	08005990 	.word	0x08005990

08004a08 <fabs>:
 8004a08:	ec51 0b10 	vmov	r0, r1, d0
 8004a0c:	ee10 2a10 	vmov	r2, s0
 8004a10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a14:	ec43 2b10 	vmov	d0, r2, r3
 8004a18:	4770      	bx	lr

08004a1a <finite>:
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	ed8d 0b00 	vstr	d0, [sp]
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004a26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004a2a:	0fc0      	lsrs	r0, r0, #31
 8004a2c:	b002      	add	sp, #8
 8004a2e:	4770      	bx	lr

08004a30 <__ieee754_sqrt>:
 8004a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	ec55 4b10 	vmov	r4, r5, d0
 8004a38:	4e67      	ldr	r6, [pc, #412]	; (8004bd8 <__ieee754_sqrt+0x1a8>)
 8004a3a:	43ae      	bics	r6, r5
 8004a3c:	ee10 0a10 	vmov	r0, s0
 8004a40:	ee10 2a10 	vmov	r2, s0
 8004a44:	4629      	mov	r1, r5
 8004a46:	462b      	mov	r3, r5
 8004a48:	d10d      	bne.n	8004a66 <__ieee754_sqrt+0x36>
 8004a4a:	f7fb fd7d 	bl	8000548 <__aeabi_dmul>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fbc1 	bl	80001dc <__adddf3>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	ec45 4b10 	vmov	d0, r4, r5
 8004a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	dc0b      	bgt.n	8004a82 <__ieee754_sqrt+0x52>
 8004a6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004a6e:	4326      	orrs	r6, r4
 8004a70:	d0f5      	beq.n	8004a5e <__ieee754_sqrt+0x2e>
 8004a72:	b135      	cbz	r5, 8004a82 <__ieee754_sqrt+0x52>
 8004a74:	f7fb fbb0 	bl	80001d8 <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	f7fb fe8e 	bl	800079c <__aeabi_ddiv>
 8004a80:	e7eb      	b.n	8004a5a <__ieee754_sqrt+0x2a>
 8004a82:	1509      	asrs	r1, r1, #20
 8004a84:	f000 808d 	beq.w	8004ba2 <__ieee754_sqrt+0x172>
 8004a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a8c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a94:	07c9      	lsls	r1, r1, #31
 8004a96:	bf5c      	itt	pl
 8004a98:	005b      	lslpl	r3, r3, #1
 8004a9a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004a9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004aa2:	bf58      	it	pl
 8004aa4:	0052      	lslpl	r2, r2, #1
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004aac:	1076      	asrs	r6, r6, #1
 8004aae:	0052      	lsls	r2, r2, #1
 8004ab0:	f04f 0e16 	mov.w	lr, #22
 8004ab4:	46ac      	mov	ip, r5
 8004ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aba:	eb0c 0001 	add.w	r0, ip, r1
 8004abe:	4298      	cmp	r0, r3
 8004ac0:	bfde      	ittt	le
 8004ac2:	1a1b      	suble	r3, r3, r0
 8004ac4:	eb00 0c01 	addle.w	ip, r0, r1
 8004ac8:	186d      	addle	r5, r5, r1
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	f1be 0e01 	subs.w	lr, lr, #1
 8004ad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004adc:	d1ed      	bne.n	8004aba <__ieee754_sqrt+0x8a>
 8004ade:	4674      	mov	r4, lr
 8004ae0:	2720      	movs	r7, #32
 8004ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ae6:	4563      	cmp	r3, ip
 8004ae8:	eb01 000e 	add.w	r0, r1, lr
 8004aec:	dc02      	bgt.n	8004af4 <__ieee754_sqrt+0xc4>
 8004aee:	d113      	bne.n	8004b18 <__ieee754_sqrt+0xe8>
 8004af0:	4290      	cmp	r0, r2
 8004af2:	d811      	bhi.n	8004b18 <__ieee754_sqrt+0xe8>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	eb00 0e01 	add.w	lr, r0, r1
 8004afa:	da57      	bge.n	8004bac <__ieee754_sqrt+0x17c>
 8004afc:	f1be 0f00 	cmp.w	lr, #0
 8004b00:	db54      	blt.n	8004bac <__ieee754_sqrt+0x17c>
 8004b02:	f10c 0801 	add.w	r8, ip, #1
 8004b06:	eba3 030c 	sub.w	r3, r3, ip
 8004b0a:	4290      	cmp	r0, r2
 8004b0c:	bf88      	it	hi
 8004b0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004b12:	1a12      	subs	r2, r2, r0
 8004b14:	440c      	add	r4, r1
 8004b16:	46c4      	mov	ip, r8
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	3f01      	subs	r7, #1
 8004b1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004b20:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004b24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004b28:	d1dd      	bne.n	8004ae6 <__ieee754_sqrt+0xb6>
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d01b      	beq.n	8004b66 <__ieee754_sqrt+0x136>
 8004b2e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004bdc <__ieee754_sqrt+0x1ac>
 8004b32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004be0 <__ieee754_sqrt+0x1b0>
 8004b36:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8004b3e:	f7fb fb4b 	bl	80001d8 <__aeabi_dsub>
 8004b42:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	f7fb ff77 	bl	8000a40 <__aeabi_dcmple>
 8004b52:	b140      	cbz	r0, 8004b66 <__ieee754_sqrt+0x136>
 8004b54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b58:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004b60:	d126      	bne.n	8004bb0 <__ieee754_sqrt+0x180>
 8004b62:	3501      	adds	r5, #1
 8004b64:	463c      	mov	r4, r7
 8004b66:	106a      	asrs	r2, r5, #1
 8004b68:	0863      	lsrs	r3, r4, #1
 8004b6a:	07e9      	lsls	r1, r5, #31
 8004b6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004b70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004b74:	bf48      	it	mi
 8004b76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004b7e:	461c      	mov	r4, r3
 8004b80:	e76d      	b.n	8004a5e <__ieee754_sqrt+0x2e>
 8004b82:	0ad3      	lsrs	r3, r2, #11
 8004b84:	3815      	subs	r0, #21
 8004b86:	0552      	lsls	r2, r2, #21
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0fa      	beq.n	8004b82 <__ieee754_sqrt+0x152>
 8004b8c:	02dc      	lsls	r4, r3, #11
 8004b8e:	d50a      	bpl.n	8004ba6 <__ieee754_sqrt+0x176>
 8004b90:	f1c1 0420 	rsb	r4, r1, #32
 8004b94:	fa22 f404 	lsr.w	r4, r2, r4
 8004b98:	1e4d      	subs	r5, r1, #1
 8004b9a:	408a      	lsls	r2, r1
 8004b9c:	4323      	orrs	r3, r4
 8004b9e:	1b41      	subs	r1, r0, r5
 8004ba0:	e772      	b.n	8004a88 <__ieee754_sqrt+0x58>
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	e7f0      	b.n	8004b88 <__ieee754_sqrt+0x158>
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	3101      	adds	r1, #1
 8004baa:	e7ef      	b.n	8004b8c <__ieee754_sqrt+0x15c>
 8004bac:	46e0      	mov	r8, ip
 8004bae:	e7aa      	b.n	8004b06 <__ieee754_sqrt+0xd6>
 8004bb0:	f7fb fb14 	bl	80001dc <__adddf3>
 8004bb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	f7fb ff34 	bl	8000a2c <__aeabi_dcmplt>
 8004bc4:	b120      	cbz	r0, 8004bd0 <__ieee754_sqrt+0x1a0>
 8004bc6:	1ca0      	adds	r0, r4, #2
 8004bc8:	bf08      	it	eq
 8004bca:	3501      	addeq	r5, #1
 8004bcc:	3402      	adds	r4, #2
 8004bce:	e7ca      	b.n	8004b66 <__ieee754_sqrt+0x136>
 8004bd0:	3401      	adds	r4, #1
 8004bd2:	f024 0401 	bic.w	r4, r4, #1
 8004bd6:	e7c6      	b.n	8004b66 <__ieee754_sqrt+0x136>
 8004bd8:	7ff00000 	.word	0x7ff00000
 8004bdc:	200000f0 	.word	0x200000f0
 8004be0:	200000f8 	.word	0x200000f8
 8004be4:	00000000 	.word	0x00000000

08004be8 <__ieee754_atan2>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	ec57 6b11 	vmov	r6, r7, d1
 8004bf0:	4273      	negs	r3, r6
 8004bf2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004d70 <__ieee754_atan2+0x188>
 8004bf6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004bfa:	4333      	orrs	r3, r6
 8004bfc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004c00:	4543      	cmp	r3, r8
 8004c02:	ec51 0b10 	vmov	r0, r1, d0
 8004c06:	ee11 5a10 	vmov	r5, s2
 8004c0a:	d80a      	bhi.n	8004c22 <__ieee754_atan2+0x3a>
 8004c0c:	4244      	negs	r4, r0
 8004c0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c12:	4304      	orrs	r4, r0
 8004c14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004c18:	4544      	cmp	r4, r8
 8004c1a:	ee10 9a10 	vmov	r9, s0
 8004c1e:	468e      	mov	lr, r1
 8004c20:	d907      	bls.n	8004c32 <__ieee754_atan2+0x4a>
 8004c22:	4632      	mov	r2, r6
 8004c24:	463b      	mov	r3, r7
 8004c26:	f7fb fad9 	bl	80001dc <__adddf3>
 8004c2a:	ec41 0b10 	vmov	d0, r0, r1
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004c36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004c3a:	4334      	orrs	r4, r6
 8004c3c:	d103      	bne.n	8004c46 <__ieee754_atan2+0x5e>
 8004c3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c42:	f7ff bd41 	b.w	80046c8 <atan>
 8004c46:	17bc      	asrs	r4, r7, #30
 8004c48:	f004 0402 	and.w	r4, r4, #2
 8004c4c:	ea53 0909 	orrs.w	r9, r3, r9
 8004c50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004c54:	d107      	bne.n	8004c66 <__ieee754_atan2+0x7e>
 8004c56:	2c02      	cmp	r4, #2
 8004c58:	d05f      	beq.n	8004d1a <__ieee754_atan2+0x132>
 8004c5a:	2c03      	cmp	r4, #3
 8004c5c:	d1e5      	bne.n	8004c2a <__ieee754_atan2+0x42>
 8004c5e:	a140      	add	r1, pc, #256	; (adr r1, 8004d60 <__ieee754_atan2+0x178>)
 8004c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c64:	e7e1      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004c66:	4315      	orrs	r5, r2
 8004c68:	d106      	bne.n	8004c78 <__ieee754_atan2+0x90>
 8004c6a:	f1be 0f00 	cmp.w	lr, #0
 8004c6e:	da5f      	bge.n	8004d30 <__ieee754_atan2+0x148>
 8004c70:	a13d      	add	r1, pc, #244	; (adr r1, 8004d68 <__ieee754_atan2+0x180>)
 8004c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c76:	e7d8      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004c78:	4542      	cmp	r2, r8
 8004c7a:	d10f      	bne.n	8004c9c <__ieee754_atan2+0xb4>
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c82:	d107      	bne.n	8004c94 <__ieee754_atan2+0xac>
 8004c84:	2c02      	cmp	r4, #2
 8004c86:	d84c      	bhi.n	8004d22 <__ieee754_atan2+0x13a>
 8004c88:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <__ieee754_atan2+0x170>)
 8004c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c92:	e7ca      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004c94:	2c02      	cmp	r4, #2
 8004c96:	d848      	bhi.n	8004d2a <__ieee754_atan2+0x142>
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <__ieee754_atan2+0x174>)
 8004c9a:	e7f6      	b.n	8004c8a <__ieee754_atan2+0xa2>
 8004c9c:	4543      	cmp	r3, r8
 8004c9e:	d0e4      	beq.n	8004c6a <__ieee754_atan2+0x82>
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004ca6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004caa:	da1e      	bge.n	8004cea <__ieee754_atan2+0x102>
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	da01      	bge.n	8004cb4 <__ieee754_atan2+0xcc>
 8004cb0:	323c      	adds	r2, #60	; 0x3c
 8004cb2:	db1e      	blt.n	8004cf2 <__ieee754_atan2+0x10a>
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	f7fb fd70 	bl	800079c <__aeabi_ddiv>
 8004cbc:	ec41 0b10 	vmov	d0, r0, r1
 8004cc0:	f7ff fea2 	bl	8004a08 <fabs>
 8004cc4:	f7ff fd00 	bl	80046c8 <atan>
 8004cc8:	ec51 0b10 	vmov	r0, r1, d0
 8004ccc:	2c01      	cmp	r4, #1
 8004cce:	d013      	beq.n	8004cf8 <__ieee754_atan2+0x110>
 8004cd0:	2c02      	cmp	r4, #2
 8004cd2:	d015      	beq.n	8004d00 <__ieee754_atan2+0x118>
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d0a8      	beq.n	8004c2a <__ieee754_atan2+0x42>
 8004cd8:	a317      	add	r3, pc, #92	; (adr r3, 8004d38 <__ieee754_atan2+0x150>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f7fb fa7b 	bl	80001d8 <__aeabi_dsub>
 8004ce2:	a317      	add	r3, pc, #92	; (adr r3, 8004d40 <__ieee754_atan2+0x158>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	e014      	b.n	8004d14 <__ieee754_atan2+0x12c>
 8004cea:	a117      	add	r1, pc, #92	; (adr r1, 8004d48 <__ieee754_atan2+0x160>)
 8004cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf0:	e7ec      	b.n	8004ccc <__ieee754_atan2+0xe4>
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	e7e9      	b.n	8004ccc <__ieee754_atan2+0xe4>
 8004cf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	e794      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d00:	a30d      	add	r3, pc, #52	; (adr r3, 8004d38 <__ieee754_atan2+0x150>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa67 	bl	80001d8 <__aeabi_dsub>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	a10c      	add	r1, pc, #48	; (adr r1, 8004d40 <__ieee754_atan2+0x158>)
 8004d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d14:	f7fb fa60 	bl	80001d8 <__aeabi_dsub>
 8004d18:	e787      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d1a:	a109      	add	r1, pc, #36	; (adr r1, 8004d40 <__ieee754_atan2+0x158>)
 8004d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d20:	e783      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d22:	a10b      	add	r1, pc, #44	; (adr r1, 8004d50 <__ieee754_atan2+0x168>)
 8004d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d28:	e77f      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	e77c      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d30:	a105      	add	r1, pc, #20	; (adr r1, 8004d48 <__ieee754_atan2+0x160>)
 8004d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d36:	e778      	b.n	8004c2a <__ieee754_atan2+0x42>
 8004d38:	33145c07 	.word	0x33145c07
 8004d3c:	3ca1a626 	.word	0x3ca1a626
 8004d40:	54442d18 	.word	0x54442d18
 8004d44:	400921fb 	.word	0x400921fb
 8004d48:	54442d18 	.word	0x54442d18
 8004d4c:	3ff921fb 	.word	0x3ff921fb
 8004d50:	54442d18 	.word	0x54442d18
 8004d54:	3fe921fb 	.word	0x3fe921fb
 8004d58:	080059d0 	.word	0x080059d0
 8004d5c:	080059e8 	.word	0x080059e8
 8004d60:	54442d18 	.word	0x54442d18
 8004d64:	c00921fb 	.word	0xc00921fb
 8004d68:	54442d18 	.word	0x54442d18
 8004d6c:	bff921fb 	.word	0xbff921fb
 8004d70:	7ff00000 	.word	0x7ff00000
 8004d74:	00000000 	.word	0x00000000

08004d78 <__ieee754_pow>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	ed2d 8b06 	vpush	{d8-d10}
 8004d80:	b089      	sub	sp, #36	; 0x24
 8004d82:	ed8d 1b00 	vstr	d1, [sp]
 8004d86:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004d8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004d8e:	ea58 0102 	orrs.w	r1, r8, r2
 8004d92:	ec57 6b10 	vmov	r6, r7, d0
 8004d96:	d115      	bne.n	8004dc4 <__ieee754_pow+0x4c>
 8004d98:	19b3      	adds	r3, r6, r6
 8004d9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004d9e:	4152      	adcs	r2, r2
 8004da0:	4299      	cmp	r1, r3
 8004da2:	4b89      	ldr	r3, [pc, #548]	; (8004fc8 <__ieee754_pow+0x250>)
 8004da4:	4193      	sbcs	r3, r2
 8004da6:	f080 84d1 	bcs.w	800574c <__ieee754_pow+0x9d4>
 8004daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fa13 	bl	80001dc <__adddf3>
 8004db6:	ec41 0b10 	vmov	d0, r0, r1
 8004dba:	b009      	add	sp, #36	; 0x24
 8004dbc:	ecbd 8b06 	vpop	{d8-d10}
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <__ieee754_pow+0x254>)
 8004dc6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	ee10 aa10 	vmov	sl, s0
 8004dd0:	463d      	mov	r5, r7
 8004dd2:	dc06      	bgt.n	8004de2 <__ieee754_pow+0x6a>
 8004dd4:	d101      	bne.n	8004dda <__ieee754_pow+0x62>
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d1e7      	bne.n	8004daa <__ieee754_pow+0x32>
 8004dda:	4598      	cmp	r8, r3
 8004ddc:	dc01      	bgt.n	8004de2 <__ieee754_pow+0x6a>
 8004dde:	d10f      	bne.n	8004e00 <__ieee754_pow+0x88>
 8004de0:	b172      	cbz	r2, 8004e00 <__ieee754_pow+0x88>
 8004de2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004de6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004dea:	ea55 050a 	orrs.w	r5, r5, sl
 8004dee:	d1dc      	bne.n	8004daa <__ieee754_pow+0x32>
 8004df0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004df4:	18db      	adds	r3, r3, r3
 8004df6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004dfa:	4152      	adcs	r2, r2
 8004dfc:	429d      	cmp	r5, r3
 8004dfe:	e7d0      	b.n	8004da2 <__ieee754_pow+0x2a>
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	da3b      	bge.n	8004e7c <__ieee754_pow+0x104>
 8004e04:	4b72      	ldr	r3, [pc, #456]	; (8004fd0 <__ieee754_pow+0x258>)
 8004e06:	4598      	cmp	r8, r3
 8004e08:	dc51      	bgt.n	8004eae <__ieee754_pow+0x136>
 8004e0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e0e:	4598      	cmp	r8, r3
 8004e10:	f340 84ab 	ble.w	800576a <__ieee754_pow+0x9f2>
 8004e14:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e1c:	2b14      	cmp	r3, #20
 8004e1e:	dd0f      	ble.n	8004e40 <__ieee754_pow+0xc8>
 8004e20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e24:	fa22 f103 	lsr.w	r1, r2, r3
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	f040 849c 	bne.w	800576a <__ieee754_pow+0x9f2>
 8004e32:	f001 0101 	and.w	r1, r1, #1
 8004e36:	f1c1 0302 	rsb	r3, r1, #2
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	b182      	cbz	r2, 8004e60 <__ieee754_pow+0xe8>
 8004e3e:	e05f      	b.n	8004f00 <__ieee754_pow+0x188>
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d15b      	bne.n	8004efc <__ieee754_pow+0x184>
 8004e44:	f1c3 0314 	rsb	r3, r3, #20
 8004e48:	fa48 f103 	asr.w	r1, r8, r3
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	4543      	cmp	r3, r8
 8004e52:	f040 8487 	bne.w	8005764 <__ieee754_pow+0x9ec>
 8004e56:	f001 0101 	and.w	r1, r1, #1
 8004e5a:	f1c1 0302 	rsb	r3, r1, #2
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <__ieee754_pow+0x25c>)
 8004e62:	4598      	cmp	r8, r3
 8004e64:	d132      	bne.n	8004ecc <__ieee754_pow+0x154>
 8004e66:	f1b9 0f00 	cmp.w	r9, #0
 8004e6a:	f280 8477 	bge.w	800575c <__ieee754_pow+0x9e4>
 8004e6e:	4959      	ldr	r1, [pc, #356]	; (8004fd4 <__ieee754_pow+0x25c>)
 8004e70:	4632      	mov	r2, r6
 8004e72:	463b      	mov	r3, r7
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fb fc91 	bl	800079c <__aeabi_ddiv>
 8004e7a:	e79c      	b.n	8004db6 <__ieee754_pow+0x3e>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d13d      	bne.n	8004f00 <__ieee754_pow+0x188>
 8004e84:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <__ieee754_pow+0x254>)
 8004e86:	4598      	cmp	r8, r3
 8004e88:	d1ea      	bne.n	8004e60 <__ieee754_pow+0xe8>
 8004e8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004e8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004e92:	ea53 030a 	orrs.w	r3, r3, sl
 8004e96:	f000 8459 	beq.w	800574c <__ieee754_pow+0x9d4>
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <__ieee754_pow+0x260>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	dd08      	ble.n	8004eb2 <__ieee754_pow+0x13a>
 8004ea0:	f1b9 0f00 	cmp.w	r9, #0
 8004ea4:	f2c0 8456 	blt.w	8005754 <__ieee754_pow+0x9dc>
 8004ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eac:	e783      	b.n	8004db6 <__ieee754_pow+0x3e>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e7e5      	b.n	8004e7e <__ieee754_pow+0x106>
 8004eb2:	f1b9 0f00 	cmp.w	r9, #0
 8004eb6:	f04f 0000 	mov.w	r0, #0
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	f6bf af7a 	bge.w	8004db6 <__ieee754_pow+0x3e>
 8004ec2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004ec6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eca:	e774      	b.n	8004db6 <__ieee754_pow+0x3e>
 8004ecc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004ed0:	d106      	bne.n	8004ee0 <__ieee754_pow+0x168>
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb fb35 	bl	8000548 <__aeabi_dmul>
 8004ede:	e76a      	b.n	8004db6 <__ieee754_pow+0x3e>
 8004ee0:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <__ieee754_pow+0x264>)
 8004ee2:	4599      	cmp	r9, r3
 8004ee4:	d10c      	bne.n	8004f00 <__ieee754_pow+0x188>
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	db0a      	blt.n	8004f00 <__ieee754_pow+0x188>
 8004eea:	ec47 6b10 	vmov	d0, r6, r7
 8004eee:	b009      	add	sp, #36	; 0x24
 8004ef0:	ecbd 8b06 	vpop	{d8-d10}
 8004ef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	f7ff bd9a 	b.w	8004a30 <__ieee754_sqrt>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	ec47 6b10 	vmov	d0, r6, r7
 8004f04:	f7ff fd80 	bl	8004a08 <fabs>
 8004f08:	ec51 0b10 	vmov	r0, r1, d0
 8004f0c:	f1ba 0f00 	cmp.w	sl, #0
 8004f10:	d129      	bne.n	8004f66 <__ieee754_pow+0x1ee>
 8004f12:	b124      	cbz	r4, 8004f1e <__ieee754_pow+0x1a6>
 8004f14:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <__ieee754_pow+0x25c>)
 8004f16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d123      	bne.n	8004f66 <__ieee754_pow+0x1ee>
 8004f1e:	f1b9 0f00 	cmp.w	r9, #0
 8004f22:	da05      	bge.n	8004f30 <__ieee754_pow+0x1b8>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	2000      	movs	r0, #0
 8004f2a:	492a      	ldr	r1, [pc, #168]	; (8004fd4 <__ieee754_pow+0x25c>)
 8004f2c:	f7fb fc36 	bl	800079c <__aeabi_ddiv>
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	f6bf af40 	bge.w	8004db6 <__ieee754_pow+0x3e>
 8004f36:	9b04      	ldr	r3, [sp, #16]
 8004f38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f40:	431c      	orrs	r4, r3
 8004f42:	d108      	bne.n	8004f56 <__ieee754_pow+0x1de>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f7fb f944 	bl	80001d8 <__aeabi_dsub>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e78f      	b.n	8004e76 <__ieee754_pow+0xfe>
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f47f af2c 	bne.w	8004db6 <__ieee754_pow+0x3e>
 8004f5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f62:	4619      	mov	r1, r3
 8004f64:	e727      	b.n	8004db6 <__ieee754_pow+0x3e>
 8004f66:	0feb      	lsrs	r3, r5, #31
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	9306      	str	r3, [sp, #24]
 8004f6c:	9a06      	ldr	r2, [sp, #24]
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	d102      	bne.n	8004f7a <__ieee754_pow+0x202>
 8004f74:	4632      	mov	r2, r6
 8004f76:	463b      	mov	r3, r7
 8004f78:	e7e6      	b.n	8004f48 <__ieee754_pow+0x1d0>
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <__ieee754_pow+0x268>)
 8004f7c:	4598      	cmp	r8, r3
 8004f7e:	f340 80fb 	ble.w	8005178 <__ieee754_pow+0x400>
 8004f82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004f86:	4598      	cmp	r8, r3
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <__ieee754_pow+0x260>)
 8004f8a:	dd0c      	ble.n	8004fa6 <__ieee754_pow+0x22e>
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	dc0f      	bgt.n	8004fb0 <__ieee754_pow+0x238>
 8004f90:	f1b9 0f00 	cmp.w	r9, #0
 8004f94:	da0f      	bge.n	8004fb6 <__ieee754_pow+0x23e>
 8004f96:	2000      	movs	r0, #0
 8004f98:	b009      	add	sp, #36	; 0x24
 8004f9a:	ecbd 8b06 	vpop	{d8-d10}
 8004f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa2:	f000 bcba 	b.w	800591a <__math_oflow>
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	dbf2      	blt.n	8004f90 <__ieee754_pow+0x218>
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <__ieee754_pow+0x25c>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	dd19      	ble.n	8004fe4 <__ieee754_pow+0x26c>
 8004fb0:	f1b9 0f00 	cmp.w	r9, #0
 8004fb4:	dcef      	bgt.n	8004f96 <__ieee754_pow+0x21e>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	b009      	add	sp, #36	; 0x24
 8004fba:	ecbd 8b06 	vpop	{d8-d10}
 8004fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc2:	f000 bca1 	b.w	8005908 <__math_uflow>
 8004fc6:	bf00      	nop
 8004fc8:	fff00000 	.word	0xfff00000
 8004fcc:	7ff00000 	.word	0x7ff00000
 8004fd0:	433fffff 	.word	0x433fffff
 8004fd4:	3ff00000 	.word	0x3ff00000
 8004fd8:	3fefffff 	.word	0x3fefffff
 8004fdc:	3fe00000 	.word	0x3fe00000
 8004fe0:	41e00000 	.word	0x41e00000
 8004fe4:	4b60      	ldr	r3, [pc, #384]	; (8005168 <__ieee754_pow+0x3f0>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7fb f8f6 	bl	80001d8 <__aeabi_dsub>
 8004fec:	a354      	add	r3, pc, #336	; (adr r3, 8005140 <__ieee754_pow+0x3c8>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	f7fb faa7 	bl	8000548 <__aeabi_dmul>
 8004ffa:	a353      	add	r3, pc, #332	; (adr r3, 8005148 <__ieee754_pow+0x3d0>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	4606      	mov	r6, r0
 8005002:	460f      	mov	r7, r1
 8005004:	4620      	mov	r0, r4
 8005006:	4629      	mov	r1, r5
 8005008:	f7fb fa9e 	bl	8000548 <__aeabi_dmul>
 800500c:	4b57      	ldr	r3, [pc, #348]	; (800516c <__ieee754_pow+0x3f4>)
 800500e:	4682      	mov	sl, r0
 8005010:	468b      	mov	fp, r1
 8005012:	2200      	movs	r2, #0
 8005014:	4620      	mov	r0, r4
 8005016:	4629      	mov	r1, r5
 8005018:	f7fb fa96 	bl	8000548 <__aeabi_dmul>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	a14b      	add	r1, pc, #300	; (adr r1, 8005150 <__ieee754_pow+0x3d8>)
 8005022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005026:	f7fb f8d7 	bl	80001d8 <__aeabi_dsub>
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	f7fb fa8b 	bl	8000548 <__aeabi_dmul>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	2000      	movs	r0, #0
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <__ieee754_pow+0x3f8>)
 800503a:	f7fb f8cd 	bl	80001d8 <__aeabi_dsub>
 800503e:	4622      	mov	r2, r4
 8005040:	4680      	mov	r8, r0
 8005042:	4689      	mov	r9, r1
 8005044:	462b      	mov	r3, r5
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb fa7d 	bl	8000548 <__aeabi_dmul>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4640      	mov	r0, r8
 8005054:	4649      	mov	r1, r9
 8005056:	f7fb fa77 	bl	8000548 <__aeabi_dmul>
 800505a:	a33f      	add	r3, pc, #252	; (adr r3, 8005158 <__ieee754_pow+0x3e0>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f7fb fa72 	bl	8000548 <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4650      	mov	r0, sl
 800506a:	4659      	mov	r1, fp
 800506c:	f7fb f8b4 	bl	80001d8 <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4680      	mov	r8, r0
 8005076:	4689      	mov	r9, r1
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb f8ae 	bl	80001dc <__adddf3>
 8005080:	2000      	movs	r0, #0
 8005082:	4632      	mov	r2, r6
 8005084:	463b      	mov	r3, r7
 8005086:	4604      	mov	r4, r0
 8005088:	460d      	mov	r5, r1
 800508a:	f7fb f8a5 	bl	80001d8 <__aeabi_dsub>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f89f 	bl	80001d8 <__aeabi_dsub>
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	9a06      	ldr	r2, [sp, #24]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	4682      	mov	sl, r0
 80050a4:	468b      	mov	fp, r1
 80050a6:	f040 81e7 	bne.w	8005478 <__ieee754_pow+0x700>
 80050aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005160 <__ieee754_pow+0x3e8>
 80050ae:	eeb0 8a47 	vmov.f32	s16, s14
 80050b2:	eef0 8a67 	vmov.f32	s17, s15
 80050b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050ba:	2600      	movs	r6, #0
 80050bc:	4632      	mov	r2, r6
 80050be:	463b      	mov	r3, r7
 80050c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050c4:	f7fb f888 	bl	80001d8 <__aeabi_dsub>
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	f7fb fa3c 	bl	8000548 <__aeabi_dmul>
 80050d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050d4:	4680      	mov	r8, r0
 80050d6:	4689      	mov	r9, r1
 80050d8:	4650      	mov	r0, sl
 80050da:	4659      	mov	r1, fp
 80050dc:	f7fb fa34 	bl	8000548 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f878 	bl	80001dc <__adddf3>
 80050ec:	4632      	mov	r2, r6
 80050ee:	463b      	mov	r3, r7
 80050f0:	4680      	mov	r8, r0
 80050f2:	4689      	mov	r9, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb fa26 	bl	8000548 <__aeabi_dmul>
 80050fc:	460b      	mov	r3, r1
 80050fe:	4604      	mov	r4, r0
 8005100:	460d      	mov	r5, r1
 8005102:	4602      	mov	r2, r0
 8005104:	4649      	mov	r1, r9
 8005106:	4640      	mov	r0, r8
 8005108:	f7fb f868 	bl	80001dc <__adddf3>
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <__ieee754_pow+0x3fc>)
 800510e:	4299      	cmp	r1, r3
 8005110:	ec45 4b19 	vmov	d9, r4, r5
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	468b      	mov	fp, r1
 800511a:	f340 82f0 	ble.w	80056fe <__ieee754_pow+0x986>
 800511e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005122:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005126:	4303      	orrs	r3, r0
 8005128:	f000 81e4 	beq.w	80054f4 <__ieee754_pow+0x77c>
 800512c:	ec51 0b18 	vmov	r0, r1, d8
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	f7fb fc7a 	bl	8000a2c <__aeabi_dcmplt>
 8005138:	3800      	subs	r0, #0
 800513a:	bf18      	it	ne
 800513c:	2001      	movne	r0, #1
 800513e:	e72b      	b.n	8004f98 <__ieee754_pow+0x220>
 8005140:	60000000 	.word	0x60000000
 8005144:	3ff71547 	.word	0x3ff71547
 8005148:	f85ddf44 	.word	0xf85ddf44
 800514c:	3e54ae0b 	.word	0x3e54ae0b
 8005150:	55555555 	.word	0x55555555
 8005154:	3fd55555 	.word	0x3fd55555
 8005158:	652b82fe 	.word	0x652b82fe
 800515c:	3ff71547 	.word	0x3ff71547
 8005160:	00000000 	.word	0x00000000
 8005164:	bff00000 	.word	0xbff00000
 8005168:	3ff00000 	.word	0x3ff00000
 800516c:	3fd00000 	.word	0x3fd00000
 8005170:	3fe00000 	.word	0x3fe00000
 8005174:	408fffff 	.word	0x408fffff
 8005178:	4bd5      	ldr	r3, [pc, #852]	; (80054d0 <__ieee754_pow+0x758>)
 800517a:	402b      	ands	r3, r5
 800517c:	2200      	movs	r2, #0
 800517e:	b92b      	cbnz	r3, 800518c <__ieee754_pow+0x414>
 8005180:	4bd4      	ldr	r3, [pc, #848]	; (80054d4 <__ieee754_pow+0x75c>)
 8005182:	f7fb f9e1 	bl	8000548 <__aeabi_dmul>
 8005186:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800518a:	460c      	mov	r4, r1
 800518c:	1523      	asrs	r3, r4, #20
 800518e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005192:	4413      	add	r3, r2
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4bd0      	ldr	r3, [pc, #832]	; (80054d8 <__ieee754_pow+0x760>)
 8005198:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800519c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051a0:	429c      	cmp	r4, r3
 80051a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051a6:	dd08      	ble.n	80051ba <__ieee754_pow+0x442>
 80051a8:	4bcc      	ldr	r3, [pc, #816]	; (80054dc <__ieee754_pow+0x764>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	f340 8162 	ble.w	8005474 <__ieee754_pow+0x6fc>
 80051b0:	9b05      	ldr	r3, [sp, #20]
 80051b2:	3301      	adds	r3, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80051ba:	2400      	movs	r4, #0
 80051bc:	00e3      	lsls	r3, r4, #3
 80051be:	9307      	str	r3, [sp, #28]
 80051c0:	4bc7      	ldr	r3, [pc, #796]	; (80054e0 <__ieee754_pow+0x768>)
 80051c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051c6:	ed93 7b00 	vldr	d7, [r3]
 80051ca:	4629      	mov	r1, r5
 80051cc:	ec53 2b17 	vmov	r2, r3, d7
 80051d0:	eeb0 9a47 	vmov.f32	s18, s14
 80051d4:	eef0 9a67 	vmov.f32	s19, s15
 80051d8:	4682      	mov	sl, r0
 80051da:	f7fa fffd 	bl	80001d8 <__aeabi_dsub>
 80051de:	4652      	mov	r2, sl
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	462b      	mov	r3, r5
 80051e6:	ec51 0b19 	vmov	r0, r1, d9
 80051ea:	f7fa fff7 	bl	80001dc <__adddf3>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	2000      	movs	r0, #0
 80051f4:	49bb      	ldr	r1, [pc, #748]	; (80054e4 <__ieee754_pow+0x76c>)
 80051f6:	f7fb fad1 	bl	800079c <__aeabi_ddiv>
 80051fa:	ec41 0b1a 	vmov	d10, r0, r1
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4630      	mov	r0, r6
 8005204:	4639      	mov	r1, r7
 8005206:	f7fb f99f 	bl	8000548 <__aeabi_dmul>
 800520a:	2300      	movs	r3, #0
 800520c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005210:	9302      	str	r3, [sp, #8]
 8005212:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005216:	46ab      	mov	fp, r5
 8005218:	106d      	asrs	r5, r5, #1
 800521a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800521e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005222:	ec41 0b18 	vmov	d8, r0, r1
 8005226:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800522a:	2200      	movs	r2, #0
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	f7fb f988 	bl	8000548 <__aeabi_dmul>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fa ffca 	bl	80001d8 <__aeabi_dsub>
 8005244:	ec53 2b19 	vmov	r2, r3, d9
 8005248:	4606      	mov	r6, r0
 800524a:	460f      	mov	r7, r1
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	f7fa ffc2 	bl	80001d8 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4650      	mov	r0, sl
 800525a:	4659      	mov	r1, fp
 800525c:	f7fa ffbc 	bl	80001d8 <__aeabi_dsub>
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	f7fb f970 	bl	8000548 <__aeabi_dmul>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f7fa ffb2 	bl	80001d8 <__aeabi_dsub>
 8005274:	ec53 2b1a 	vmov	r2, r3, d10
 8005278:	f7fb f966 	bl	8000548 <__aeabi_dmul>
 800527c:	ec53 2b18 	vmov	r2, r3, d8
 8005280:	ec41 0b19 	vmov	d9, r0, r1
 8005284:	ec51 0b18 	vmov	r0, r1, d8
 8005288:	f7fb f95e 	bl	8000548 <__aeabi_dmul>
 800528c:	a37c      	add	r3, pc, #496	; (adr r3, 8005480 <__ieee754_pow+0x708>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	4604      	mov	r4, r0
 8005294:	460d      	mov	r5, r1
 8005296:	f7fb f957 	bl	8000548 <__aeabi_dmul>
 800529a:	a37b      	add	r3, pc, #492	; (adr r3, 8005488 <__ieee754_pow+0x710>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fa ff9c 	bl	80001dc <__adddf3>
 80052a4:	4622      	mov	r2, r4
 80052a6:	462b      	mov	r3, r5
 80052a8:	f7fb f94e 	bl	8000548 <__aeabi_dmul>
 80052ac:	a378      	add	r3, pc, #480	; (adr r3, 8005490 <__ieee754_pow+0x718>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fa ff93 	bl	80001dc <__adddf3>
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	f7fb f945 	bl	8000548 <__aeabi_dmul>
 80052be:	a376      	add	r3, pc, #472	; (adr r3, 8005498 <__ieee754_pow+0x720>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fa ff8a 	bl	80001dc <__adddf3>
 80052c8:	4622      	mov	r2, r4
 80052ca:	462b      	mov	r3, r5
 80052cc:	f7fb f93c 	bl	8000548 <__aeabi_dmul>
 80052d0:	a373      	add	r3, pc, #460	; (adr r3, 80054a0 <__ieee754_pow+0x728>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fa ff81 	bl	80001dc <__adddf3>
 80052da:	4622      	mov	r2, r4
 80052dc:	462b      	mov	r3, r5
 80052de:	f7fb f933 	bl	8000548 <__aeabi_dmul>
 80052e2:	a371      	add	r3, pc, #452	; (adr r3, 80054a8 <__ieee754_pow+0x730>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fa ff78 	bl	80001dc <__adddf3>
 80052ec:	4622      	mov	r2, r4
 80052ee:	4606      	mov	r6, r0
 80052f0:	460f      	mov	r7, r1
 80052f2:	462b      	mov	r3, r5
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7fb f926 	bl	8000548 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4630      	mov	r0, r6
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb f920 	bl	8000548 <__aeabi_dmul>
 8005308:	4642      	mov	r2, r8
 800530a:	4604      	mov	r4, r0
 800530c:	460d      	mov	r5, r1
 800530e:	464b      	mov	r3, r9
 8005310:	ec51 0b18 	vmov	r0, r1, d8
 8005314:	f7fa ff62 	bl	80001dc <__adddf3>
 8005318:	ec53 2b19 	vmov	r2, r3, d9
 800531c:	f7fb f914 	bl	8000548 <__aeabi_dmul>
 8005320:	4622      	mov	r2, r4
 8005322:	462b      	mov	r3, r5
 8005324:	f7fa ff5a 	bl	80001dc <__adddf3>
 8005328:	4642      	mov	r2, r8
 800532a:	4682      	mov	sl, r0
 800532c:	468b      	mov	fp, r1
 800532e:	464b      	mov	r3, r9
 8005330:	4640      	mov	r0, r8
 8005332:	4649      	mov	r1, r9
 8005334:	f7fb f908 	bl	8000548 <__aeabi_dmul>
 8005338:	4b6b      	ldr	r3, [pc, #428]	; (80054e8 <__ieee754_pow+0x770>)
 800533a:	2200      	movs	r2, #0
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	f7fa ff4c 	bl	80001dc <__adddf3>
 8005344:	4652      	mov	r2, sl
 8005346:	465b      	mov	r3, fp
 8005348:	f7fa ff48 	bl	80001dc <__adddf3>
 800534c:	2000      	movs	r0, #0
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb f8f5 	bl	8000548 <__aeabi_dmul>
 800535e:	4b62      	ldr	r3, [pc, #392]	; (80054e8 <__ieee754_pow+0x770>)
 8005360:	4680      	mov	r8, r0
 8005362:	4689      	mov	r9, r1
 8005364:	2200      	movs	r2, #0
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	f7fa ff35 	bl	80001d8 <__aeabi_dsub>
 800536e:	4632      	mov	r2, r6
 8005370:	463b      	mov	r3, r7
 8005372:	f7fa ff31 	bl	80001d8 <__aeabi_dsub>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4650      	mov	r0, sl
 800537c:	4659      	mov	r1, fp
 800537e:	f7fa ff2b 	bl	80001d8 <__aeabi_dsub>
 8005382:	ec53 2b18 	vmov	r2, r3, d8
 8005386:	f7fb f8df 	bl	8000548 <__aeabi_dmul>
 800538a:	4622      	mov	r2, r4
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	462b      	mov	r3, r5
 8005392:	ec51 0b19 	vmov	r0, r1, d9
 8005396:	f7fb f8d7 	bl	8000548 <__aeabi_dmul>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4630      	mov	r0, r6
 80053a0:	4639      	mov	r1, r7
 80053a2:	f7fa ff1b 	bl	80001dc <__adddf3>
 80053a6:	4606      	mov	r6, r0
 80053a8:	460f      	mov	r7, r1
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fa ff13 	bl	80001dc <__adddf3>
 80053b6:	a33e      	add	r3, pc, #248	; (adr r3, 80054b0 <__ieee754_pow+0x738>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	2000      	movs	r0, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	f7fb f8c1 	bl	8000548 <__aeabi_dmul>
 80053c6:	4642      	mov	r2, r8
 80053c8:	ec41 0b18 	vmov	d8, r0, r1
 80053cc:	464b      	mov	r3, r9
 80053ce:	4620      	mov	r0, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	f7fa ff01 	bl	80001d8 <__aeabi_dsub>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4630      	mov	r0, r6
 80053dc:	4639      	mov	r1, r7
 80053de:	f7fa fefb 	bl	80001d8 <__aeabi_dsub>
 80053e2:	a335      	add	r3, pc, #212	; (adr r3, 80054b8 <__ieee754_pow+0x740>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fb f8ae 	bl	8000548 <__aeabi_dmul>
 80053ec:	a334      	add	r3, pc, #208	; (adr r3, 80054c0 <__ieee754_pow+0x748>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	4606      	mov	r6, r0
 80053f4:	460f      	mov	r7, r1
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb f8a5 	bl	8000548 <__aeabi_dmul>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fa fee9 	bl	80001dc <__adddf3>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4b37      	ldr	r3, [pc, #220]	; (80054ec <__ieee754_pow+0x774>)
 800540e:	4413      	add	r3, r2
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fa fee2 	bl	80001dc <__adddf3>
 8005418:	4682      	mov	sl, r0
 800541a:	9805      	ldr	r0, [sp, #20]
 800541c:	468b      	mov	fp, r1
 800541e:	f7fb f829 	bl	8000474 <__aeabi_i2d>
 8005422:	9a07      	ldr	r2, [sp, #28]
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <__ieee754_pow+0x778>)
 8005426:	4413      	add	r3, r2
 8005428:	e9d3 8900 	ldrd	r8, r9, [r3]
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	4652      	mov	r2, sl
 8005432:	465b      	mov	r3, fp
 8005434:	ec51 0b18 	vmov	r0, r1, d8
 8005438:	f7fa fed0 	bl	80001dc <__adddf3>
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	f7fa fecc 	bl	80001dc <__adddf3>
 8005444:	4632      	mov	r2, r6
 8005446:	463b      	mov	r3, r7
 8005448:	f7fa fec8 	bl	80001dc <__adddf3>
 800544c:	2000      	movs	r0, #0
 800544e:	4632      	mov	r2, r6
 8005450:	463b      	mov	r3, r7
 8005452:	4604      	mov	r4, r0
 8005454:	460d      	mov	r5, r1
 8005456:	f7fa febf 	bl	80001d8 <__aeabi_dsub>
 800545a:	4642      	mov	r2, r8
 800545c:	464b      	mov	r3, r9
 800545e:	f7fa febb 	bl	80001d8 <__aeabi_dsub>
 8005462:	ec53 2b18 	vmov	r2, r3, d8
 8005466:	f7fa feb7 	bl	80001d8 <__aeabi_dsub>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4650      	mov	r0, sl
 8005470:	4659      	mov	r1, fp
 8005472:	e610      	b.n	8005096 <__ieee754_pow+0x31e>
 8005474:	2401      	movs	r4, #1
 8005476:	e6a1      	b.n	80051bc <__ieee754_pow+0x444>
 8005478:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80054c8 <__ieee754_pow+0x750>
 800547c:	e617      	b.n	80050ae <__ieee754_pow+0x336>
 800547e:	bf00      	nop
 8005480:	4a454eef 	.word	0x4a454eef
 8005484:	3fca7e28 	.word	0x3fca7e28
 8005488:	93c9db65 	.word	0x93c9db65
 800548c:	3fcd864a 	.word	0x3fcd864a
 8005490:	a91d4101 	.word	0xa91d4101
 8005494:	3fd17460 	.word	0x3fd17460
 8005498:	518f264d 	.word	0x518f264d
 800549c:	3fd55555 	.word	0x3fd55555
 80054a0:	db6fabff 	.word	0xdb6fabff
 80054a4:	3fdb6db6 	.word	0x3fdb6db6
 80054a8:	33333303 	.word	0x33333303
 80054ac:	3fe33333 	.word	0x3fe33333
 80054b0:	e0000000 	.word	0xe0000000
 80054b4:	3feec709 	.word	0x3feec709
 80054b8:	dc3a03fd 	.word	0xdc3a03fd
 80054bc:	3feec709 	.word	0x3feec709
 80054c0:	145b01f5 	.word	0x145b01f5
 80054c4:	be3e2fe0 	.word	0xbe3e2fe0
 80054c8:	00000000 	.word	0x00000000
 80054cc:	3ff00000 	.word	0x3ff00000
 80054d0:	7ff00000 	.word	0x7ff00000
 80054d4:	43400000 	.word	0x43400000
 80054d8:	0003988e 	.word	0x0003988e
 80054dc:	000bb679 	.word	0x000bb679
 80054e0:	08005a00 	.word	0x08005a00
 80054e4:	3ff00000 	.word	0x3ff00000
 80054e8:	40080000 	.word	0x40080000
 80054ec:	08005a20 	.word	0x08005a20
 80054f0:	08005a10 	.word	0x08005a10
 80054f4:	a3b3      	add	r3, pc, #716	; (adr r3, 80057c4 <__ieee754_pow+0xa4c>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fa fe6d 	bl	80001dc <__adddf3>
 8005502:	4622      	mov	r2, r4
 8005504:	ec41 0b1a 	vmov	d10, r0, r1
 8005508:	462b      	mov	r3, r5
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fa fe63 	bl	80001d8 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	ec51 0b1a 	vmov	r0, r1, d10
 800551a:	f7fb faa5 	bl	8000a68 <__aeabi_dcmpgt>
 800551e:	2800      	cmp	r0, #0
 8005520:	f47f ae04 	bne.w	800512c <__ieee754_pow+0x3b4>
 8005524:	4aa2      	ldr	r2, [pc, #648]	; (80057b0 <__ieee754_pow+0xa38>)
 8005526:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800552a:	4293      	cmp	r3, r2
 800552c:	f340 8107 	ble.w	800573e <__ieee754_pow+0x9c6>
 8005530:	151b      	asrs	r3, r3, #20
 8005532:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005536:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800553a:	fa4a fa03 	asr.w	sl, sl, r3
 800553e:	44da      	add	sl, fp
 8005540:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005544:	489b      	ldr	r0, [pc, #620]	; (80057b4 <__ieee754_pow+0xa3c>)
 8005546:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800554a:	4108      	asrs	r0, r1
 800554c:	ea00 030a 	and.w	r3, r0, sl
 8005550:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005554:	f1c1 0114 	rsb	r1, r1, #20
 8005558:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800555c:	fa4a fa01 	asr.w	sl, sl, r1
 8005560:	f1bb 0f00 	cmp.w	fp, #0
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	4620      	mov	r0, r4
 800556a:	4629      	mov	r1, r5
 800556c:	bfb8      	it	lt
 800556e:	f1ca 0a00 	rsblt	sl, sl, #0
 8005572:	f7fa fe31 	bl	80001d8 <__aeabi_dsub>
 8005576:	ec41 0b19 	vmov	d9, r0, r1
 800557a:	4642      	mov	r2, r8
 800557c:	464b      	mov	r3, r9
 800557e:	ec51 0b19 	vmov	r0, r1, d9
 8005582:	f7fa fe2b 	bl	80001dc <__adddf3>
 8005586:	a37a      	add	r3, pc, #488	; (adr r3, 8005770 <__ieee754_pow+0x9f8>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	2000      	movs	r0, #0
 800558e:	4604      	mov	r4, r0
 8005590:	460d      	mov	r5, r1
 8005592:	f7fa ffd9 	bl	8000548 <__aeabi_dmul>
 8005596:	ec53 2b19 	vmov	r2, r3, d9
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fa fe19 	bl	80001d8 <__aeabi_dsub>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fa fe13 	bl	80001d8 <__aeabi_dsub>
 80055b2:	a371      	add	r3, pc, #452	; (adr r3, 8005778 <__ieee754_pow+0xa00>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa ffc6 	bl	8000548 <__aeabi_dmul>
 80055bc:	a370      	add	r3, pc, #448	; (adr r3, 8005780 <__ieee754_pow+0xa08>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	4680      	mov	r8, r0
 80055c4:	4689      	mov	r9, r1
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fa ffbd 	bl	8000548 <__aeabi_dmul>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fa fe01 	bl	80001dc <__adddf3>
 80055da:	4604      	mov	r4, r0
 80055dc:	460d      	mov	r5, r1
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	f7fa fdf9 	bl	80001dc <__adddf3>
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	4680      	mov	r8, r0
 80055f0:	4689      	mov	r9, r1
 80055f2:	f7fa fdf1 	bl	80001d8 <__aeabi_dsub>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7fa fdeb 	bl	80001d8 <__aeabi_dsub>
 8005602:	4642      	mov	r2, r8
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	464b      	mov	r3, r9
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fa ff9b 	bl	8000548 <__aeabi_dmul>
 8005612:	a35d      	add	r3, pc, #372	; (adr r3, 8005788 <__ieee754_pow+0xa10>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	4604      	mov	r4, r0
 800561a:	460d      	mov	r5, r1
 800561c:	f7fa ff94 	bl	8000548 <__aeabi_dmul>
 8005620:	a35b      	add	r3, pc, #364	; (adr r3, 8005790 <__ieee754_pow+0xa18>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa fdd7 	bl	80001d8 <__aeabi_dsub>
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	f7fa ff8b 	bl	8000548 <__aeabi_dmul>
 8005632:	a359      	add	r3, pc, #356	; (adr r3, 8005798 <__ieee754_pow+0xa20>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fdd0 	bl	80001dc <__adddf3>
 800563c:	4622      	mov	r2, r4
 800563e:	462b      	mov	r3, r5
 8005640:	f7fa ff82 	bl	8000548 <__aeabi_dmul>
 8005644:	a356      	add	r3, pc, #344	; (adr r3, 80057a0 <__ieee754_pow+0xa28>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fa fdc5 	bl	80001d8 <__aeabi_dsub>
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f7fa ff79 	bl	8000548 <__aeabi_dmul>
 8005656:	a354      	add	r3, pc, #336	; (adr r3, 80057a8 <__ieee754_pow+0xa30>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fdbe 	bl	80001dc <__adddf3>
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	f7fa ff70 	bl	8000548 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fdb2 	bl	80001d8 <__aeabi_dsub>
 8005674:	4604      	mov	r4, r0
 8005676:	460d      	mov	r5, r1
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7fa ff62 	bl	8000548 <__aeabi_dmul>
 8005684:	2200      	movs	r2, #0
 8005686:	ec41 0b19 	vmov	d9, r0, r1
 800568a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800568e:	4620      	mov	r0, r4
 8005690:	4629      	mov	r1, r5
 8005692:	f7fa fda1 	bl	80001d8 <__aeabi_dsub>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	ec51 0b19 	vmov	r0, r1, d9
 800569e:	f7fb f87d 	bl	800079c <__aeabi_ddiv>
 80056a2:	4632      	mov	r2, r6
 80056a4:	4604      	mov	r4, r0
 80056a6:	460d      	mov	r5, r1
 80056a8:	463b      	mov	r3, r7
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fa ff4b 	bl	8000548 <__aeabi_dmul>
 80056b2:	4632      	mov	r2, r6
 80056b4:	463b      	mov	r3, r7
 80056b6:	f7fa fd91 	bl	80001dc <__adddf3>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fa fd89 	bl	80001d8 <__aeabi_dsub>
 80056c6:	4642      	mov	r2, r8
 80056c8:	464b      	mov	r3, r9
 80056ca:	f7fa fd85 	bl	80001d8 <__aeabi_dsub>
 80056ce:	460b      	mov	r3, r1
 80056d0:	4602      	mov	r2, r0
 80056d2:	4939      	ldr	r1, [pc, #228]	; (80057b8 <__ieee754_pow+0xa40>)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7fa fd7f 	bl	80001d8 <__aeabi_dsub>
 80056da:	ec41 0b10 	vmov	d0, r0, r1
 80056de:	ee10 3a90 	vmov	r3, s1
 80056e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ea:	da2b      	bge.n	8005744 <__ieee754_pow+0x9cc>
 80056ec:	4650      	mov	r0, sl
 80056ee:	f000 f86f 	bl	80057d0 <scalbn>
 80056f2:	ec51 0b10 	vmov	r0, r1, d0
 80056f6:	ec53 2b18 	vmov	r2, r3, d8
 80056fa:	f7ff bbee 	b.w	8004eda <__ieee754_pow+0x162>
 80056fe:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <__ieee754_pow+0xa44>)
 8005700:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005704:	429e      	cmp	r6, r3
 8005706:	f77f af0d 	ble.w	8005524 <__ieee754_pow+0x7ac>
 800570a:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <__ieee754_pow+0xa48>)
 800570c:	440b      	add	r3, r1
 800570e:	4303      	orrs	r3, r0
 8005710:	d009      	beq.n	8005726 <__ieee754_pow+0x9ae>
 8005712:	ec51 0b18 	vmov	r0, r1, d8
 8005716:	2200      	movs	r2, #0
 8005718:	2300      	movs	r3, #0
 800571a:	f7fb f987 	bl	8000a2c <__aeabi_dcmplt>
 800571e:	3800      	subs	r0, #0
 8005720:	bf18      	it	ne
 8005722:	2001      	movne	r0, #1
 8005724:	e448      	b.n	8004fb8 <__ieee754_pow+0x240>
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f7fa fd55 	bl	80001d8 <__aeabi_dsub>
 800572e:	4642      	mov	r2, r8
 8005730:	464b      	mov	r3, r9
 8005732:	f7fb f98f 	bl	8000a54 <__aeabi_dcmpge>
 8005736:	2800      	cmp	r0, #0
 8005738:	f43f aef4 	beq.w	8005524 <__ieee754_pow+0x7ac>
 800573c:	e7e9      	b.n	8005712 <__ieee754_pow+0x99a>
 800573e:	f04f 0a00 	mov.w	sl, #0
 8005742:	e71a      	b.n	800557a <__ieee754_pow+0x802>
 8005744:	ec51 0b10 	vmov	r0, r1, d0
 8005748:	4619      	mov	r1, r3
 800574a:	e7d4      	b.n	80056f6 <__ieee754_pow+0x97e>
 800574c:	491a      	ldr	r1, [pc, #104]	; (80057b8 <__ieee754_pow+0xa40>)
 800574e:	2000      	movs	r0, #0
 8005750:	f7ff bb31 	b.w	8004db6 <__ieee754_pow+0x3e>
 8005754:	2000      	movs	r0, #0
 8005756:	2100      	movs	r1, #0
 8005758:	f7ff bb2d 	b.w	8004db6 <__ieee754_pow+0x3e>
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7ff bb29 	b.w	8004db6 <__ieee754_pow+0x3e>
 8005764:	9204      	str	r2, [sp, #16]
 8005766:	f7ff bb7b 	b.w	8004e60 <__ieee754_pow+0xe8>
 800576a:	2300      	movs	r3, #0
 800576c:	f7ff bb65 	b.w	8004e3a <__ieee754_pow+0xc2>
 8005770:	00000000 	.word	0x00000000
 8005774:	3fe62e43 	.word	0x3fe62e43
 8005778:	fefa39ef 	.word	0xfefa39ef
 800577c:	3fe62e42 	.word	0x3fe62e42
 8005780:	0ca86c39 	.word	0x0ca86c39
 8005784:	be205c61 	.word	0xbe205c61
 8005788:	72bea4d0 	.word	0x72bea4d0
 800578c:	3e663769 	.word	0x3e663769
 8005790:	c5d26bf1 	.word	0xc5d26bf1
 8005794:	3ebbbd41 	.word	0x3ebbbd41
 8005798:	af25de2c 	.word	0xaf25de2c
 800579c:	3f11566a 	.word	0x3f11566a
 80057a0:	16bebd93 	.word	0x16bebd93
 80057a4:	3f66c16c 	.word	0x3f66c16c
 80057a8:	5555553e 	.word	0x5555553e
 80057ac:	3fc55555 	.word	0x3fc55555
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	fff00000 	.word	0xfff00000
 80057b8:	3ff00000 	.word	0x3ff00000
 80057bc:	4090cbff 	.word	0x4090cbff
 80057c0:	3f6f3400 	.word	0x3f6f3400
 80057c4:	652b82fe 	.word	0x652b82fe
 80057c8:	3c971547 	.word	0x3c971547
 80057cc:	00000000 	.word	0x00000000

080057d0 <scalbn>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	ec55 4b10 	vmov	r4, r5, d0
 80057d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80057da:	4606      	mov	r6, r0
 80057dc:	462b      	mov	r3, r5
 80057de:	b999      	cbnz	r1, 8005808 <scalbn+0x38>
 80057e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057e4:	4323      	orrs	r3, r4
 80057e6:	d03f      	beq.n	8005868 <scalbn+0x98>
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <scalbn+0xf0>)
 80057ea:	4629      	mov	r1, r5
 80057ec:	ee10 0a10 	vmov	r0, s0
 80057f0:	2200      	movs	r2, #0
 80057f2:	f7fa fea9 	bl	8000548 <__aeabi_dmul>
 80057f6:	4b33      	ldr	r3, [pc, #204]	; (80058c4 <scalbn+0xf4>)
 80057f8:	429e      	cmp	r6, r3
 80057fa:	4604      	mov	r4, r0
 80057fc:	460d      	mov	r5, r1
 80057fe:	da10      	bge.n	8005822 <scalbn+0x52>
 8005800:	a327      	add	r3, pc, #156	; (adr r3, 80058a0 <scalbn+0xd0>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	e01f      	b.n	8005848 <scalbn+0x78>
 8005808:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800580c:	4291      	cmp	r1, r2
 800580e:	d10c      	bne.n	800582a <scalbn+0x5a>
 8005810:	ee10 2a10 	vmov	r2, s0
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	f7fa fce0 	bl	80001dc <__adddf3>
 800581c:	4604      	mov	r4, r0
 800581e:	460d      	mov	r5, r1
 8005820:	e022      	b.n	8005868 <scalbn+0x98>
 8005822:	460b      	mov	r3, r1
 8005824:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005828:	3936      	subs	r1, #54	; 0x36
 800582a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800582e:	4296      	cmp	r6, r2
 8005830:	dd0d      	ble.n	800584e <scalbn+0x7e>
 8005832:	2d00      	cmp	r5, #0
 8005834:	a11c      	add	r1, pc, #112	; (adr r1, 80058a8 <scalbn+0xd8>)
 8005836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800583a:	da02      	bge.n	8005842 <scalbn+0x72>
 800583c:	a11c      	add	r1, pc, #112	; (adr r1, 80058b0 <scalbn+0xe0>)
 800583e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005842:	a319      	add	r3, pc, #100	; (adr r3, 80058a8 <scalbn+0xd8>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fe7e 	bl	8000548 <__aeabi_dmul>
 800584c:	e7e6      	b.n	800581c <scalbn+0x4c>
 800584e:	1872      	adds	r2, r6, r1
 8005850:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005854:	428a      	cmp	r2, r1
 8005856:	dcec      	bgt.n	8005832 <scalbn+0x62>
 8005858:	2a00      	cmp	r2, #0
 800585a:	dd08      	ble.n	800586e <scalbn+0x9e>
 800585c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005860:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005864:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005868:	ec45 4b10 	vmov	d0, r4, r5
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005872:	da08      	bge.n	8005886 <scalbn+0xb6>
 8005874:	2d00      	cmp	r5, #0
 8005876:	a10a      	add	r1, pc, #40	; (adr r1, 80058a0 <scalbn+0xd0>)
 8005878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800587c:	dac0      	bge.n	8005800 <scalbn+0x30>
 800587e:	a10e      	add	r1, pc, #56	; (adr r1, 80058b8 <scalbn+0xe8>)
 8005880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005884:	e7bc      	b.n	8005800 <scalbn+0x30>
 8005886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800588a:	3236      	adds	r2, #54	; 0x36
 800588c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005894:	4620      	mov	r0, r4
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <scalbn+0xf8>)
 8005898:	2200      	movs	r2, #0
 800589a:	e7d5      	b.n	8005848 <scalbn+0x78>
 800589c:	f3af 8000 	nop.w
 80058a0:	c2f8f359 	.word	0xc2f8f359
 80058a4:	01a56e1f 	.word	0x01a56e1f
 80058a8:	8800759c 	.word	0x8800759c
 80058ac:	7e37e43c 	.word	0x7e37e43c
 80058b0:	8800759c 	.word	0x8800759c
 80058b4:	fe37e43c 	.word	0xfe37e43c
 80058b8:	c2f8f359 	.word	0xc2f8f359
 80058bc:	81a56e1f 	.word	0x81a56e1f
 80058c0:	43500000 	.word	0x43500000
 80058c4:	ffff3cb0 	.word	0xffff3cb0
 80058c8:	3c900000 	.word	0x3c900000

080058cc <with_errno>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4604      	mov	r4, r0
 80058d0:	460d      	mov	r5, r1
 80058d2:	4616      	mov	r6, r2
 80058d4:	f7fe fe30 	bl	8004538 <__errno>
 80058d8:	4629      	mov	r1, r5
 80058da:	6006      	str	r6, [r0, #0]
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}

080058e0 <xflow>:
 80058e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058e2:	4614      	mov	r4, r2
 80058e4:	461d      	mov	r5, r3
 80058e6:	b108      	cbz	r0, 80058ec <xflow+0xc>
 80058e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	e9cd 2300 	strd	r2, r3, [sp]
 80058f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fe26 	bl	8000548 <__aeabi_dmul>
 80058fc:	2222      	movs	r2, #34	; 0x22
 80058fe:	b003      	add	sp, #12
 8005900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005904:	f7ff bfe2 	b.w	80058cc <with_errno>

08005908 <__math_uflow>:
 8005908:	b508      	push	{r3, lr}
 800590a:	2200      	movs	r2, #0
 800590c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005910:	f7ff ffe6 	bl	80058e0 <xflow>
 8005914:	ec41 0b10 	vmov	d0, r0, r1
 8005918:	bd08      	pop	{r3, pc}

0800591a <__math_oflow>:
 800591a:	b508      	push	{r3, lr}
 800591c:	2200      	movs	r2, #0
 800591e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005922:	f7ff ffdd 	bl	80058e0 <xflow>
 8005926:	ec41 0b10 	vmov	d0, r0, r1
 800592a:	bd08      	pop	{r3, pc}

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
