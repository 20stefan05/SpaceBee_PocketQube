
full_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800c838  0800c838  0001c838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce60  0800ce60  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce60  0800ce60  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce60  0800ce60  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ce68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f234  20000088  0800cef0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000f2bc  0800cef0  0002f2bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019504  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044db  00000000  00000000  000395ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  0003dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001118  00000000  00000000  0003f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c59  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea39  00000000  00000000  00064ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caaf9  00000000  00000000  000838fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061ec  00000000  00000000  0014e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001545e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c81c 	.word	0x0800c81c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c81c 	.word	0x0800c81c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <read_callibration_data>:
#define atmPress 101325 //Pa



// starts reading the sensor data
void read_callibration_data (void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000bf2:	23aa      	movs	r3, #170	; 0xaa
 8000bf4:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef hal_stat = HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, HAL_MAX_DELAY);
 8000bf6:	8bfa      	ldrh	r2, [r7, #30]
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2316      	movs	r3, #22
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	21ee      	movs	r1, #238	; 0xee
 8000c0a:	4837      	ldr	r0, [pc, #220]	; (8000ce8 <read_callibration_data+0x110>)
 8000c0c:	f002 fba4 	bl	8003358 <HAL_I2C_Mem_Read>
 8000c10:	4603      	mov	r3, r0
 8000c12:	777b      	strb	r3, [r7, #29]

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	797b      	ldrb	r3, [r7, #5]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <read_callibration_data+0x114>)
 8000c24:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <read_callibration_data+0x118>)
 8000c36:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000c38:	7a3b      	ldrb	r3, [r7, #8]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	7a7b      	ldrb	r3, [r7, #9]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <read_callibration_data+0x11c>)
 8000c48:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000c4a:	7abb      	ldrb	r3, [r7, #10]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <read_callibration_data+0x120>)
 8000c5c:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000c5e:	7b3b      	ldrb	r3, [r7, #12]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <read_callibration_data+0x124>)
 8000c70:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <read_callibration_data+0x128>)
 8000c84:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000c86:	7c3b      	ldrb	r3, [r7, #16]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	7c7b      	ldrb	r3, [r7, #17]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <read_callibration_data+0x12c>)
 8000c96:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000c98:	7cbb      	ldrb	r3, [r7, #18]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <read_callibration_data+0x130>)
 8000ca8:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	7d7b      	ldrb	r3, [r7, #21]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <read_callibration_data+0x134>)
 8000cba:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <read_callibration_data+0x138>)
 8000ccc:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000cce:	7e3b      	ldrb	r3, [r7, #24]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	7e7b      	ldrb	r3, [r7, #25]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <read_callibration_data+0x13c>)
 8000cde:	801a      	strh	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200003a0 	.word	0x200003a0
 8000cec:	200000a4 	.word	0x200000a4
 8000cf0:	200000a6 	.word	0x200000a6
 8000cf4:	200000a8 	.word	0x200000a8
 8000cf8:	200000aa 	.word	0x200000aa
 8000cfc:	200000ac 	.word	0x200000ac
 8000d00:	200000ae 	.word	0x200000ae
 8000d04:	200000b0 	.word	0x200000b0
 8000d08:	200000b2 	.word	0x200000b2
 8000d0c:	200000b4 	.word	0x200000b4
 8000d10:	200000b6 	.word	0x200000b6
 8000d14:	200000b8 	.word	0x200000b8

08000d18 <Get_UTemp>:


// Get uncompensated Temp
void Get_UTemp (BMP180_t *Datastruct){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x2E;
 8000d20:	232e      	movs	r3, #46	; 0x2e
 8000d22:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_RAW[2] = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef hal_stat_wr = HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 030d 	add.w	r3, r7, #13
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	22f4      	movs	r2, #244	; 0xf4
 8000d3c:	21ee      	movs	r1, #238	; 0xee
 8000d3e:	4813      	ldr	r0, [pc, #76]	; (8000d8c <Get_UTemp+0x74>)
 8000d40:	f002 f9f6 	bl	8003130 <HAL_I2C_Mem_Write>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
	HAL_Delay (5);  // wait 4.5 ms
 8000d48:	2005      	movs	r0, #5
 8000d4a:	f001 feaf 	bl	8002aac <HAL_Delay>
	HAL_StatusTypeDef hal_stat = HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	22f6      	movs	r2, #246	; 0xf6
 8000d62:	21ee      	movs	r1, #238	; 0xee
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <Get_UTemp+0x74>)
 8000d66:	f002 faf7 	bl	8003358 <HAL_I2C_Mem_Read>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73bb      	strb	r3, [r7, #14]
	Datastruct->Temperature_RAW = ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000d6e:	7a3b      	ldrb	r3, [r7, #8]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7a7b      	ldrb	r3, [r7, #9]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	801a      	strh	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200003a0 	.word	0x200003a0

08000d90 <BMP180_Get_Temp>:

// Updates the temperature
void BMP180_Get_Temp (BMP180_t *Datastruct){
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	Get_UTemp(Datastruct);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffbd 	bl	8000d18 <Get_UTemp>
	UT = Datastruct->Temperature_RAW;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <BMP180_Get_Temp+0x108>)
 8000da6:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <BMP180_Get_Temp+0x108>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a3b      	ldr	r2, [pc, #236]	; (8000e9c <BMP180_Get_Temp+0x10c>)
 8000dae:	8812      	ldrh	r2, [r2, #0]
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb5e 	bl	8000474 <__aeabi_i2d>
 8000db8:	4604      	mov	r4, r0
 8000dba:	460d      	mov	r5, r1
 8000dbc:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <BMP180_Get_Temp+0x110>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb57 	bl	8000474 <__aeabi_i2d>
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <BMP180_Get_Temp+0x114>)
 8000dcc:	f7ff fce6 	bl	800079c <__aeabi_ddiv>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	f7ff fbb6 	bl	8000548 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fe60 	bl	8000aa8 <__aeabi_d2iz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <BMP180_Get_Temp+0x118>)
 8000dec:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <BMP180_Get_Temp+0x11c>)
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb3d 	bl	8000474 <__aeabi_i2d>
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <BMP180_Get_Temp+0x120>)
 8000e00:	f7ff fba2 	bl	8000548 <__aeabi_dmul>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4614      	mov	r4, r2
 8000e0a:	461d      	mov	r5, r3
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <BMP180_Get_Temp+0x124>)
 8000e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <BMP180_Get_Temp+0x118>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb2a 	bl	8000474 <__aeabi_i2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4620      	mov	r0, r4
 8000e26:	4629      	mov	r1, r5
 8000e28:	f7ff fcb8 	bl	800079c <__aeabi_ddiv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fe38 	bl	8000aa8 <__aeabi_d2iz>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <BMP180_Get_Temp+0x128>)
 8000e3c:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <BMP180_Get_Temp+0x118>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <BMP180_Get_Temp+0x128>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <BMP180_Get_Temp+0x12c>)
 8000e4a:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <BMP180_Get_Temp+0x12c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3308      	adds	r3, #8
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb0e 	bl	8000474 <__aeabi_i2d>
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <BMP180_Get_Temp+0x130>)
 8000e5e:	f7ff fc9d 	bl	800079c <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <BMP180_Get_Temp+0x134>)
 8000e68:	e9c1 2300 	strd	r2, r3, [r1]
	Datastruct->Temperature = Temp / 10.0;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <BMP180_Get_Temp+0x134>)
 8000e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <BMP180_Get_Temp+0x138>)
 8000e78:	f7ff fc90 	bl	800079c <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fe58 	bl	8000b38 <__aeabi_d2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000bc 	.word	0x200000bc
 8000e9c:	200000ae 	.word	0x200000ae
 8000ea0:	200000ac 	.word	0x200000ac
 8000ea4:	40e00000 	.word	0x40e00000
 8000ea8:	200000c4 	.word	0x200000c4
 8000eac:	200000b6 	.word	0x200000b6
 8000eb0:	40a00000 	.word	0x40a00000
 8000eb4:	200000b8 	.word	0x200000b8
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	200000d4 	.word	0x200000d4
 8000ec0:	40300000 	.word	0x40300000
 8000ec4:	200000f0 	.word	0x200000f0
 8000ec8:	40240000 	.word	0x40240000

08000ecc <Get_UPress>:

// Get uncompensated Pressure
// oss = oversampling something, currently commented out
void Get_UPress (BMP180_t *Datastruct, int oss){   // oversampling setting 0,1,2,3
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	uint8_t datatowrite = 0x34+(oss<<6);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3334      	adds	r3, #52	; 0x34
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <Get_UPress+0x80>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	81bb      	strh	r3, [r7, #12]
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	22f4      	movs	r2, #244	; 0xf4
 8000f02:	21ee      	movs	r1, #238	; 0xee
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <Get_UPress+0x84>)
 8000f06:	f002 f913 	bl	8003130 <HAL_I2C_Mem_Write>
//			break;
//		case (3):
//			HAL_Delay (26);
//			break;
//	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2303      	movs	r3, #3
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	22f6      	movs	r2, #246	; 0xf6
 8000f1e:	21ee      	movs	r1, #238	; 0xee
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <Get_UPress+0x84>)
 8000f22:	f002 fa19 	bl	8003358 <HAL_I2C_Mem_Read>
	Datastruct->Pressure_RAW = (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	7b7b      	ldrb	r3, [r7, #13]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4413      	add	r3, r2
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	441a      	add	r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f1c3 0308 	rsb	r3, r3, #8
 8000f3a:	fa42 f303 	asr.w	r3, r2, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0800c838 	.word	0x0800c838
 8000f50:	200003a0 	.word	0x200003a0
 8000f54:	00000000 	.word	0x00000000

08000f58 <BMP180_Get_Press>:

// Updates the pressure
void BMP180_Get_Press (BMP180_t *Datastruct, int oss){
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	Get_UPress(Datastruct, oss);
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffb1 	bl	8000ecc <Get_UPress>
	UP = Datastruct->Pressure_RAW;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4baa      	ldr	r3, [pc, #680]	; (800121c <BMP180_Get_Press+0x2c4>)
 8000f72:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000f74:	4baa      	ldr	r3, [pc, #680]	; (8001220 <BMP180_Get_Press+0x2c8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4aaa      	ldr	r2, [pc, #680]	; (8001224 <BMP180_Get_Press+0x2cc>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa78 	bl	8000474 <__aeabi_i2d>
 8000f84:	4604      	mov	r4, r0
 8000f86:	460d      	mov	r5, r1
 8000f88:	4ba7      	ldr	r3, [pc, #668]	; (8001228 <BMP180_Get_Press+0x2d0>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa71 	bl	8000474 <__aeabi_i2d>
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4ba5      	ldr	r3, [pc, #660]	; (800122c <BMP180_Get_Press+0x2d4>)
 8000f98:	f7ff fc00 	bl	800079c <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd7a 	bl	8000aa8 <__aeabi_d2iz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a9e      	ldr	r2, [pc, #632]	; (8001230 <BMP180_Get_Press+0x2d8>)
 8000fb8:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000fba:	4b9e      	ldr	r3, [pc, #632]	; (8001234 <BMP180_Get_Press+0x2dc>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa57 	bl	8000474 <__aeabi_i2d>
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b9b      	ldr	r3, [pc, #620]	; (8001238 <BMP180_Get_Press+0x2e0>)
 8000fcc:	f7ff fabc 	bl	8000548 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	4b98      	ldr	r3, [pc, #608]	; (800123c <BMP180_Get_Press+0x2e4>)
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b93      	ldr	r3, [pc, #588]	; (8001230 <BMP180_Get_Press+0x2d8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa44 	bl	8000474 <__aeabi_i2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fbd2 	bl	800079c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd52 	bl	8000aa8 <__aeabi_d2iz>
 8001004:	4603      	mov	r3, r0
 8001006:	4a8e      	ldr	r2, [pc, #568]	; (8001240 <BMP180_Get_Press+0x2e8>)
 8001008:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800100a:	4b89      	ldr	r3, [pc, #548]	; (8001230 <BMP180_Get_Press+0x2d8>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <BMP180_Get_Press+0x2e8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a8b      	ldr	r2, [pc, #556]	; (8001244 <BMP180_Get_Press+0x2ec>)
 8001016:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001018:	4b8a      	ldr	r3, [pc, #552]	; (8001244 <BMP180_Get_Press+0x2ec>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001020:	4a89      	ldr	r2, [pc, #548]	; (8001248 <BMP180_Get_Press+0x2f0>)
 8001022:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001024:	4b89      	ldr	r3, [pc, #548]	; (800124c <BMP180_Get_Press+0x2f4>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_i2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	4b84      	ldr	r3, [pc, #528]	; (8001248 <BMP180_Get_Press+0x2f0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a83      	ldr	r2, [pc, #524]	; (8001248 <BMP180_Get_Press+0x2f0>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa17 	bl	8000474 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b81      	ldr	r3, [pc, #516]	; (8001250 <BMP180_Get_Press+0x2f8>)
 800104c:	f7ff fba6 	bl	800079c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff fa76 	bl	8000548 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b73      	ldr	r3, [pc, #460]	; (8001238 <BMP180_Get_Press+0x2e0>)
 800106a:	f7ff fb97 	bl	800079c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd17 	bl	8000aa8 <__aeabi_d2iz>
 800107a:	4603      	mov	r3, r0
 800107c:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <BMP180_Get_Press+0x2d8>)
 800107e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001080:	4b74      	ldr	r3, [pc, #464]	; (8001254 <BMP180_Get_Press+0x2fc>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	461a      	mov	r2, r3
 8001088:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <BMP180_Get_Press+0x2f0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9ef 	bl	8000474 <__aeabi_i2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <BMP180_Get_Press+0x2e0>)
 800109c:	f7ff fb7e 	bl	800079c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fcfe 	bl	8000aa8 <__aeabi_d2iz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a64      	ldr	r2, [pc, #400]	; (8001240 <BMP180_Get_Press+0x2e8>)
 80010b0:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <BMP180_Get_Press+0x2d8>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b62      	ldr	r3, [pc, #392]	; (8001240 <BMP180_Get_Press+0x2e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a66      	ldr	r2, [pc, #408]	; (8001258 <BMP180_Get_Press+0x300>)
 80010be:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80010c0:	4b66      	ldr	r3, [pc, #408]	; (800125c <BMP180_Get_Press+0x304>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	009a      	lsls	r2, r3, #2
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <BMP180_Get_Press+0x300>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	441a      	add	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	3302      	adds	r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da00      	bge.n	80010dc <BMP180_Get_Press+0x184>
 80010da:	3303      	adds	r3, #3
 80010dc:	109b      	asrs	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <BMP180_Get_Press+0x308>)
 80010e2:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80010e4:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <BMP180_Get_Press+0x30c>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b56      	ldr	r3, [pc, #344]	; (8001248 <BMP180_Get_Press+0x2f0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9bd 	bl	8000474 <__aeabi_i2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <BMP180_Get_Press+0x310>)
 8001100:	f7ff fb4c 	bl	800079c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fccc 	bl	8000aa8 <__aeabi_d2iz>
 8001110:	4603      	mov	r3, r0
 8001112:	4a47      	ldr	r2, [pc, #284]	; (8001230 <BMP180_Get_Press+0x2d8>)
 8001114:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <BMP180_Get_Press+0x314>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9a9 	bl	8000474 <__aeabi_i2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <BMP180_Get_Press+0x2f0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <BMP180_Get_Press+0x2f0>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f99e 	bl	8000474 <__aeabi_i2d>
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b44      	ldr	r3, [pc, #272]	; (8001250 <BMP180_Get_Press+0x2f8>)
 800113e:	f7ff fb2d 	bl	800079c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff f9fd 	bl	8000548 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b45      	ldr	r3, [pc, #276]	; (8001270 <BMP180_Get_Press+0x318>)
 800115c:	f7ff fb1e 	bl	800079c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fc9e 	bl	8000aa8 <__aeabi_d2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <BMP180_Get_Press+0x2e8>)
 8001170:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <BMP180_Get_Press+0x2d8>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <BMP180_Get_Press+0x2e8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	3302      	adds	r3, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f978 	bl	8000474 <__aeabi_i2d>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <BMP180_Get_Press+0x31c>)
 800118a:	f7ff fb07 	bl	800079c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fc87 	bl	8000aa8 <__aeabi_d2iz>
 800119a:	4603      	mov	r3, r0
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <BMP180_Get_Press+0x300>)
 800119e:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <BMP180_Get_Press+0x320>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <BMP180_Get_Press+0x300>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f94e 	bl	8000454 <__aeabi_ui2d>
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <BMP180_Get_Press+0x2d4>)
 80011be:	f7ff faed 	bl	800079c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc95 	bl	8000af8 <__aeabi_d2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a2a      	ldr	r2, [pc, #168]	; (800127c <BMP180_Get_Press+0x324>)
 80011d2:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <BMP180_Get_Press+0x2c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <BMP180_Get_Press+0x308>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	fa41 f202 	asr.w	r2, r1, r2
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <BMP180_Get_Press+0x328>)
 80011f0:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <BMP180_Get_Press+0x328>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db46      	blt.n	8001288 <BMP180_Get_Press+0x330>
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <BMP180_Get_Press+0x328>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	005a      	lsls	r2, r3, #1
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <BMP180_Get_Press+0x324>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f923 	bl	8000454 <__aeabi_ui2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	491c      	ldr	r1, [pc, #112]	; (8001284 <BMP180_Get_Press+0x32c>)
 8001214:	e9c1 2300 	strd	r2, r3, [r1]
 8001218:	e045      	b.n	80012a6 <BMP180_Get_Press+0x34e>
 800121a:	bf00      	nop
 800121c:	200000c0 	.word	0x200000c0
 8001220:	200000bc 	.word	0x200000bc
 8001224:	200000ae 	.word	0x200000ae
 8001228:	200000ac 	.word	0x200000ac
 800122c:	40e00000 	.word	0x40e00000
 8001230:	200000c4 	.word	0x200000c4
 8001234:	200000b6 	.word	0x200000b6
 8001238:	40a00000 	.word	0x40a00000
 800123c:	200000b8 	.word	0x200000b8
 8001240:	200000c8 	.word	0x200000c8
 8001244:	200000d4 	.word	0x200000d4
 8001248:	200000dc 	.word	0x200000dc
 800124c:	200000b2 	.word	0x200000b2
 8001250:	40b00000 	.word	0x40b00000
 8001254:	200000a6 	.word	0x200000a6
 8001258:	200000cc 	.word	0x200000cc
 800125c:	200000a4 	.word	0x200000a4
 8001260:	200000d0 	.word	0x200000d0
 8001264:	200000a8 	.word	0x200000a8
 8001268:	40c00000 	.word	0x40c00000
 800126c:	200000b0 	.word	0x200000b0
 8001270:	40f00000 	.word	0x40f00000
 8001274:	40100000 	.word	0x40100000
 8001278:	200000aa 	.word	0x200000aa
 800127c:	200000d8 	.word	0x200000d8
 8001280:	200000e0 	.word	0x200000e0
 8001284:	200000e8 	.word	0x200000e8
	else Press = (B7/B4)*2;
 8001288:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <BMP180_Get_Press+0x458>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <BMP180_Get_Press+0x45c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8dc 	bl	8000454 <__aeabi_ui2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4945      	ldr	r1, [pc, #276]	; (80013b8 <BMP180_Get_Press+0x460>)
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <BMP180_Get_Press+0x460>)
 80012a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <BMP180_Get_Press+0x464>)
 80012b2:	f7ff fa73 	bl	800079c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <BMP180_Get_Press+0x460>)
 80012c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <BMP180_Get_Press+0x464>)
 80012ca:	f7ff fa67 	bl	800079c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f937 	bl	8000548 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fbe1 	bl	8000aa8 <__aeabi_d2iz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <BMP180_Get_Press+0x468>)
 80012ea:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <BMP180_Get_Press+0x468>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f640 32de 	movw	r2, #3038	; 0xbde
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8bb 	bl	8000474 <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <BMP180_Get_Press+0x46c>)
 8001304:	f7ff fa4a 	bl	800079c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fbca 	bl	8000aa8 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	4a2a      	ldr	r2, [pc, #168]	; (80013c0 <BMP180_Get_Press+0x468>)
 8001318:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <BMP180_Get_Press+0x460>)
 800131c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001320:	a321      	add	r3, pc, #132	; (adr r3, 80013a8 <BMP180_Get_Press+0x450>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <BMP180_Get_Press+0x46c>)
 8001338:	f7ff fa30 	bl	800079c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbb0 	bl	8000aa8 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <BMP180_Get_Press+0x470>)
 800134c:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <BMP180_Get_Press+0x468>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <BMP180_Get_Press+0x470>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f889 	bl	8000474 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <BMP180_Get_Press+0x474>)
 8001368:	f7ff fa18 	bl	800079c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <BMP180_Get_Press+0x460>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7fe ff2f 	bl	80001dc <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <BMP180_Get_Press+0x460>)
 8001384:	e9c1 2300 	strd	r2, r3, [r1]

	Datastruct->Pressure = Press;
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <BMP180_Get_Press+0x460>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fbd1 	bl	8000b38 <__aeabi_d2f>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	c0bcbd00 	.word	0xc0bcbd00
 80013b0:	200000e0 	.word	0x200000e0
 80013b4:	200000d8 	.word	0x200000d8
 80013b8:	200000e8 	.word	0x200000e8
 80013bc:	40700000 	.word	0x40700000
 80013c0:	200000c4 	.word	0x200000c4
 80013c4:	40f00000 	.word	0x40f00000
 80013c8:	200000c8 	.word	0x200000c8
 80013cc:	40300000 	.word	0x40300000

080013d0 <BMP180_Get_Alt>:

// Updates the altitude
void BMP180_Get_Alt (BMP180_t *Datastruct, int oss){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	BMP180_Get_Press (Datastruct, oss);
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fdbb 	bl	8000f58 <BMP180_Get_Press>
	Datastruct->Altitude = 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <BMP180_Get_Alt+0x90>)
 80013e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e8:	a317      	add	r3, pc, #92	; (adr r3, 8001448 <BMP180_Get_Alt+0x78>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f9d5 	bl	800079c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	ec43 2b17 	vmov	d7, r2, r3
 80013fa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001450 <BMP180_Get_Alt+0x80>
 80013fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001402:	eef0 0a67 	vmov.f32	s1, s15
 8001406:	f00a fad1 	bl	800b9ac <pow>
 800140a:	ec53 2b10 	vmov	r2, r3, d0
 800140e:	f04f 0000 	mov.w	r0, #0
 8001412:	4914      	ldr	r1, [pc, #80]	; (8001464 <BMP180_Get_Alt+0x94>)
 8001414:	f7fe fee0 	bl	80001d8 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	a30d      	add	r3, pc, #52	; (adr r3, 8001458 <BMP180_Get_Alt+0x88>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb81 	bl	8000b38 <__aeabi_d2f>
 8001436:	4602      	mov	r2, r0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	f3af 8000 	nop.w
 8001448:	00000000 	.word	0x00000000
 800144c:	40f8bcd0 	.word	0x40f8bcd0
 8001450:	ccd745e4 	.word	0xccd745e4
 8001454:	3fc85b95 	.word	0x3fc85b95
 8001458:	00000000 	.word	0x00000000
 800145c:	40e5a540 	.word	0x40e5a540
 8001460:	200000e8 	.word	0x200000e8
 8001464:	3ff00000 	.word	0x3ff00000

08001468 <BMP180_Init>:

// Starts reading the data from the sensor
void BMP180_Init (void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	read_callibration_data();
 800146c:	f7ff fbb4 	bl	8000bd8 <read_callibration_data>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <BMP180_Read_All>:

// Updates all 3 (Temperature, Altitude, Pressure)
void BMP180_Read_All (BMP180_t *Datastruct, int oss){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	BMP180_Get_Temp(Datastruct);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc86 	bl	8000d90 <BMP180_Get_Temp>
	BMP180_Get_Alt(Datastruct, oss); //GetAlt calls GetPress
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <BMP180_Get_Alt>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <BUZZER_Toggle>:

void BUZZER_TurnOff(void){
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, OFF);
}

void BUZZER_Toggle(void){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);
 8001498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 fd90 	bl	8002fc4 <HAL_GPIO_TogglePin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <LED_TurnOn>:
#define LED_GPIO_PIN GPIO_PIN_3 // LED GPIO PIN = PB3
#define ON SET
#define OFF RESET


void LED_TurnOn(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, ON);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2108      	movs	r1, #8
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <LED_TurnOn+0x14>)
 80014b2:	f001 fd6f 	bl	8002f94 <HAL_GPIO_WritePin>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	48000400 	.word	0x48000400

080014c0 <LED_Toggle>:

void LED_TurnOff(void){
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, OFF);
}

void LED_Toggle(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_GPIO_PIN);
 80014c4:	2108      	movs	r1, #8
 80014c6:	4802      	ldr	r0, [pc, #8]	; (80014d0 <LED_Toggle+0x10>)
 80014c8:	f001 fd7c 	bl	8002fc4 <HAL_GPIO_TogglePin>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	48000400 	.word	0x48000400

080014d4 <MPU6050_Init>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(void){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80014da:	2364      	movs	r3, #100	; 0x64
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2301      	movs	r3, #1
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	2275      	movs	r2, #117	; 0x75
 80014ea:	21d0      	movs	r1, #208	; 0xd0
 80014ec:	4822      	ldr	r0, [pc, #136]	; (8001578 <MPU6050_Init+0xa4>)
 80014ee:	f001 ff33 	bl	8003358 <HAL_I2C_Mem_Read>

    if(check == 104){ // 0x68 will be returned by the sensor if everything goes well
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b68      	cmp	r3, #104	; 0x68
 80014f6:	d139      	bne.n	800156c <MPU6050_Init+0x98>
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	1dbb      	adds	r3, r7, #6
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	226b      	movs	r2, #107	; 0x6b
 800150c:	21d0      	movs	r1, #208	; 0xd0
 800150e:	481a      	ldr	r0, [pc, #104]	; (8001578 <MPU6050_Init+0xa4>)
 8001510:	f001 fe0e 	bl	8003130 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001514:	2307      	movs	r3, #7
 8001516:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2301      	movs	r3, #1
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	2219      	movs	r2, #25
 8001528:	21d0      	movs	r1, #208	; 0xd0
 800152a:	4813      	ldr	r0, [pc, #76]	; (8001578 <MPU6050_Init+0xa4>)
 800152c:	f001 fe00 	bl	8003130 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2301      	movs	r3, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	221c      	movs	r2, #28
 8001544:	21d0      	movs	r1, #208	; 0xd0
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <MPU6050_Init+0xa4>)
 8001548:	f001 fdf2 	bl	8003130 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800154c:	2300      	movs	r3, #0
 800154e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2301      	movs	r3, #1
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	221b      	movs	r2, #27
 8001560:	21d0      	movs	r1, #208	; 0xd0
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MPU6050_Init+0xa4>)
 8001564:	f001 fde4 	bl	8003130 <HAL_I2C_Mem_Write>
        return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <MPU6050_Init+0x9a>
    }
    return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003a0 	.word	0x200003a0
 800157c:	00000000 	.word	0x00000000

08001580 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(MPU6050_t *DataStruct){
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af04      	add	r7, sp, #16
 8001586:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_StatusTypeDef h_status = HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2306      	movs	r3, #6
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	223b      	movs	r2, #59	; 0x3b
 800159a:	21d0      	movs	r1, #208	; 0xd0
 800159c:	482c      	ldr	r0, [pc, #176]	; (8001650 <MPU6050_Read_Accel+0xd0>)
 800159e:	f001 fedb 	bl	8003358 <HAL_I2C_Mem_Read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80015b8:	7abb      	ldrb	r3, [r7, #10]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80015ca:	7b3b      	ldrb	r3, [r7, #12]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff46 	bl	8000474 <__aeabi_i2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MPU6050_Read_Accel+0xd4>)
 80015ee:	f7ff f8d5 	bl	800079c <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff36 	bl	8000474 <__aeabi_i2d>
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MPU6050_Read_Accel+0xd4>)
 800160e:	f7ff f8c5 	bl	800079c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff26 	bl	8000474 <__aeabi_i2d>
 8001628:	a307      	add	r3, pc, #28	; (adr r3, 8001648 <MPU6050_Read_Accel+0xc8>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f8b5 	bl	800079c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	00000000 	.word	0x00000000
 800164c:	40cc2900 	.word	0x40cc2900
 8001650:	200003a0 	.word	0x200003a0
 8001654:	40d00000 	.word	0x40d00000

08001658 <process_SD_card>:
//	} while (0);
//
//	//We're done, so de-mount the drive
//	f_mount(NULL, "", 0);
//}
void process_SD_card(MPU6050_t *MPU6050, BMP180_t *BMP180, INA219_t *INA219) {
 8001658:	b580      	push	{r7, lr}
 800165a:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0
 8001662:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001666:	f843 0cec 	str.w	r0, [r3, #-236]
 800166a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800166e:	f843 1cf0 	str.w	r1, [r3, #-240]
 8001672:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001676:	f843 2cf4 	str.w	r2, [r3, #-244]
	FRESULT fres;                 //Result after operations
	char buf[100];

	do {
		//Mount the SD Card
		fres = f_mount(&FatFs, "", 1);    //1=mount now
 800167a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800167e:	f103 0318 	add.w	r3, r3, #24
 8001682:	3b08      	subs	r3, #8
 8001684:	2201      	movs	r2, #1
 8001686:	4946      	ldr	r1, [pc, #280]	; (80017a0 <process_SD_card+0x148>)
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fc47 	bl	8007f1c <f_mount>
 800168e:	4603      	mov	r3, r0
 8001690:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001694:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8001698:	7013      	strb	r3, [r2, #0]
		if (fres != FR_OK) {
 800169a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800169e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d16d      	bne.n	8001784 <process_SD_card+0x12c>
		//Read the SD Card Total size and Free Size
		FATFS *pfs;
		DWORD fre_clust;
		uint32_t totalSpace, freeSpace;

		f_getfree("", &fre_clust, &pfs);
 80016a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ac:	3a20      	subs	r2, #32
 80016ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b2:	3b24      	subs	r3, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	483a      	ldr	r0, [pc, #232]	; (80017a0 <process_SD_card+0x148>)
 80016b8:	f007 f8f7 	bl	80088aa <f_getfree>
		totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80016bc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016c0:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	3b02      	subs	r3, #2
 80016c8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80016cc:	f852 2ce0 	ldr.w	r2, [r2, #-224]
 80016d0:	8952      	ldrh	r2, [r2, #10]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe febc 	bl	8000454 <__aeabi_ui2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <process_SD_card+0x14c>)
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa03 	bl	8000af8 <__aeabi_d2uiz>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80016f8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80016fc:	6013      	str	r3, [r2, #0]
		freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80016fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001702:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001706:	895b      	ldrh	r3, [r3, #10]
 8001708:	461a      	mov	r2, r3
 800170a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800170e:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fe9c 	bl	8000454 <__aeabi_ui2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <process_SD_card+0x14c>)
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f9e3 	bl	8000af8 <__aeabi_d2uiz>
 8001732:	4603      	mov	r3, r0
 8001734:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001738:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800173c:	6013      	str	r3, [r2, #0]

		//Open the file
		fres = f_open(&fil, "Mission1_Data.csv",
 800173e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001742:	3b38      	subs	r3, #56	; 0x38
 8001744:	220b      	movs	r2, #11
 8001746:	4918      	ldr	r1, [pc, #96]	; (80017a8 <process_SD_card+0x150>)
 8001748:	4618      	mov	r0, r3
 800174a:	f006 fc4b 	bl	8007fe4 <f_open>
 800174e:	4603      	mov	r3, r0
 8001750:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001754:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8001758:	7013      	strb	r3, [r2, #0]
				FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
		if (fres != FR_OK) {
 800175a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800175e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10f      	bne.n	8001788 <process_SD_card+0x130>
			break;
		}

		//write the data
		f_puts("Temperature, Pressure, Altitude, Acceleration\n", &fil);
 8001768:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800176c:	3b38      	subs	r3, #56	; 0x38
 800176e:	4619      	mov	r1, r3
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <process_SD_card+0x154>)
 8001772:	f007 f9cd 	bl	8008b10 <f_puts>

		//close your file
		f_close(&fil);
 8001776:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800177a:	3b38      	subs	r3, #56	; 0x38
 800177c:	4618      	mov	r0, r3
 800177e:	f007 f865 	bl	800884c <f_close>
 8001782:	e002      	b.n	800178a <process_SD_card+0x132>
			break;
 8001784:	bf00      	nop
 8001786:	e000      	b.n	800178a <process_SD_card+0x132>
			break;
 8001788:	bf00      	nop


	} while (0);

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 800178a:	2200      	movs	r2, #0
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <process_SD_card+0x148>)
 800178e:	2000      	movs	r0, #0
 8001790:	f006 fbc4 	bl	8007f1c <f_mount>
}
 8001794:	bf00      	nop
 8001796:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 800179a:	3738      	adds	r7, #56	; 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	0800c83c 	.word	0x0800c83c
 80017a4:	3fe00000 	.word	0x3fe00000
 80017a8:	0800c840 	.word	0x0800c840
 80017ac:	0800c854 	.word	0x0800c854

080017b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <SELECT+0x18>)
 80017ba:	f001 fbeb 	bl	8002f94 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f001 f974 	bl	8002aac <HAL_Delay>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	48000400 	.word	0x48000400

080017cc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2101      	movs	r1, #1
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <DESELECT+0x18>)
 80017d6:	f001 fbdd 	bl	8002f94 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f001 f966 	bl	8002aac <HAL_Delay>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	48000400 	.word	0x48000400

080017e8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017f2:	bf00      	nop
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <SPI_TxByte+0x30>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d1f8      	bne.n	80017f4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001802:	1df9      	adds	r1, r7, #7
 8001804:	2364      	movs	r3, #100	; 0x64
 8001806:	2201      	movs	r2, #1
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <SPI_TxByte+0x30>)
 800180a:	f003 fbfe 	bl	800500a <HAL_SPI_Transmit>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000448 	.word	0x20000448

0800181c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001828:	bf00      	nop
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <SPI_TxBuffer+0x30>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b02      	cmp	r3, #2
 8001836:	d1f8      	bne.n	800182a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <SPI_TxBuffer+0x30>)
 8001840:	f003 fbe3 	bl	800500a <HAL_SPI_Transmit>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000448 	.word	0x20000448

08001850 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001856:	23ff      	movs	r3, #255	; 0xff
 8001858:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800185a:	bf00      	nop
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <SPI_RxByte+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d1f8      	bne.n	800185c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800186a:	1dba      	adds	r2, r7, #6
 800186c:	1df9      	adds	r1, r7, #7
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <SPI_RxByte+0x34>)
 8001876:	f003 fd3d 	bl	80052f4 <HAL_SPI_TransmitReceive>

  return data;
 800187a:	79bb      	ldrb	r3, [r7, #6]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000448 	.word	0x20000448

08001888 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001890:	f7ff ffde 	bl	8001850 <SPI_RxByte>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	701a      	strb	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <SD_ReadyWait+0x30>)
 80018ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018b0:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80018b2:	f7ff ffcd 	bl	8001850 <SPI_RxByte>
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2bff      	cmp	r3, #255	; 0xff
 80018be:	d003      	beq.n	80018c8 <SD_ReadyWait+0x24>
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SD_ReadyWait+0x30>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f4      	bne.n	80018b2 <SD_ReadyWait+0xe>

  return res;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000fa 	.word	0x200000fa

080018d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80018de:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80018e2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80018e4:	f7ff ff72 	bl	80017cc <DESELECT>
  for(int i = 0; i < 10; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	e005      	b.n	80018fa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80018ee:	20ff      	movs	r0, #255	; 0xff
 80018f0:	f7ff ff7a 	bl	80017e8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	ddf6      	ble.n	80018ee <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001900:	f7ff ff56 	bl	80017b0 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001904:	2340      	movs	r3, #64	; 0x40
 8001906:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001918:	2395      	movs	r3, #149	; 0x95
 800191a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800191c:	463b      	mov	r3, r7
 800191e:	2106      	movs	r1, #6
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff7b 	bl	800181c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001926:	e002      	b.n	800192e <SD_PowerOn+0x56>
  {
    cnt--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3b01      	subs	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800192e:	f7ff ff8f 	bl	8001850 <SPI_RxByte>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d002      	beq.n	800193e <SD_PowerOn+0x66>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f4      	bne.n	8001928 <SD_PowerOn+0x50>
  }

  DESELECT();
 800193e:	f7ff ff45 	bl	80017cc <DESELECT>
  SPI_TxByte(0XFF);
 8001942:	20ff      	movs	r0, #255	; 0xff
 8001944:	f7ff ff50 	bl	80017e8 <SPI_TxByte>

  PowerFlag = 1;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <SD_PowerOn+0x80>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200000fd 	.word	0x200000fd

0800195c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <SD_PowerOff+0x14>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	200000fd 	.word	0x200000fd

08001974 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <SD_CheckPower+0x14>)
 800197a:	781b      	ldrb	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200000fd 	.word	0x200000fd

0800198c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <SD_RxDataBlock+0x58>)
 8001998:	22c8      	movs	r2, #200	; 0xc8
 800199a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800199c:	f7ff ff58 	bl	8001850 <SPI_RxByte>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d103      	bne.n	80019b2 <SD_RxDataBlock+0x26>
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <SD_RxDataBlock+0x58>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f4      	bne.n	800199c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2bfe      	cmp	r3, #254	; 0xfe
 80019b6:	d001      	beq.n	80019bc <SD_RxDataBlock+0x30>
 80019b8:	2300      	movs	r3, #0
 80019ba:	e00f      	b.n	80019dc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff60 	bl	8001888 <SPI_RxBytePtr>
  } while(len--);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	1e5a      	subs	r2, r3, #1
 80019cc:	603a      	str	r2, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f4      	bne.n	80019bc <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80019d2:	f7ff ff3d 	bl	8001850 <SPI_RxByte>
  SPI_RxByte();
 80019d6:	f7ff ff3b 	bl	8001850 <SPI_RxByte>

  return TRUE;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200000f8 	.word	0x200000f8

080019e8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80019f8:	f7ff ff54 	bl	80018a4 <SD_ReadyWait>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d001      	beq.n	8001a06 <SD_TxDataBlock+0x1e>
 8001a02:	2300      	movs	r3, #0
 8001a04:	e02f      	b.n	8001a66 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff feed 	bl	80017e8 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	2bfd      	cmp	r3, #253	; 0xfd
 8001a12:	d020      	beq.n	8001a56 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff feff 	bl	800181c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8001a1e:	f7ff ff17 	bl	8001850 <SPI_RxByte>
    SPI_RxByte();
 8001a22:	f7ff ff15 	bl	8001850 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001a26:	e00b      	b.n	8001a40 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001a28:	f7ff ff12 	bl	8001850 <SPI_RxByte>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d006      	beq.n	8001a48 <SD_TxDataBlock+0x60>
      i++;
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d9f0      	bls.n	8001a28 <SD_TxDataBlock+0x40>
 8001a46:	e000      	b.n	8001a4a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001a48:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ff00 	bl	8001850 <SPI_RxByte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0fa      	beq.n	8001a4c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d101      	bne.n	8001a64 <SD_TxDataBlock+0x7c>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	6039      	str	r1, [r7, #0]
 8001a78:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a7a:	f7ff ff13 	bl	80018a4 <SD_ReadyWait>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d001      	beq.n	8001a88 <SD_SendCmd+0x1a>
 8001a84:	23ff      	movs	r3, #255	; 0xff
 8001a86:	e042      	b.n	8001b0e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff feac 	bl	80017e8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	0e1b      	lsrs	r3, r3, #24
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fea6 	bl	80017e8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fea0 	bl	80017e8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe9a 	bl	80017e8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fe95 	bl	80017e8 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b40      	cmp	r3, #64	; 0x40
 8001ac2:	d102      	bne.n	8001aca <SD_SendCmd+0x5c>
 8001ac4:	2395      	movs	r3, #149	; 0x95
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e007      	b.n	8001ada <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b48      	cmp	r3, #72	; 0x48
 8001ace:	d102      	bne.n	8001ad6 <SD_SendCmd+0x68>
 8001ad0:	2387      	movs	r3, #135	; 0x87
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <SD_SendCmd+0x6c>
  else crc = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fe83 	bl	80017e8 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ae6:	d101      	bne.n	8001aec <SD_SendCmd+0x7e>
 8001ae8:	f7ff feb2 	bl	8001850 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001aec:	230a      	movs	r3, #10
 8001aee:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001af0:	f7ff feae 	bl	8001850 <SPI_RxByte>
 8001af4:	4603      	mov	r3, r0
 8001af6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001af8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da05      	bge.n	8001b0c <SD_SendCmd+0x9e>
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	73bb      	strb	r3, [r7, #14]
 8001b06:	7bbb      	ldrb	r3, [r7, #14]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f1      	bne.n	8001af0 <SD_SendCmd+0x82>

  return res;
 8001b0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SD_disk_initialize+0x14>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0d1      	b.n	8001cd0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <SD_disk_initialize+0x1c0>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <SD_disk_initialize+0x2a>
 8001b3a:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <SD_disk_initialize+0x1c0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e0c6      	b.n	8001cd0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8001b42:	f7ff fec9 	bl	80018d8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001b46:	f7ff fe33 	bl	80017b0 <SELECT>

  /* check disk type */
  type = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff ff8c 	bl	8001a6e <SD_SendCmd>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 80a1 	bne.w	8001ca0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <SD_disk_initialize+0x1c4>)
 8001b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b64:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b6a:	2048      	movs	r0, #72	; 0x48
 8001b6c:	f7ff ff7f 	bl	8001a6e <SD_SendCmd>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d155      	bne.n	8001c22 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e00c      	b.n	8001b96 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8001b7c:	7bfc      	ldrb	r4, [r7, #15]
 8001b7e:	f7ff fe67 	bl	8001850 <SPI_RxByte>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	f104 0310 	add.w	r3, r4, #16
 8001b8a:	443b      	add	r3, r7
 8001b8c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3301      	adds	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d9ef      	bls.n	8001b7c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b9c:	7abb      	ldrb	r3, [r7, #10]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d17e      	bne.n	8001ca0 <SD_disk_initialize+0x188>
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	2baa      	cmp	r3, #170	; 0xaa
 8001ba6:	d17b      	bne.n	8001ca0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2077      	movs	r0, #119	; 0x77
 8001bac:	f7ff ff5f 	bl	8001a6e <SD_SendCmd>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d807      	bhi.n	8001bc6 <SD_disk_initialize+0xae>
 8001bb6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bba:	2069      	movs	r0, #105	; 0x69
 8001bbc:	f7ff ff57 	bl	8001a6e <SD_SendCmd>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001bc6:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <SD_disk_initialize+0x1c4>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ec      	bne.n	8001ba8 <SD_disk_initialize+0x90>
 8001bce:	e000      	b.n	8001bd2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001bd0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001bd2:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <SD_disk_initialize+0x1c4>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d062      	beq.n	8001ca0 <SD_disk_initialize+0x188>
 8001bda:	2100      	movs	r1, #0
 8001bdc:	207a      	movs	r0, #122	; 0x7a
 8001bde:	f7ff ff46 	bl	8001a6e <SD_SendCmd>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d15b      	bne.n	8001ca0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e00c      	b.n	8001c08 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001bee:	7bfc      	ldrb	r4, [r7, #15]
 8001bf0:	f7ff fe2e 	bl	8001850 <SPI_RxByte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f104 0310 	add.w	r3, r4, #16
 8001bfc:	443b      	add	r3, r7
 8001bfe:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d9ef      	bls.n	8001bee <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001c0e:	7a3b      	ldrb	r3, [r7, #8]
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SD_disk_initialize+0x104>
 8001c18:	230c      	movs	r3, #12
 8001c1a:	e000      	b.n	8001c1e <SD_disk_initialize+0x106>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	73bb      	strb	r3, [r7, #14]
 8001c20:	e03e      	b.n	8001ca0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001c22:	2100      	movs	r1, #0
 8001c24:	2077      	movs	r0, #119	; 0x77
 8001c26:	f7ff ff22 	bl	8001a6e <SD_SendCmd>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d808      	bhi.n	8001c42 <SD_disk_initialize+0x12a>
 8001c30:	2100      	movs	r1, #0
 8001c32:	2069      	movs	r0, #105	; 0x69
 8001c34:	f7ff ff1b 	bl	8001a6e <SD_SendCmd>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d801      	bhi.n	8001c42 <SD_disk_initialize+0x12a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e000      	b.n	8001c44 <SD_disk_initialize+0x12c>
 8001c42:	2301      	movs	r3, #1
 8001c44:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d10e      	bne.n	8001c6a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2077      	movs	r0, #119	; 0x77
 8001c50:	f7ff ff0d 	bl	8001a6e <SD_SendCmd>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d80e      	bhi.n	8001c78 <SD_disk_initialize+0x160>
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2069      	movs	r0, #105	; 0x69
 8001c5e:	f7ff ff06 	bl	8001a6e <SD_SendCmd>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <SD_disk_initialize+0x160>
 8001c68:	e00c      	b.n	8001c84 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2041      	movs	r0, #65	; 0x41
 8001c6e:	f7ff fefe 	bl	8001a6e <SD_SendCmd>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <SD_disk_initialize+0x1c4>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e2      	bne.n	8001c46 <SD_disk_initialize+0x12e>
 8001c80:	e000      	b.n	8001c84 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c82:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <SD_disk_initialize+0x1c4>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <SD_disk_initialize+0x184>
 8001c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c90:	2050      	movs	r0, #80	; 0x50
 8001c92:	f7ff feec 	bl	8001a6e <SD_SendCmd>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SD_disk_initialize+0x188>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <SD_disk_initialize+0x1c8>)
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001ca6:	f7ff fd91 	bl	80017cc <DESELECT>
  SPI_RxByte();
 8001caa:	f7ff fdd1 	bl	8001850 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <SD_disk_initialize+0x1c0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SD_disk_initialize+0x1c0>)
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e001      	b.n	8001cca <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001cc6:	f7ff fe49 	bl	800195c <SD_PowerOff>
  }

  return Stat;
 8001cca:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <SD_disk_initialize+0x1c0>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	200000f8 	.word	0x200000f8
 8001ce0:	200000fc 	.word	0x200000fc

08001ce4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SD_disk_status+0x14>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e002      	b.n	8001cfe <SD_disk_status+0x1a>
  return Stat;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SD_disk_status+0x28>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <SD_disk_read+0x1c>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <SD_disk_read+0x20>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e051      	b.n	8001dd4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <SD_disk_read+0xcc>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SD_disk_read+0x32>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e048      	b.n	8001dd4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <SD_disk_read+0xd0>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <SD_disk_read+0x44>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d54:	f7ff fd2c 	bl	80017b0 <SELECT>

  if (count == 1)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d111      	bne.n	8001d82 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	2051      	movs	r0, #81	; 0x51
 8001d62:	f7ff fe84 	bl	8001a6e <SD_SendCmd>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d129      	bne.n	8001dc0 <SD_disk_read+0xb0>
 8001d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f7ff fe0b 	bl	800198c <SD_RxDataBlock>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <SD_disk_read+0xb0>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	e01e      	b.n	8001dc0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	2052      	movs	r0, #82	; 0x52
 8001d86:	f7ff fe72 	bl	8001a6e <SD_SendCmd>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d117      	bne.n	8001dc0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f7ff fdf9 	bl	800198c <SD_RxDataBlock>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00a      	beq.n	8001db6 <SD_disk_read+0xa6>
        buff += 512;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001da6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ed      	bne.n	8001d90 <SD_disk_read+0x80>
 8001db4:	e000      	b.n	8001db8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001db6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001db8:	2100      	movs	r1, #0
 8001dba:	204c      	movs	r0, #76	; 0x4c
 8001dbc:	f7ff fe57 	bl	8001a6e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001dc0:	f7ff fd04 	bl	80017cc <DESELECT>
  SPI_RxByte();
 8001dc4:	f7ff fd44 	bl	8001850 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	200000fc 	.word	0x200000fc

08001de4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <SD_disk_write+0x1c>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <SD_disk_write+0x20>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e06b      	b.n	8001edc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <SD_disk_write+0x100>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SD_disk_write+0x32>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e062      	b.n	8001edc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <SD_disk_write+0x100>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SD_disk_write+0x44>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e059      	b.n	8001edc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <SD_disk_write+0x104>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <SD_disk_write+0x56>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	607b      	str	r3, [r7, #4]

  SELECT();
 8001e3a:	f7ff fcb9 	bl	80017b0 <SELECT>

  if (count == 1)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d110      	bne.n	8001e66 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	2058      	movs	r0, #88	; 0x58
 8001e48:	f7ff fe11 	bl	8001a6e <SD_SendCmd>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d13a      	bne.n	8001ec8 <SD_disk_write+0xe4>
 8001e52:	21fe      	movs	r1, #254	; 0xfe
 8001e54:	68b8      	ldr	r0, [r7, #8]
 8001e56:	f7ff fdc7 	bl	80019e8 <SD_TxDataBlock>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d033      	beq.n	8001ec8 <SD_disk_write+0xe4>
      count = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	e030      	b.n	8001ec8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <SD_disk_write+0x104>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2077      	movs	r0, #119	; 0x77
 8001e76:	f7ff fdfa 	bl	8001a6e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	2057      	movs	r0, #87	; 0x57
 8001e7e:	f7ff fdf6 	bl	8001a6e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	2059      	movs	r0, #89	; 0x59
 8001e86:	f7ff fdf2 	bl	8001a6e <SD_SendCmd>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11b      	bne.n	8001ec8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e90:	21fc      	movs	r1, #252	; 0xfc
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7ff fda8 	bl	80019e8 <SD_TxDataBlock>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <SD_disk_write+0xd0>
        buff += 512;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ea4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ee      	bne.n	8001e90 <SD_disk_write+0xac>
 8001eb2:	e000      	b.n	8001eb6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001eb4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001eb6:	21fd      	movs	r1, #253	; 0xfd
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fd95 	bl	80019e8 <SD_TxDataBlock>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <SD_disk_write+0xe4>
      {
        count = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001ec8:	f7ff fc80 	bl	80017cc <DESELECT>
  SPI_RxByte();
 8001ecc:	f7ff fcc0 	bl	8001850 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	200000fc 	.word	0x200000fc

08001eec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	603a      	str	r2, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SD_disk_ioctl+0x1e>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e115      	b.n	8002136 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d124      	bne.n	8001f60 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d012      	beq.n	8001f44 <SD_disk_ioctl+0x58>
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	dc1a      	bgt.n	8001f58 <SD_disk_ioctl+0x6c>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <SD_disk_ioctl+0x40>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d006      	beq.n	8001f38 <SD_disk_ioctl+0x4c>
 8001f2a:	e015      	b.n	8001f58 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001f2c:	f7ff fd16 	bl	800195c <SD_PowerOff>
      res = RES_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f36:	e0fc      	b.n	8002132 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001f38:	f7ff fcce 	bl	80018d8 <SD_PowerOn>
      res = RES_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f42:	e0f6      	b.n	8002132 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	1c5c      	adds	r4, r3, #1
 8001f48:	f7ff fd14 	bl	8001974 <SD_CheckPower>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f56:	e0ec      	b.n	8002132 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f5e:	e0e8      	b.n	8002132 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f60:	4b77      	ldr	r3, [pc, #476]	; (8002140 <SD_disk_ioctl+0x254>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SD_disk_ioctl+0x86>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0e1      	b.n	8002136 <SD_disk_ioctl+0x24a>

    SELECT();
 8001f72:	f7ff fc1d 	bl	80017b0 <SELECT>

    switch (ctrl)
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	2b0d      	cmp	r3, #13
 8001f7a:	f200 80cb 	bhi.w	8002114 <SD_disk_ioctl+0x228>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <SD_disk_ioctl+0x98>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	0800207f 	.word	0x0800207f
 8001f88:	08001fbd 	.word	0x08001fbd
 8001f8c:	0800206f 	.word	0x0800206f
 8001f90:	08002115 	.word	0x08002115
 8001f94:	08002115 	.word	0x08002115
 8001f98:	08002115 	.word	0x08002115
 8001f9c:	08002115 	.word	0x08002115
 8001fa0:	08002115 	.word	0x08002115
 8001fa4:	08002115 	.word	0x08002115
 8001fa8:	08002115 	.word	0x08002115
 8001fac:	08002115 	.word	0x08002115
 8001fb0:	08002091 	.word	0x08002091
 8001fb4:	080020b5 	.word	0x080020b5
 8001fb8:	080020d9 	.word	0x080020d9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2049      	movs	r0, #73	; 0x49
 8001fc0:	f7ff fd55 	bl	8001a6e <SD_SendCmd>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 80a8 	bne.w	800211c <SD_disk_ioctl+0x230>
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fcda 	bl	800198c <SD_RxDataBlock>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 809e 	beq.w	800211c <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001fe0:	7b3b      	ldrb	r3, [r7, #12]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fea:	7d7b      	ldrb	r3, [r7, #21]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	7d3b      	ldrb	r3, [r7, #20]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ffe:	8bfb      	ldrh	r3, [r7, #30]
 8002000:	029a      	lsls	r2, r3, #10
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e02e      	b.n	8002066 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002008:	7c7b      	ldrb	r3, [r7, #17]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	b2da      	uxtb	r2, r3
 8002010:	7dbb      	ldrb	r3, [r7, #22]
 8002012:	09db      	lsrs	r3, r3, #7
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 0306 	and.w	r3, r3, #6
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4413      	add	r3, r2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3302      	adds	r3, #2
 800202c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002030:	7d3b      	ldrb	r3, [r7, #20]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	b2db      	uxtb	r3, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	b29b      	uxth	r3, r3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	b29b      	uxth	r3, r3
 8002040:	4413      	add	r3, r2
 8002042:	b29a      	uxth	r2, r3
 8002044:	7cbb      	ldrb	r3, [r7, #18]
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800204e:	b29b      	uxth	r3, r3
 8002050:	4413      	add	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002058:	8bfa      	ldrh	r2, [r7, #30]
 800205a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800205e:	3b09      	subs	r3, #9
 8002060:	409a      	lsls	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800206c:	e056      	b.n	800211c <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002074:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800207c:	e055      	b.n	800212a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800207e:	f7ff fc11 	bl	80018a4 <SD_ReadyWait>
 8002082:	4603      	mov	r3, r0
 8002084:	2bff      	cmp	r3, #255	; 0xff
 8002086:	d14b      	bne.n	8002120 <SD_disk_ioctl+0x234>
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800208e:	e047      	b.n	8002120 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002090:	2100      	movs	r1, #0
 8002092:	2049      	movs	r0, #73	; 0x49
 8002094:	f7ff fceb 	bl	8001a6e <SD_SendCmd>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d142      	bne.n	8002124 <SD_disk_ioctl+0x238>
 800209e:	2110      	movs	r1, #16
 80020a0:	6a38      	ldr	r0, [r7, #32]
 80020a2:	f7ff fc73 	bl	800198c <SD_RxDataBlock>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03b      	beq.n	8002124 <SD_disk_ioctl+0x238>
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020b2:	e037      	b.n	8002124 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020b4:	2100      	movs	r1, #0
 80020b6:	204a      	movs	r0, #74	; 0x4a
 80020b8:	f7ff fcd9 	bl	8001a6e <SD_SendCmd>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d132      	bne.n	8002128 <SD_disk_ioctl+0x23c>
 80020c2:	2110      	movs	r1, #16
 80020c4:	6a38      	ldr	r0, [r7, #32]
 80020c6:	f7ff fc61 	bl	800198c <SD_RxDataBlock>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d02b      	beq.n	8002128 <SD_disk_ioctl+0x23c>
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020d6:	e027      	b.n	8002128 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80020d8:	2100      	movs	r1, #0
 80020da:	207a      	movs	r0, #122	; 0x7a
 80020dc:	f7ff fcc7 	bl	8001a6e <SD_SendCmd>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ec:	e00b      	b.n	8002106 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 80020ee:	6a3c      	ldr	r4, [r7, #32]
 80020f0:	1c63      	adds	r3, r4, #1
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	f7ff fbac 	bl	8001850 <SPI_RxByte>
 80020f8:	4603      	mov	r3, r0
 80020fa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80020fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002100:	3301      	adds	r3, #1
 8002102:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800210a:	2b03      	cmp	r3, #3
 800210c:	d9ef      	bls.n	80020ee <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8002114:	2304      	movs	r3, #4
 8002116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800211a:	e006      	b.n	800212a <SD_disk_ioctl+0x23e>
      break;
 800211c:	bf00      	nop
 800211e:	e004      	b.n	800212a <SD_disk_ioctl+0x23e>
      break;
 8002120:	bf00      	nop
 8002122:	e002      	b.n	800212a <SD_disk_ioctl+0x23e>
      break;
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <SD_disk_ioctl+0x23e>
      break;
 8002128:	bf00      	nop
    }

    DESELECT();
 800212a:	f7ff fb4f 	bl	80017cc <DESELECT>
    SPI_RxByte();
 800212e:	f7ff fb8f 	bl	8001850 <SPI_RxByte>
  }

  return res;
 8002132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002136:	4618      	mov	r0, r3
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <vApplicationGetIdleTaskMemory+0x2c>)
 8002154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <vApplicationGetIdleTaskMemory+0x30>)
 800215a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000100 	.word	0x20000100
 8002174:	200001a0 	.word	0x200001a0

08002178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b0a4      	sub	sp, #144	; 0x90
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217e:	f000 fc20 	bl	80029c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002182:	f000 f893 	bl	80022ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002186:	f000 f9a1 	bl	80024cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800218a:	f000 f8e1 	bl	8002350 <MX_I2C1_Init>
  MX_SPI1_Init();
 800218e:	f000 f95f 	bl	8002450 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002192:	f003 fc35 	bl	8005a00 <MX_FATFS_Init>
  MX_I2C3_Init();
 8002196:	f000 f91b 	bl	80023d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  //Initialize BMP180 and MPU6050 objects
  BMP180_Init();
 800219a:	f7ff f965 	bl	8001468 <BMP180_Init>
  int answer = MPU6050_Init(); //if MPU6050_Init returns 0, everything is fine
 800219e:	f7ff f999 	bl	80014d4 <MPU6050_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  //Define the state
  if(answer == 0){
 80021a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <main+0x40>
	  current_state = NOMINAL;
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <main+0x108>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e002      	b.n	80021be <main+0x46>
  } else {
	  current_state = SAFE;
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <main+0x108>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BMP180_info */
  osThreadDef(BMP180_info, BMP180_all, osPriorityNormal, 0, 1024);
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <main+0x10c>)
 80021c0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80021c4:	461d      	mov	r5, r3
 80021c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BMP180_infoHandle = osThreadCreate(osThread(BMP180_info), NULL);
 80021d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f006 fe73 	bl	8008ec4 <osThreadCreate>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <main+0x110>)
 80021e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of MPU6050_info */
  osThreadDef(MPU6050_info, MPU6050_all, osPriorityNormal, 0, 1024);
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <main+0x114>)
 80021e6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80021ea:	461d      	mov	r5, r3
 80021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050_infoHandle = osThreadCreate(osThread(MPU6050_info), NULL);
 80021f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 fe60 	bl	8008ec4 <osThreadCreate>
 8002204:	4603      	mov	r3, r0
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <main+0x118>)
 8002208:	6013      	str	r3, [r2, #0]

  /* definition and creation of BUZZER_intermit */
  osThreadDef(BUZZER_intermit, BUZZER_blink, osPriorityNormal, 0, 128);
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <main+0x11c>)
 800220c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002210:	461d      	mov	r5, r3
 8002212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800221a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BUZZER_intermitHandle = osThreadCreate(osThread(BUZZER_intermit), NULL);
 800221e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fe4d 	bl	8008ec4 <osThreadCreate>
 800222a:	4603      	mov	r3, r0
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <main+0x120>)
 800222e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_intermit */
  osThreadDef(LED_intermit, LED_blink, osPriorityNormal, 0, 128);
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <main+0x124>)
 8002232:	f107 041c 	add.w	r4, r7, #28
 8002236:	461d      	mov	r5, r3
 8002238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_intermitHandle = osThreadCreate(osThread(LED_intermit), NULL);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f006 fe3a 	bl	8008ec4 <osThreadCreate>
 8002250:	4603      	mov	r3, r0
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <main+0x128>)
 8002254:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD_Handle_task */
  osThreadDef(SD_Handle_task, SD_Handle, osPriorityNormal, 0, 4096);
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <main+0x12c>)
 8002258:	463c      	mov	r4, r7
 800225a:	461d      	mov	r5, r3
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SD_Handle_taskHandle = osThreadCreate(osThread(SD_Handle_task), NULL);
 8002268:	463b      	mov	r3, r7
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f006 fe29 	bl	8008ec4 <osThreadCreate>
 8002272:	4603      	mov	r3, r0
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <main+0x130>)
 8002276:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002278:	f006 fe1d 	bl	8008eb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800227c:	e7fe      	b.n	800227c <main+0x104>
 800227e:	bf00      	nop
 8002280:	20000544 	.word	0x20000544
 8002284:	0800c890 	.word	0x0800c890
 8002288:	200004ac 	.word	0x200004ac
 800228c:	0800c8bc 	.word	0x0800c8bc
 8002290:	200004b0 	.word	0x200004b0
 8002294:	0800c8e8 	.word	0x0800c8e8
 8002298:	200004b4 	.word	0x200004b4
 800229c:	0800c914 	.word	0x0800c914
 80022a0:	200004b8 	.word	0x200004b8
 80022a4:	0800c940 	.word	0x0800c940
 80022a8:	200004bc 	.word	0x200004bc

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b096      	sub	sp, #88	; 0x58
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2244      	movs	r2, #68	; 0x44
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f009 fa86 	bl	800b7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022d2:	f001 fcb9 	bl	8003c48 <HAL_PWREx_ControlVoltageScaling>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022dc:	f000 f9ce 	bl	800267c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	2302      	movs	r3, #2
 80022e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ea:	2310      	movs	r3, #16
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ee:	2302      	movs	r3, #2
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022f2:	2302      	movs	r3, #2
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022fa:	230a      	movs	r3, #10
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022fe:	2307      	movs	r3, #7
 8002300:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002302:	2302      	movs	r3, #2
 8002304:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002306:	2302      	movs	r3, #2
 8002308:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fcf0 	bl	8003cf4 <HAL_RCC_OscConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800231a:	f000 f9af 	bl	800267c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231e:	230f      	movs	r3, #15
 8002320:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002322:	2303      	movs	r3, #3
 8002324:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	2104      	movs	r1, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f002 f8f0 	bl	800451c <HAL_RCC_ClockConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002342:	f000 f99b 	bl	800267c <Error_Handler>
  }
}
 8002346:	bf00      	nop
 8002348:	3758      	adds	r7, #88	; 0x58
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <MX_I2C1_Init+0x78>)
 8002358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_I2C1_Init+0x74>)
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <MX_I2C1_Init+0x7c>)
 800235e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002368:	2201      	movs	r2, #1
 800236a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_I2C1_Init+0x74>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <MX_I2C1_Init+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MX_I2C1_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800238a:	480e      	ldr	r0, [pc, #56]	; (80023c4 <MX_I2C1_Init+0x74>)
 800238c:	f000 fe34 	bl	8002ff8 <HAL_I2C_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002396:	f000 f971 	bl	800267c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800239a:	2100      	movs	r1, #0
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <MX_I2C1_Init+0x74>)
 800239e:	f001 fbad 	bl	8003afc <HAL_I2CEx_ConfigAnalogFilter>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023a8:	f000 f968 	bl	800267c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023ac:	2100      	movs	r1, #0
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_I2C1_Init+0x74>)
 80023b0:	f001 fbef 	bl	8003b92 <HAL_I2CEx_ConfigDigitalFilter>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023ba:	f000 f95f 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200003a0 	.word	0x200003a0
 80023c8:	40005400 	.word	0x40005400
 80023cc:	10909cec 	.word	0x10909cec

080023d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <MX_I2C3_Init+0x74>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <MX_I2C3_Init+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_I2C3_Init+0x74>)
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <MX_I2C3_Init+0x7c>)
 80023de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_I2C3_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <MX_I2C3_Init+0x74>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <MX_I2C3_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_I2C3_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <MX_I2C3_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_I2C3_Init+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_I2C3_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <MX_I2C3_Init+0x74>)
 800240c:	f000 fdf4 	bl	8002ff8 <HAL_I2C_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002416:	f000 f931 	bl	800267c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800241a:	2100      	movs	r1, #0
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <MX_I2C3_Init+0x74>)
 800241e:	f001 fb6d 	bl	8003afc <HAL_I2CEx_ConfigAnalogFilter>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002428:	f000 f928 	bl	800267c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800242c:	2100      	movs	r1, #0
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_I2C3_Init+0x74>)
 8002430:	f001 fbaf 	bl	8003b92 <HAL_I2CEx_ConfigDigitalFilter>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800243a:	f000 f91f 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200003f4 	.word	0x200003f4
 8002448:	40005c00 	.word	0x40005c00
 800244c:	10909cec 	.word	0x10909cec

08002450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002456:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <MX_SPI1_Init+0x78>)
 8002458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_SPI1_Init+0x74>)
 800245c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_SPI1_Init+0x74>)
 800246a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800246e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_SPI1_Init+0x74>)
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002486:	2220      	movs	r2, #32
 8002488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_SPI1_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MX_SPI1_Init+0x74>)
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_SPI1_Init+0x74>)
 800249e:	2207      	movs	r2, #7
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_SPI1_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_SPI1_Init+0x74>)
 80024aa:	2208      	movs	r2, #8
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_SPI1_Init+0x74>)
 80024b0:	f002 fd08 	bl	8004ec4 <HAL_SPI_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024ba:	f000 f8df 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000448 	.word	0x20000448
 80024c8:	40013000 	.word	0x40013000

080024cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <MX_GPIO_Init+0xc4>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <MX_GPIO_Init+0xc4>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <MX_GPIO_Init+0xc4>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <MX_GPIO_Init+0xc4>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <MX_GPIO_Init+0xc4>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <MX_GPIO_Init+0xc4>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Payload_SW_Pin|GPIO_Output_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f000 fd3a 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2103      	movs	r1, #3
 8002524:	481b      	ldr	r0, [pc, #108]	; (8002594 <MX_GPIO_Init+0xc8>)
 8002526:	f000 fd35 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800252a:	2301      	movs	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f000 fbba 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_SW_Pin GPIO_Output_Pin */
  GPIO_InitStruct.Pin = Payload_SW_Pin|GPIO_Output_Pin;
 800254c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002568:	f000 fbaa 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 800256c:	2303      	movs	r3, #3
 800256e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4619      	mov	r1, r3
 8002582:	4804      	ldr	r0, [pc, #16]	; (8002594 <MX_GPIO_Init+0xc8>)
 8002584:	f000 fb9c 	bl	8002cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	48000400 	.word	0x48000400

08002598 <BMP180_all>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BMP180_all */
void BMP180_all(void const * argument)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(current_state == SAFE){
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <BMP180_all+0x28>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <BMP180_all+0x16>
		vTaskSuspend(NULL);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f007 fe0f 	bl	800a1cc <vTaskSuspend>
	}
  /* Infinite loop */
  for(;;)
  {
	BMP180_Read_All(&BMP180, 0);
 80025ae:	2100      	movs	r1, #0
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <BMP180_all+0x2c>)
 80025b2:	f7fe ff5f 	bl	8001474 <BMP180_Read_All>
    osDelay(50);
 80025b6:	2032      	movs	r0, #50	; 0x32
 80025b8:	f006 fcd0 	bl	8008f5c <osDelay>
	BMP180_Read_All(&BMP180, 0);
 80025bc:	e7f7      	b.n	80025ae <BMP180_all+0x16>
 80025be:	bf00      	nop
 80025c0:	20000544 	.word	0x20000544
 80025c4:	200004c0 	.word	0x200004c0

080025c8 <MPU6050_all>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU6050_all */
void MPU6050_all(void const * argument)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU6050_all */
	if(current_state == SAFE){
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MPU6050_all+0x24>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <MPU6050_all+0x16>
		vTaskSuspend(NULL);
 80025d8:	2000      	movs	r0, #0
 80025da:	f007 fdf7 	bl	800a1cc <vTaskSuspend>
	}
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_Accel(&MPU6050);
 80025de:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MPU6050_all+0x28>)
 80025e0:	f7fe ffce 	bl	8001580 <MPU6050_Read_Accel>
    osDelay(50);
 80025e4:	2032      	movs	r0, #50	; 0x32
 80025e6:	f006 fcb9 	bl	8008f5c <osDelay>
	MPU6050_Read_Accel(&MPU6050);
 80025ea:	e7f8      	b.n	80025de <MPU6050_all+0x16>
 80025ec:	20000544 	.word	0x20000544
 80025f0:	200004d8 	.word	0x200004d8

080025f4 <BUZZER_blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BUZZER_blink */
void BUZZER_blink(void const * argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BUZZER_blink */
  /* Infinite loop */
  for(;;)
  {
	if(current_state == SAFE){
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <BUZZER_blink+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d1fb      	bne.n	80025fc <BUZZER_blink+0x8>
		BUZZER_Toggle();
 8002604:	f7fe ff46 	bl	8001494 <BUZZER_Toggle>
		osDelay(500);
 8002608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800260c:	f006 fca6 	bl	8008f5c <osDelay>
	if(current_state == SAFE){
 8002610:	e7f4      	b.n	80025fc <BUZZER_blink+0x8>
 8002612:	bf00      	nop
 8002614:	20000544 	.word	0x20000544

08002618 <LED_blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_blink */
void LED_blink(void const * argument)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_blink */
  /* Infinite loop */
  for(;;)
  {
	if(current_state == SAFE){
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <LED_blink+0x2c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d106      	bne.n	8002636 <LED_blink+0x1e>
		LED_Toggle();
 8002628:	f7fe ff4a 	bl	80014c0 <LED_Toggle>
		osDelay(500);
 800262c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002630:	f006 fc94 	bl	8008f5c <osDelay>
 8002634:	e7f4      	b.n	8002620 <LED_blink+0x8>
	} else if(current_state == NOMINAL){
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <LED_blink+0x2c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <LED_blink+0x8>
		LED_TurnOn();
 800263e:	f7fe ff33 	bl	80014a8 <LED_TurnOn>
	if(current_state == SAFE){
 8002642:	e7ed      	b.n	8002620 <LED_blink+0x8>
 8002644:	20000544 	.word	0x20000544

08002648 <SD_Handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SD_Handle */
void SD_Handle(void const * argument)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SD_Handle */
	/* Infinite loop */
	for (;;) {
		if (current_state == NOMINAL) {
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <SD_Handle+0x24>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d104      	bne.n	8002662 <SD_Handle+0x1a>
			process_SD_card(&MPU6050, &BMP180, &INA219);
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <SD_Handle+0x28>)
 800265a:	4906      	ldr	r1, [pc, #24]	; (8002674 <SD_Handle+0x2c>)
 800265c:	4806      	ldr	r0, [pc, #24]	; (8002678 <SD_Handle+0x30>)
 800265e:	f7fe fffb 	bl	8001658 <process_SD_card>
		}
		osDelay(20);
 8002662:	2014      	movs	r0, #20
 8002664:	f006 fc7a 	bl	8008f5c <osDelay>
		if (current_state == NOMINAL) {
 8002668:	e7f2      	b.n	8002650 <SD_Handle+0x8>
 800266a:	bf00      	nop
 800266c:	20000544 	.word	0x20000544
 8002670:	20000530 	.word	0x20000530
 8002674:	200004c0 	.word	0x200004c0
 8002678:	200004d8 	.word	0x200004d8

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_MspInit+0x4c>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_MspInit+0x4c>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6613      	str	r3, [r2, #96]	; 0x60
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_MspInit+0x4c>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_MspInit+0x4c>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_MspInit+0x4c>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6593      	str	r3, [r2, #88]	; 0x58
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	210f      	movs	r1, #15
 80026c2:	f06f 0001 	mvn.w	r0, #1
 80026c6:	f000 fad2 	bl	8002c6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a2      	sub	sp, #136	; 0x88
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	2254      	movs	r2, #84	; 0x54
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f009 f867 	bl	800b7cc <memset>
  if(hi2c->Instance==I2C1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4e      	ldr	r2, [pc, #312]	; (800283c <HAL_I2C_MspInit+0x164>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d138      	bne.n	800277a <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800270c:	2300      	movs	r3, #0
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002710:	f107 0320 	add.w	r3, r7, #32
 8002714:	4618      	mov	r0, r3
 8002716:	f002 f8ed 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002720:	f7ff ffac 	bl	800267c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_I2C_MspInit+0x168>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4a45      	ldr	r2, [pc, #276]	; (8002840 <HAL_I2C_MspInit+0x168>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_I2C_MspInit+0x168>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002740:	2312      	movs	r3, #18
 8002742:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002744:	2301      	movs	r3, #1
 8002746:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002748:	2301      	movs	r3, #1
 800274a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800274e:	2304      	movs	r3, #4
 8002750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002758:	4619      	mov	r1, r3
 800275a:	483a      	ldr	r0, [pc, #232]	; (8002844 <HAL_I2C_MspInit+0x16c>)
 800275c:	f000 fab0 	bl	8002cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_I2C_MspInit+0x168>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a36      	ldr	r2, [pc, #216]	; (8002840 <HAL_I2C_MspInit+0x168>)
 8002766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800276a:	6593      	str	r3, [r2, #88]	; 0x58
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_I2C_MspInit+0x168>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002778:	e05c      	b.n	8002834 <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_I2C_MspInit+0x170>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d157      	bne.n	8002834 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002788:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800278a:	2300      	movs	r3, #0
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	4618      	mov	r0, r3
 8002794:	f002 f8ae 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 800279e:	f7ff ff6d 	bl	800267c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	4a26      	ldr	r2, [pc, #152]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a20      	ldr	r2, [pc, #128]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_I2C_MspInit+0x168>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d6:	2312      	movs	r3, #18
 80027d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027e4:	2304      	movs	r3, #4
 80027e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027ee:	4619      	mov	r1, r3
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f000 fa64 	bl	8002cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027f8:	2310      	movs	r3, #16
 80027fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fc:	2312      	movs	r3, #18
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800280a:	2304      	movs	r3, #4
 800280c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002814:	4619      	mov	r1, r3
 8002816:	480b      	ldr	r0, [pc, #44]	; (8002844 <HAL_I2C_MspInit+0x16c>)
 8002818:	f000 fa52 	bl	8002cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_I2C_MspInit+0x168>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_I2C_MspInit+0x168>)
 8002822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002826:	6593      	str	r3, [r2, #88]	; 0x58
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_I2C_MspInit+0x168>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	3788      	adds	r7, #136	; 0x88
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40005400 	.word	0x40005400
 8002840:	40021000 	.word	0x40021000
 8002844:	48000400 	.word	0x48000400
 8002848:	40005c00 	.word	0x40005c00

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_SPI_MspInit+0x80>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d129      	bne.n	80028c2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 8002874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002878:	6613      	str	r3, [r2, #96]	; 0x60
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 800289e:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028b0:	2305      	movs	r3, #5
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f000 f9ff 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40013000 	.word	0x40013000
 80028d0:	40021000 	.word	0x40021000

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <NMI_Handler+0x4>

080028da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler+0x4>

080028e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <SysTick_Handler+0x44>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <SysTick_Handler+0x18>
	  Timer1--;
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <SysTick_Handler+0x44>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <SysTick_Handler+0x44>)
 8002916:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <SysTick_Handler+0x48>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <SysTick_Handler+0x2c>
	  Timer2--;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <SysTick_Handler+0x48>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <SysTick_Handler+0x48>)
 800292a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f000 f89e 	bl	8002a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002930:	f008 f8f0 	bl	800ab14 <xTaskGetSchedulerState>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <SysTick_Handler+0x3e>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800293a:	f008 fccd 	bl	800b2d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200000f8 	.word	0x200000f8
 8002948:	200000fa 	.word	0x200000fa

0800294c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002974:	f7ff ffea 	bl	800294c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <LoopForever+0x6>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <LoopForever+0xe>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	; (80029bc <LoopForever+0x16>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299e:	f008 ff79 	bl	800b894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029a2:	f7ff fbe9 	bl	8002178 <main>

080029a6 <LoopForever>:

LoopForever:
    b LoopForever
 80029a6:	e7fe      	b.n	80029a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80029b4:	0800ce68 	.word	0x0800ce68
  ldr r2, =_sbss
 80029b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80029bc:	2000f2bc 	.word	0x2000f2bc

080029c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC1_IRQHandler>

080029c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 f943 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d2:	200f      	movs	r0, #15
 80029d4:	f000 f80e 	bl	80029f4 <HAL_InitTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	71fb      	strb	r3, [r7, #7]
 80029e2:	e001      	b.n	80029e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029e4:	f7ff fe50 	bl	8002688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029e8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_InitTick+0x6c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_InitTick+0x70>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_InitTick+0x6c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f941 	bl	8002ca6 <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d809      	bhi.n	8002a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	f000 f919 	bl	8002c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_InitTick+0x74>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e007      	b.n	8002a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e004      	b.n	8002a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e001      	b.n	8002a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000004 	.word	0x20000004
 8002a68:	20000008 	.word	0x20000008

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	20000548 	.word	0x20000548

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000548 	.word	0x20000548

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_Delay+0x44>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff47 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff5c 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffb0 	bl	8002c14 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	e148      	b.n	8002f62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 813a 	beq.w	8002f5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d005      	beq.n	8002d00 <HAL_GPIO_Init+0x40>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d130      	bne.n	8002d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d36:	2201      	movs	r2, #1
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0201 	and.w	r2, r3, #1
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d017      	beq.n	8002d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d123      	bne.n	8002df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	6939      	ldr	r1, [r7, #16]
 8002dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0203 	and.w	r2, r3, #3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8094 	beq.w	8002f5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e34:	4b52      	ldr	r3, [pc, #328]	; (8002f80 <HAL_GPIO_Init+0x2c0>)
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <HAL_GPIO_Init+0x2c0>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e40:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_GPIO_Init+0x2c0>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x2c4>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	3302      	adds	r3, #2
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e76:	d00d      	beq.n	8002e94 <HAL_GPIO_Init+0x1d4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <HAL_GPIO_Init+0x2c8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <HAL_GPIO_Init+0x1d0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_GPIO_Init+0x2cc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_GPIO_Init+0x1cc>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_Init+0x1d6>
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_Init+0x1d6>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_Init+0x1d6>
 8002e94:	2300      	movs	r3, #0
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea6:	4937      	ldr	r1, [pc, #220]	; (8002f84 <HAL_GPIO_Init+0x2c4>)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f02:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f aeaf 	bne.w	8002cd0 <HAL_GPIO_Init+0x10>
  }
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010000 	.word	0x40010000
 8002f88:	48000400 	.word	0x48000400
 8002f8c:	48000800 	.word	0x48000800
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43d9      	mvns	r1, r3
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e08d      	b.n	8003126 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fb5a 	bl	80026d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e006      	b.n	8003080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800307e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d108      	bne.n	800309a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	e007      	b.n	80030aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69d9      	ldr	r1, [r3, #28]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	460b      	mov	r3, r1
 8003144:	813b      	strh	r3, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	f040 80f9 	bne.w	800334a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_I2C_Mem_Write+0x34>
 800315e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0ed      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_I2C_Mem_Write+0x4e>
 800317a:	2302      	movs	r3, #2
 800317c:	e0e6      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003186:	f7ff fc85 	bl	8002a94 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2319      	movs	r3, #25
 8003192:	2201      	movs	r2, #1
 8003194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fac3 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0d1      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2221      	movs	r2, #33	; 0x21
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2240      	movs	r2, #64	; 0x40
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d0:	88f8      	ldrh	r0, [r7, #6]
 80031d2:	893a      	ldrh	r2, [r7, #8]
 80031d4:	8979      	ldrh	r1, [r7, #10]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4603      	mov	r3, r0
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f9d3 	bl	800358c <I2C_RequestMemoryWrite>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0a9      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2bff      	cmp	r3, #255	; 0xff
 8003200:	d90e      	bls.n	8003220 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	22ff      	movs	r2, #255	; 0xff
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fc3d 	bl	8003a98 <I2C_TransferConfig>
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fc2c 	bl	8003a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fabc 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e07b      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d034      	beq.n	80032f8 <HAL_I2C_Mem_Write+0x1c8>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d130      	bne.n	80032f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fa3f 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04d      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2bff      	cmp	r3, #255	; 0xff
 80032b8:	d90e      	bls.n	80032d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fbe1 	bl	8003a98 <I2C_TransferConfig>
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbd0 	bl	8003a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d19e      	bne.n	8003240 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 faa2 	bl	8003850 <I2C_WaitOnSTOPFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e01a      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2220      	movs	r2, #32
 800331c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_I2C_Mem_Write+0x224>)
 800332a:	400b      	ands	r3, r1
 800332c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 80fd 	bne.w	800357a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_I2C_Mem_Read+0x34>
 8003386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0f1      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Mem_Read+0x4e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0ea      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ae:	f7ff fb71 	bl	8002a94 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2201      	movs	r2, #1
 80033bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f9af 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d5      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2222      	movs	r2, #34	; 0x22
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f8:	88f8      	ldrh	r0, [r7, #6]
 80033fa:	893a      	ldrh	r2, [r7, #8]
 80033fc:	8979      	ldrh	r1, [r7, #10]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	4603      	mov	r3, r0
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f913 	bl	8003634 <I2C_RequestMemoryRead>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0ad      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2bff      	cmp	r3, #255	; 0xff
 8003428:	d90e      	bls.n	8003448 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	22ff      	movs	r2, #255	; 0xff
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	b2da      	uxtb	r2, r3
 8003436:	8979      	ldrh	r1, [r7, #10]
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <HAL_I2C_Mem_Read+0x22c>)
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fb29 	bl	8003a98 <I2C_TransferConfig>
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	b2da      	uxtb	r2, r3
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_I2C_Mem_Read+0x22c>)
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb18 	bl	8003a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	2104      	movs	r1, #4
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f956 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07c      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d034      	beq.n	8003528 <HAL_I2C_Mem_Read+0x1d0>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d130      	bne.n	8003528 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f927 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e04d      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2bff      	cmp	r3, #255	; 0xff
 80034e8:	d90e      	bls.n	8003508 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fac9 	bl	8003a98 <I2C_TransferConfig>
 8003506:	e00f      	b.n	8003528 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	b2da      	uxtb	r2, r3
 8003518:	8979      	ldrh	r1, [r7, #10]
 800351a:	2300      	movs	r3, #0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fab8 	bl	8003a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d19a      	bne.n	8003468 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f98a 	bl	8003850 <I2C_WaitOnSTOPFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e01a      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_I2C_Mem_Read+0x230>)
 800355a:	400b      	ands	r3, r1
 800355c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	80002400 	.word	0x80002400
 8003588:	fe00e800 	.word	0xfe00e800

0800358c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	8979      	ldrh	r1, [r7, #10]
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <I2C_RequestMemoryWrite+0xa4>)
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fa6f 	bl	8003a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f8ff 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e02c      	b.n	8003628 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035d4:	893b      	ldrh	r3, [r7, #8]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
 80035de:	e015      	b.n	800360c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f8e5 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e012      	b.n	8003628 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003602:	893b      	ldrh	r3, [r7, #8]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2200      	movs	r2, #0
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f884 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	80002000 	.word	0x80002000

08003634 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	460b      	mov	r3, r1
 8003648:	813b      	strh	r3, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <I2C_RequestMemoryRead+0xa4>)
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa1c 	bl	8003a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	69b9      	ldr	r1, [r7, #24]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f8ac 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e02c      	b.n	80036ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800367a:	893b      	ldrh	r3, [r7, #8]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
 8003684:	e015      	b.n	80036b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b29b      	uxth	r3, r3
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f892 	bl	80037c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e012      	b.n	80036ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a8:	893b      	ldrh	r3, [r7, #8]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2140      	movs	r1, #64	; 0x40
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f831 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	80002000 	.word	0x80002000

080036dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d103      	bne.n	80036fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d007      	beq.n	8003718 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	619a      	str	r2, [r3, #24]
  }
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003734:	e031      	b.n	800379a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d02d      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7ff f9a9 	bl	8002a94 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d122      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	429a      	cmp	r2, r3
 8003770:	d113      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d0be      	beq.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ce:	e033      	b.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f87f 	bl	80038d8 <I2C_IsErrorOccurred>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e031      	b.n	8003848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ea:	d025      	beq.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7ff f952 	bl	8002a94 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11a      	bne.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d013      	beq.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d1c4      	bne.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	e02f      	b.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f838 	bl	80038d8 <I2C_IsErrorOccurred>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7ff f90f 	bl	8002a94 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11a      	bne.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d013      	beq.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d1c8      	bne.n	800385e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d068      	beq.n	80039d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2210      	movs	r2, #16
 800390a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800390c:	e049      	b.n	80039a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003914:	d045      	beq.n	80039a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7ff f8bd 	bl	8002a94 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_IsErrorOccurred+0x54>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d13a      	bne.n	80039a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800393e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	d121      	bne.n	8003994 <I2C_IsErrorOccurred+0xbc>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003956:	d01d      	beq.n	8003994 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b20      	cmp	r3, #32
 800395c:	d01a      	beq.n	8003994 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800396e:	f7ff f891 	bl	8002a94 <HAL_GetTick>
 8003972:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	e00e      	b.n	8003994 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003976:	f7ff f88d 	bl	8002a94 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b19      	cmp	r3, #25
 8003982:	d907      	bls.n	8003994 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f043 0320 	orr.w	r3, r3, #32
 800398a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003992:	e006      	b.n	80039a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d1e9      	bne.n	8003976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d003      	beq.n	80039b8 <I2C_IsErrorOccurred+0xe0>
 80039b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0aa      	beq.n	800390e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2220      	movs	r2, #32
 80039c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff fe45 	bl	80036dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <I2C_IsErrorOccurred+0x1bc>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	817b      	strh	r3, [r7, #10]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab0:	7a7b      	ldrb	r3, [r7, #9]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ac6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	0d5b      	lsrs	r3, r3, #21
 8003ad2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <I2C_TransferConfig+0x60>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	43db      	mvns	r3, r3
 8003adc:	ea02 0103 	and.w	r1, r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	03ff63ff 	.word	0x03ff63ff

08003afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d138      	bne.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e032      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d139      	bne.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e033      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2224      	movs	r2, #36	; 0x24
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40007000 	.word	0x40007000

08003c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d130      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d038      	beq.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2232      	movs	r2, #50	; 0x32
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8c:	e002      	b.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca0:	d102      	bne.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f2      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb4:	d110      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d007      	beq.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd0:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	20000004 	.word	0x20000004
 8003cf0:	431bde83 	.word	0x431bde83

08003cf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f000 bc02 	b.w	800450c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d08:	4b96      	ldr	r3, [pc, #600]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d12:	4b94      	ldr	r3, [pc, #592]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80e4 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_RCC_OscConfig+0x4c>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	f040 808b 	bne.w	8003e4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f040 8087 	bne.w	8003e4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x64>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e3d9      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_RCC_OscConfig+0x7e>
 8003d68:	4b7e      	ldr	r3, [pc, #504]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d70:	e005      	b.n	8003d7e <HAL_RCC_OscConfig+0x8a>
 8003d72:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d223      	bcs.n	8003dca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd54 	bl	8004834 <RCC_SetFlashLatencyFromMSIRange>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e3ba      	b.n	800450c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d96:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a72      	ldr	r2, [pc, #456]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b70      	ldr	r3, [pc, #448]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	496d      	ldr	r1, [pc, #436]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db4:	4b6b      	ldr	r3, [pc, #428]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4968      	ldr	r1, [pc, #416]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e025      	b.n	8003e16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a65      	ldr	r2, [pc, #404]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4960      	ldr	r1, [pc, #384]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	495b      	ldr	r1, [pc, #364]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd14 	bl	8004834 <RCC_SetFlashLatencyFromMSIRange>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e37a      	b.n	800450c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e16:	f000 fc81 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b51      	ldr	r3, [pc, #324]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	4950      	ldr	r1, [pc, #320]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e32:	4a4e      	ldr	r2, [pc, #312]	; (8003f6c <HAL_RCC_OscConfig+0x278>)
 8003e34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <HAL_RCC_OscConfig+0x27c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fdda 	bl	80029f4 <HAL_InitTick>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d052      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	e35e      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d032      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e56:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a42      	ldr	r2, [pc, #264]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e62:	f7fe fe17 	bl	8002a94 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6a:	f7fe fe13 	bl	8002a94 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e347      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7c:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a35      	ldr	r2, [pc, #212]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	f043 0308 	orr.w	r3, r3, #8
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4930      	ldr	r1, [pc, #192]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	492b      	ldr	r1, [pc, #172]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fde4 	bl	8002a94 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed0:	f7fe fde0 	bl	8002a94 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e314      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1dc>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d073      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x21c>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d10e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d063      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d15f      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e2f1      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d106      	bne.n	8003f40 <HAL_RCC_OscConfig+0x24c>
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e025      	b.n	8003f8c <HAL_RCC_OscConfig+0x298>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f48:	d114      	bne.n	8003f74 <HAL_RCC_OscConfig+0x280>
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a02      	ldr	r2, [pc, #8]	; (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e013      	b.n	8003f8c <HAL_RCC_OscConfig+0x298>
 8003f64:	40021000 	.word	0x40021000
 8003f68:	0800c9ac 	.word	0x0800c9ac
 8003f6c:	20000004 	.word	0x20000004
 8003f70:	20000008 	.word	0x20000008
 8003f74:	4ba0      	ldr	r3, [pc, #640]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a9f      	ldr	r2, [pc, #636]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b9d      	ldr	r3, [pc, #628]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a9c      	ldr	r2, [pc, #624]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fd7e 	bl	8002a94 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe fd7a 	bl	8002a94 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2ae      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fae:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x2a8>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fd6a 	bl	8002a94 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fd66 	bl	8002a94 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e29a      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2d0>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d060      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_OscConfig+0x310>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d116      	bne.n	8004032 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004004:	4b7c      	ldr	r3, [pc, #496]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x328>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e277      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	4973      	ldr	r1, [pc, #460]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	e040      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d023      	beq.n	8004082 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403a:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fe fd25 	bl	8002a94 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fe fd21 	bl	8002a94 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e255      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004060:	4b65      	ldr	r3, [pc, #404]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	495f      	ldr	r1, [pc, #380]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
 8004080:	e018      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a5c      	ldr	r2, [pc, #368]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe fd01 	bl	8002a94 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004096:	f7fe fcfd 	bl	8002a94 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e231      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03c      	beq.n	800413a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fe fcdc 	bl	8002a94 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fe fcd8 	bl	8002a94 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e20c      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80040f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3ec>
 8004100:	e01b      	b.n	800413a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004108:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fe fcbf 	bl	8002a94 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411a:	f7fe fcbb 	bl	8002a94 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1ef      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800412c:	4b32      	ldr	r3, [pc, #200]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ef      	bne.n	800411a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a6 	beq.w	8004294 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	; 0x58
 8004164:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCC_OscConfig+0x508>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d118      	bne.n	80041b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCC_OscConfig+0x508>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_RCC_OscConfig+0x508>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418c:	f7fe fc82 	bl	8002a94 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004194:	f7fe fc7e 	bl	8002a94 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1b2      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_RCC_OscConfig+0x508>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0x4d8>
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ca:	e029      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d115      	bne.n	8004200 <HAL_RCC_OscConfig+0x50c>
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <HAL_RCC_OscConfig+0x504>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f4:	e014      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40007000 	.word	0x40007000
 8004200:	4b9a      	ldr	r3, [pc, #616]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a99      	ldr	r2, [pc, #612]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004210:	4b96      	ldr	r3, [pc, #600]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4a95      	ldr	r2, [pc, #596]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d016      	beq.n	8004256 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe fc34 	bl	8002a94 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe fc30 	bl	8002a94 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e162      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	4b89      	ldr	r3, [pc, #548]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ed      	beq.n	8004230 <HAL_RCC_OscConfig+0x53c>
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fe fc1d 	bl	8002a94 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fe fc19 	bl	8002a94 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e14b      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004274:	4b7d      	ldr	r3, [pc, #500]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ed      	bne.n	800425e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004282:	7ffb      	ldrb	r3, [r7, #31]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004288:	4b78      	ldr	r3, [pc, #480]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4a77      	ldr	r2, [pc, #476]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800428e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d03c      	beq.n	800431a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042a8:	4b70      	ldr	r3, [pc, #448]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80042aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ae:	4a6f      	ldr	r2, [pc, #444]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fe fbec 	bl	8002a94 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c0:	f7fe fbe8 	bl	8002a94 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e11c      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042d2:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ef      	beq.n	80042c0 <HAL_RCC_OscConfig+0x5cc>
 80042e0:	e01b      	b.n	800431a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e2:	4b62      	ldr	r3, [pc, #392]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80042e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e8:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fe fbcf 	bl	8002a94 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fa:	f7fe fbcb 	bl	8002a94 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0ff      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ef      	bne.n	80042fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80f3 	beq.w	800450a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	2b02      	cmp	r3, #2
 800432a:	f040 80c9 	bne.w	80044c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800432e:	4b4f      	ldr	r3, [pc, #316]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0203 	and.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d12c      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	3b01      	subs	r3, #1
 800434e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d123      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d11b      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d113      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d109      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d06b      	beq.n	8004474 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d062      	beq.n	8004468 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043a2:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0ac      	b.n	800450c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80043b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043be:	f7fe fb69 	bl	8002a94 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe fb65 	bl	8002a94 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e099      	b.n	800450c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <HAL_RCC_OscConfig+0x778>)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_RCC_OscConfig+0x77c>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043f4:	3a01      	subs	r2, #1
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043fe:	0212      	lsls	r2, r2, #8
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004406:	0852      	lsrs	r2, r2, #1
 8004408:	3a01      	subs	r2, #1
 800440a:	0552      	lsls	r2, r2, #21
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004412:	0852      	lsrs	r2, r2, #1
 8004414:	3a01      	subs	r2, #1
 8004416:	0652      	lsls	r2, r2, #25
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800441e:	06d2      	lsls	r2, r2, #27
 8004420:	430a      	orrs	r2, r1
 8004422:	4912      	ldr	r1, [pc, #72]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004424:	4313      	orrs	r3, r2
 8004426:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0f      	ldr	r2, [pc, #60]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCC_OscConfig+0x778>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a0c      	ldr	r2, [pc, #48]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004440:	f7fe fb28 	bl	8002a94 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe fb24 	bl	8002a94 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e058      	b.n	800450c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_RCC_OscConfig+0x778>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004466:	e050      	b.n	800450a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04f      	b.n	800450c <HAL_RCC_OscConfig+0x818>
 800446c:	40021000 	.word	0x40021000
 8004470:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d144      	bne.n	800450a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a23      	ldr	r2, [pc, #140]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a20      	ldr	r2, [pc, #128]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004498:	f7fe fafc 	bl	8002a94 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fe faf8 	bl	8002a94 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e02c      	b.n	800450c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x7ac>
 80044be:	e024      	b.n	800450a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d01f      	beq.n	8004506 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fe fadf 	bl	8002a94 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fe fadb 	bl	8002a94 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e00f      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	4905      	ldr	r1, [pc, #20]	; (8004514 <HAL_RCC_OscConfig+0x820>)
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_OscConfig+0x824>)
 8004500:	4013      	ands	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
 8004504:	e001      	b.n	800450a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	feeefffc 	.word	0xfeeefffc

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0e7      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b75      	ldr	r3, [pc, #468]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b72      	ldr	r3, [pc, #456]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	4970      	ldr	r1, [pc, #448]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b6e      	ldr	r3, [pc, #440]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0cf      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d010      	beq.n	800458e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	4b66      	ldr	r3, [pc, #408]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004578:	429a      	cmp	r2, r3
 800457a:	d908      	bls.n	800458e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b63      	ldr	r3, [pc, #396]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4960      	ldr	r1, [pc, #384]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04c      	beq.n	8004634 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b5a      	ldr	r3, [pc, #360]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d121      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0a6      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ba:	4b54      	ldr	r3, [pc, #336]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d115      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e09a      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d2:	4b4e      	ldr	r3, [pc, #312]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e08e      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e2:	4b4a      	ldr	r3, [pc, #296]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e086      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f023 0203 	bic.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4943      	ldr	r1, [pc, #268]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fe fa46 	bl	8002a94 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	e00a      	b.n	8004622 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460c:	f7fe fa42 	bl	8002a94 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e06e      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	4b3a      	ldr	r3, [pc, #232]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 020c 	and.w	r2, r3, #12
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	429a      	cmp	r2, r3
 8004632:	d1eb      	bne.n	800460c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464c:	429a      	cmp	r2, r3
 800464e:	d208      	bcs.n	8004662 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	492b      	ldr	r1, [pc, #172]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d210      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 0207 	bic.w	r2, r3, #7
 8004678:	4923      	ldr	r1, [pc, #140]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCC_ClockConfig+0x1ec>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e036      	b.n	8004700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4918      	ldr	r1, [pc, #96]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046bc:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4910      	ldr	r1, [pc, #64]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046d0:	f000 f824 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	490b      	ldr	r1, [pc, #44]	; (8004710 <HAL_RCC_ClockConfig+0x1f4>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80046ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x1fc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f97d 	bl	80029f4 <HAL_InitTick>
 80046fa:	4603      	mov	r3, r0
 80046fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80046fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
 8004710:	0800c9ac 	.word	0x0800c9ac
 8004714:	20000004 	.word	0x20000004
 8004718:	20000008 	.word	0x20000008

0800471c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472a:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x34>
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d121      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d11e      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004750:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e005      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800476c:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004778:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10d      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d102      	bne.n	800479a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_GetSysClockFreq+0x110>)
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e004      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_RCC_GetSysClockFreq+0x114>)
 80047a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d134      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d003      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0xac>
 80047c0:	e005      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_RCC_GetSysClockFreq+0x110>)
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	e005      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ca:	617b      	str	r3, [r7, #20]
      break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	617b      	str	r3, [r7, #20]
      break;
 80047d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	3301      	adds	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	fb03 f202 	mul.w	r2, r3, r2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	0e5b      	lsrs	r3, r3, #25
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	3301      	adds	r3, #1
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004814:	69bb      	ldr	r3, [r7, #24]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	0800c9bc 	.word	0x0800c9bc
 800482c:	00f42400 	.word	0x00f42400
 8004830:	007a1200 	.word	0x007a1200

08004834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004840:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800484c:	f7ff f9ee 	bl	8003c2c <HAL_PWREx_GetVoltageRange>
 8004850:	6178      	str	r0, [r7, #20]
 8004852:	e014      	b.n	800487e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	4a24      	ldr	r2, [pc, #144]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485e:	6593      	str	r3, [r2, #88]	; 0x58
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800486c:	f7ff f9de 	bl	8003c2c <HAL_PWREx_GetVoltageRange>
 8004870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	4a1d      	ldr	r2, [pc, #116]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d10b      	bne.n	800489e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d919      	bls.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2ba0      	cmp	r3, #160	; 0xa0
 8004890:	d902      	bls.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004892:	2302      	movs	r3, #2
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e013      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004898:	2301      	movs	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e010      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d902      	bls.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a4:	2303      	movs	r3, #3
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e00a      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d102      	bne.n	80048b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048b0:	2302      	movs	r3, #2
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	e004      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d101      	bne.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048bc:	2301      	movs	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 0207 	bic.w	r2, r3, #7
 80048c8:	4909      	ldr	r1, [pc, #36]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d001      	beq.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40022000 	.word	0x40022000

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048fc:	2300      	movs	r3, #0
 80048fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004900:	2300      	movs	r3, #0
 8004902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490c:	2b00      	cmp	r3, #0
 800490e:	d031      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004918:	d01a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800491a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800491e:	d814      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004928:	d10f      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800492a:	4b5d      	ldr	r3, [pc, #372]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a5c      	ldr	r2, [pc, #368]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004936:	e00c      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f9ce 	bl	8004ce0 <RCCEx_PLLSAI1_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	74fb      	strb	r3, [r7, #19]
      break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004958:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	494e      	ldr	r1, [pc, #312]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 809e 	beq.w	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004986:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00d      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b40      	ldr	r3, [pc, #256]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4a3f      	ldr	r2, [pc, #252]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	4b3d      	ldr	r3, [pc, #244]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b4:	2301      	movs	r3, #1
 80049b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b8:	4b3a      	ldr	r3, [pc, #232]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a39      	ldr	r2, [pc, #228]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c4:	f7fe f866 	bl	8002a94 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ca:	e009      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049cc:	f7fe f862 	bl	8002a94 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d902      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	74fb      	strb	r3, [r7, #19]
        break;
 80049de:	e005      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ef      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d15a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d019      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a3a:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fe f822 	bl	8002a94 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	e00b      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fe f81e 	bl	8002a94 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d902      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	74fb      	strb	r3, [r7, #19]
            break;
 8004a6a:	e006      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0ec      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	4904      	ldr	r1, [pc, #16]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a96:	e009      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	74bb      	strb	r3, [r7, #18]
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aac:	7c7b      	ldrb	r3, [r7, #17]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab2:	4b8a      	ldr	r3, [pc, #552]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	4a89      	ldr	r2, [pc, #548]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aca:	4b84      	ldr	r3, [pc, #528]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f023 0203 	bic.w	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4980      	ldr	r1, [pc, #512]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aec:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 020c 	bic.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	4978      	ldr	r1, [pc, #480]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0e:	4b73      	ldr	r3, [pc, #460]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	496f      	ldr	r1, [pc, #444]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	4967      	ldr	r1, [pc, #412]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b52:	4b62      	ldr	r3, [pc, #392]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	495e      	ldr	r1, [pc, #376]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b74:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	4956      	ldr	r1, [pc, #344]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b96:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	494d      	ldr	r1, [pc, #308]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d028      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb8:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4945      	ldr	r1, [pc, #276]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
 8004be4:	e011      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bee:	d10c      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f872 	bl	8004ce0 <RCCEx_PLLSAI1_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d028      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	492d      	ldr	r1, [pc, #180]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c34:	d106      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c40:	60d3      	str	r3, [r2, #12]
 8004c42:	e011      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2101      	movs	r1, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f843 	bl	8004ce0 <RCCEx_PLLSAI1_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01c      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	4916      	ldr	r1, [pc, #88]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c92:	d10c      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	2102      	movs	r1, #2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f820 	bl	8004ce0 <RCCEx_PLLSAI1_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004caa:	7cfb      	ldrb	r3, [r7, #19]
 8004cac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	4904      	ldr	r1, [pc, #16]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cee:	4b74      	ldr	r3, [pc, #464]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cfa:	4b71      	ldr	r3, [pc, #452]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0203 	and.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10d      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d12:	4b6b      	ldr	r3, [pc, #428]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
       ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d047      	beq.n	8004db6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	e044      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d018      	beq.n	8004d66 <RCCEx_PLLSAI1_Config+0x86>
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d825      	bhi.n	8004d84 <RCCEx_PLLSAI1_Config+0xa4>
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d002      	beq.n	8004d42 <RCCEx_PLLSAI1_Config+0x62>
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d009      	beq.n	8004d54 <RCCEx_PLLSAI1_Config+0x74>
 8004d40:	e020      	b.n	8004d84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11d      	bne.n	8004d8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d52:	e01a      	b.n	8004d8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d54:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d64:	e013      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d66:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d82:	e006      	b.n	8004d92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e004      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e002      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10d      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	430b      	orrs	r3, r1
 8004db0:	4943      	ldr	r1, [pc, #268]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d17c      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dbc:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd fe64 	bl	8002a94 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dce:	e009      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd0:	f7fd fe60 	bl	8002a94 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	73fb      	strb	r3, [r7, #15]
        break;
 8004de2:	e005      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ef      	bne.n	8004dd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d15f      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d110      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6892      	ldr	r2, [r2, #8]
 8004e0c:	0211      	lsls	r1, r2, #8
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68d2      	ldr	r2, [r2, #12]
 8004e12:	06d2      	lsls	r2, r2, #27
 8004e14:	430a      	orrs	r2, r1
 8004e16:	492a      	ldr	r1, [pc, #168]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
 8004e1c:	e027      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d112      	bne.n	8004e4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	0211      	lsls	r1, r2, #8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6912      	ldr	r2, [r2, #16]
 8004e3a:	0852      	lsrs	r2, r2, #1
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0552      	lsls	r2, r2, #21
 8004e40:	430a      	orrs	r2, r1
 8004e42:	491f      	ldr	r1, [pc, #124]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]
 8004e48:	e011      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	0211      	lsls	r1, r2, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6952      	ldr	r2, [r2, #20]
 8004e60:	0852      	lsrs	r2, r2, #1
 8004e62:	3a01      	subs	r2, #1
 8004e64:	0652      	lsls	r2, r2, #25
 8004e66:	430a      	orrs	r2, r1
 8004e68:	4915      	ldr	r1, [pc, #84]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fd fe0b 	bl	8002a94 <HAL_GetTick>
 8004e7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e80:	e009      	b.n	8004e96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e82:	f7fd fe07 	bl	8002a94 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d902      	bls.n	8004e96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	73fb      	strb	r3, [r7, #15]
          break;
 8004e94:	e005      	b.n	8004ea2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ef      	beq.n	8004e82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	4903      	ldr	r1, [pc, #12]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e095      	b.n	8005002 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e005      	b.n	8004efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd fc98 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f3c:	d902      	bls.n	8004f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e002      	b.n	8004f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f52:	d007      	beq.n	8004f64 <HAL_SPI_Init+0xa0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	ea42 0103 	orr.w	r1, r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	f003 0204 	and.w	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_SPI_Transmit+0x22>
 8005028:	2302      	movs	r3, #2
 800502a:	e15f      	b.n	80052ec <HAL_SPI_Transmit+0x2e2>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005034:	f7fd fd2e 	bl	8002a94 <HAL_GetTick>
 8005038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d002      	beq.n	8005050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800504e:	e148      	b.n	80052e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_SPI_Transmit+0x52>
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005060:	e13f      	b.n	80052e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2203      	movs	r2, #3
 8005066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	d10f      	bne.n	80050ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d007      	beq.n	80050ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f4:	d94f      	bls.n	8005196 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Transmit+0xfa>
 80050fe:	8afb      	ldrh	r3, [r7, #22]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d142      	bne.n	800518a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005128:	e02f      	b.n	800518a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d112      	bne.n	800515e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1c9a      	adds	r2, r3, #2
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515c:	e015      	b.n	800518a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800515e:	f7fd fc99 	bl	8002a94 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d803      	bhi.n	8005176 <HAL_SPI_Transmit+0x16c>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005174:	d102      	bne.n	800517c <HAL_SPI_Transmit+0x172>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005188:	e0ab      	b.n	80052e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ca      	bne.n	800512a <HAL_SPI_Transmit+0x120>
 8005194:	e080      	b.n	8005298 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_SPI_Transmit+0x19a>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d174      	bne.n	800528e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d912      	bls.n	80051d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b02      	subs	r3, #2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d2:	e05c      	b.n	800528e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051fa:	e048      	b.n	800528e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d12b      	bne.n	8005262 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d912      	bls.n	800523a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b02      	subs	r3, #2
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005238:	e029      	b.n	800528e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005260:	e015      	b.n	800528e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005262:	f7fd fc17 	bl	8002a94 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d803      	bhi.n	800527a <HAL_SPI_Transmit+0x270>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005278:	d102      	bne.n	8005280 <HAL_SPI_Transmit+0x276>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800528c:	e029      	b.n	80052e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1b1      	bne.n	80051fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fb69 	bl	8005974 <SPI_EndRxTxTransaction>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e003      	b.n	80052e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_SPI_TransmitReceive+0x26>
 8005316:	2302      	movs	r3, #2
 8005318:	e20a      	b.n	8005730 <HAL_SPI_TransmitReceive+0x43c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005322:	f7fd fbb7 	bl	8002a94 <HAL_GetTick>
 8005326:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800532e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800533e:	7efb      	ldrb	r3, [r7, #27]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00e      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x6e>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534a:	d106      	bne.n	800535a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <HAL_SPI_TransmitReceive+0x66>
 8005354:	7efb      	ldrb	r3, [r7, #27]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d003      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005360:	e1e0      	b.n	8005724 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x80>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x80>
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800537a:	e1d3      	b.n	8005724 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b04      	cmp	r3, #4
 8005386:	d003      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2205      	movs	r2, #5
 800538c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	887a      	ldrh	r2, [r7, #2]
 80053b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d2:	d802      	bhi.n	80053da <HAL_SPI_TransmitReceive+0xe6>
 80053d4:	8a3b      	ldrh	r3, [r7, #16]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d908      	bls.n	80053ec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e007      	b.n	80053fc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d007      	beq.n	800541a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005422:	f240 8081 	bls.w	8005528 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x140>
 800542e:	8a7b      	ldrh	r3, [r7, #18]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d16d      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005458:	e05a      	b.n	8005510 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d11b      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1ac>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1ac>
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d113      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11c      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x1f4>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	b292      	uxth	r2, r2
 80054c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	1c9a      	adds	r2, r3, #2
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054e8:	f7fd fad4 	bl	8002a94 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d80b      	bhi.n	8005510 <HAL_SPI_TransmitReceive+0x21c>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fe:	d007      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800550e:	e109      	b.n	8005724 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d19f      	bne.n	800545a <HAL_SPI_TransmitReceive+0x166>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d199      	bne.n	800545a <HAL_SPI_TransmitReceive+0x166>
 8005526:	e0e3      	b.n	80056f0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_SPI_TransmitReceive+0x244>
 8005530:	8a7b      	ldrh	r3, [r7, #18]
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 80cf 	bne.w	80056d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	d912      	bls.n	8005568 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	881a      	ldrh	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	1c9a      	adds	r2, r3, #2
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b02      	subs	r3, #2
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005566:	e0b6      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	7812      	ldrb	r2, [r2, #0]
 8005574:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800558e:	e0a2      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d134      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x314>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02f      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x314>
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d12c      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d912      	bls.n	80055de <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b02      	subs	r3, #2
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055dc:	e012      	b.n	8005604 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d148      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x3b4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d042      	beq.n	80056a8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d923      	bls.n	8005676 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	b292      	uxth	r2, r2
 800563a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	1c9a      	adds	r2, r3, #2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b02      	subs	r3, #2
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d81f      	bhi.n	80056a4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	e016      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f103 020c 	add.w	r2, r3, #12
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056a4:	2301      	movs	r3, #1
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056a8:	f7fd f9f4 	bl	8002a94 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d803      	bhi.n	80056c0 <HAL_SPI_TransmitReceive+0x3cc>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x3d2>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80056d4:	e026      	b.n	8005724 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f47f af57 	bne.w	8005590 <HAL_SPI_TransmitReceive+0x29c>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f47f af50 	bne.w	8005590 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f93d 	bl	8005974 <SPI_EndRxTxTransaction>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e003      	b.n	8005724 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800572c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005748:	f7fd f9a4 	bl	8002a94 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	4413      	add	r3, r2
 8005756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005758:	f7fd f99c 	bl	8002a94 <HAL_GetTick>
 800575c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800575e:	4b39      	ldr	r3, [pc, #228]	; (8005844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	015b      	lsls	r3, r3, #5
 8005764:	0d1b      	lsrs	r3, r3, #20
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800576e:	e054      	b.n	800581a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d050      	beq.n	800581a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005778:	f7fd f98c 	bl	8002a94 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	429a      	cmp	r2, r3
 8005786:	d902      	bls.n	800578e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d13d      	bne.n	800580a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800579c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a6:	d111      	bne.n	80057cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	d004      	beq.n	80057bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ba:	d107      	bne.n	80057cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d4:	d10f      	bne.n	80057f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e017      	b.n	800583a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3b01      	subs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d19b      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000004 	.word	0x20000004

08005848 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800585a:	f7fd f91b 	bl	8002a94 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	4413      	add	r3, r2
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800586a:	f7fd f913 	bl	8002a94 <HAL_GetTick>
 800586e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005878:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	00da      	lsls	r2, r3, #3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	0d1b      	lsrs	r3, r3, #20
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005890:	e060      	b.n	8005954 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005898:	d107      	bne.n	80058aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b0:	d050      	beq.n	8005954 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058b2:	f7fd f8ef 	bl	8002a94 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	429a      	cmp	r2, r3
 80058c0:	d902      	bls.n	80058c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d13d      	bne.n	8005944 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e0:	d111      	bne.n	8005906 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ea:	d004      	beq.n	80058f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f4:	d107      	bne.n	8005906 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d10f      	bne.n	8005930 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800592e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e010      	b.n	8005966 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	3b01      	subs	r3, #1
 8005952:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d196      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3728      	adds	r7, #40	; 0x28
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000004 	.word	0x20000004

08005974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7ff ff5b 	bl	8005848 <SPI_WaitFifoStateUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599c:	f043 0220 	orr.w	r2, r3, #32
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e027      	b.n	80059f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fec0 	bl	8005738 <SPI_WaitFlagStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e014      	b.n	80059f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff ff34 	bl	8005848 <SPI_WaitFifoStateUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e000      	b.n	80059f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a04:	4904      	ldr	r1, [pc, #16]	; (8005a18 <MX_FATFS_Init+0x18>)
 8005a06:	4805      	ldr	r0, [pc, #20]	; (8005a1c <MX_FATFS_Init+0x1c>)
 8005a08:	f003 f8f2 	bl	8008bf0 <FATFS_LinkDriver>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <MX_FATFS_Init+0x20>)
 8005a12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000550 	.word	0x20000550
 8005a1c:	20000010 	.word	0x20000010
 8005a20:	2000054c 	.word	0x2000054c

08005a24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fc f869 	bl	8001b18 <SD_disk_initialize>
 8005a46:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc f941 	bl	8001ce4 <SD_disk_status>
 8005a62:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005a7c:	7bf8      	ldrb	r0, [r7, #15]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	f7fc f944 	bl	8001d10 <SD_disk_read>
 8005a88:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005aa2:	7bf8      	ldrb	r0, [r7, #15]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	f7fc f99b 	bl	8001de4 <SD_disk_write>
 8005aae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	603a      	str	r2, [r7, #0]
 8005ac2:	71fb      	strb	r3, [r7, #7]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005ac8:	79b9      	ldrb	r1, [r7, #6]
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fc fa0c 	bl	8001eec <SD_disk_ioctl>
 8005ad4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <disk_status+0x30>)
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	79fa      	ldrb	r2, [r7, #7]
 8005af8:	4905      	ldr	r1, [pc, #20]	; (8005b10 <disk_status+0x30>)
 8005afa:	440a      	add	r2, r1
 8005afc:	7a12      	ldrb	r2, [r2, #8]
 8005afe:	4610      	mov	r0, r2
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000057c 	.word	0x2000057c

08005b14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <disk_initialize+0x48>)
 8005b26:	5cd3      	ldrb	r3, [r2, r3]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d111      	bne.n	8005b50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <disk_initialize+0x48>)
 8005b30:	2101      	movs	r1, #1
 8005b32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <disk_initialize+0x48>)
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	79fa      	ldrb	r2, [r7, #7]
 8005b42:	4906      	ldr	r1, [pc, #24]	; (8005b5c <disk_initialize+0x48>)
 8005b44:	440a      	add	r2, r1
 8005b46:	7a12      	ldrb	r2, [r2, #8]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000057c 	.word	0x2000057c

08005b60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <disk_read+0x3c>)
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	689c      	ldr	r4, [r3, #8]
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <disk_read+0x3c>)
 8005b80:	4413      	add	r3, r2
 8005b82:	7a18      	ldrb	r0, [r3, #8]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	47a0      	blx	r4
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd90      	pop	{r4, r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2000057c 	.word	0x2000057c

08005ba0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <disk_write+0x3c>)
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	68dc      	ldr	r4, [r3, #12]
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <disk_write+0x3c>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	7a18      	ldrb	r0, [r3, #8]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	47a0      	blx	r4
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	2000057c 	.word	0x2000057c

08005be0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	603a      	str	r2, [r7, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
 8005bec:	460b      	mov	r3, r1
 8005bee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <disk_ioctl+0x38>)
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	4906      	ldr	r1, [pc, #24]	; (8005c18 <disk_ioctl+0x38>)
 8005c00:	440a      	add	r2, r1
 8005c02:	7a10      	ldrb	r0, [r2, #8]
 8005c04:	79b9      	ldrb	r1, [r7, #6]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	4798      	blx	r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	2000057c 	.word	0x2000057c

08005c1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	b21a      	sxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b21b      	sxth	r3, r3
 8005c3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3303      	adds	r3, #3
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	3202      	adds	r2, #2
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	3201      	adds	r2, #1
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	887a      	ldrh	r2, [r7, #2]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	887b      	ldrh	r3, [r7, #2]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	0a1b      	lsrs	r3, r3, #8
 8005d06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00d      	beq.n	8005d56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	1c53      	adds	r3, r2, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	6179      	str	r1, [r7, #20]
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f1      	bne.n	8005d3a <mem_cpy+0x1a>
	}
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	617a      	str	r2, [r7, #20]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f3      	bne.n	8005d72 <mem_set+0x10>
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	61ba      	str	r2, [r7, #24]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	1acb      	subs	r3, r1, r3
 8005dc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <mem_cmp+0x40>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0eb      	beq.n	8005db0 <mem_cmp+0x18>

	return r;
 8005dd8:	697b      	ldr	r3, [r7, #20]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3724      	adds	r7, #36	; 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005df0:	e002      	b.n	8005df8 <chk_chr+0x12>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3301      	adds	r3, #1
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <chk_chr+0x26>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d1f2      	bne.n	8005df2 <chk_chr+0xc>
	return *str;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <lock_fs+0x22>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 ffe0 	bl	8008df4 <ff_req_grant>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <lock_fs+0x22>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <lock_fs+0x24>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <unlock_fs+0x2e>
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d00a      	beq.n	8005e76 <unlock_fs+0x2e>
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b0b      	cmp	r3, #11
 8005e64:	d007      	beq.n	8005e76 <unlock_fs+0x2e>
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	2b0f      	cmp	r3, #15
 8005e6a:	d004      	beq.n	8005e76 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f002 ffd4 	bl	8008e1e <ff_rel_grant>
	}
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e029      	b.n	8005ee8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <chk_lock+0xb4>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	4413      	add	r3, r2
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d01d      	beq.n	8005ede <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ea2:	4a24      	ldr	r2, [pc, #144]	; (8005f34 <chk_lock+0xb4>)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	4413      	add	r3, r2
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d116      	bne.n	8005ee2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <chk_lock+0xb4>)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d10c      	bne.n	8005ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <chk_lock+0xb4>)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	4413      	add	r3, r2
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d102      	bne.n	8005ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005edc:	e007      	b.n	8005eee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d9d2      	bls.n	8005e94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d109      	bne.n	8005f08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <chk_lock+0x80>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d101      	bne.n	8005f04 <chk_lock+0x84>
 8005f00:	2300      	movs	r3, #0
 8005f02:	e010      	b.n	8005f26 <chk_lock+0xa6>
 8005f04:	2312      	movs	r3, #18
 8005f06:	e00e      	b.n	8005f26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <chk_lock+0xa0>
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <chk_lock+0xb4>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4413      	add	r3, r2
 8005f16:	330c      	adds	r3, #12
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1e:	d101      	bne.n	8005f24 <chk_lock+0xa4>
 8005f20:	2310      	movs	r3, #16
 8005f22:	e000      	b.n	8005f26 <chk_lock+0xa6>
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	2000055c 	.word	0x2000055c

08005f38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	e002      	b.n	8005f4a <enq_lock+0x12>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3301      	adds	r3, #1
 8005f48:	607b      	str	r3, [r7, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d806      	bhi.n	8005f5e <enq_lock+0x26>
 8005f50:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <enq_lock+0x40>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	4413      	add	r3, r2
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f2      	bne.n	8005f44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	2000055c 	.word	0x2000055c

08005f7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e01f      	b.n	8005fcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f8c:	4a41      	ldr	r2, [pc, #260]	; (8006094 <inc_lock+0x118>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	4413      	add	r3, r2
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d113      	bne.n	8005fc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f9e:	4a3d      	ldr	r2, [pc, #244]	; (8006094 <inc_lock+0x118>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d109      	bne.n	8005fc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005fb2:	4a38      	ldr	r2, [pc, #224]	; (8006094 <inc_lock+0x118>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	4413      	add	r3, r2
 8005fba:	3308      	adds	r3, #8
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d006      	beq.n	8005fd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d9dc      	bls.n	8005f8c <inc_lock+0x10>
 8005fd2:	e000      	b.n	8005fd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d132      	bne.n	8006042 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e002      	b.n	8005fe8 <inc_lock+0x6c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d806      	bhi.n	8005ffc <inc_lock+0x80>
 8005fee:	4a29      	ldr	r2, [pc, #164]	; (8006094 <inc_lock+0x118>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f2      	bne.n	8005fe2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d101      	bne.n	8006006 <inc_lock+0x8a>
 8006002:	2300      	movs	r3, #0
 8006004:	e040      	b.n	8006088 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4922      	ldr	r1, [pc, #136]	; (8006094 <inc_lock+0x118>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	440b      	add	r3, r1
 8006012:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	491e      	ldr	r1, [pc, #120]	; (8006094 <inc_lock+0x118>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	440b      	add	r3, r1
 8006020:	3304      	adds	r3, #4
 8006022:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	491a      	ldr	r1, [pc, #104]	; (8006094 <inc_lock+0x118>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	440b      	add	r3, r1
 8006030:	3308      	adds	r3, #8
 8006032:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <inc_lock+0x118>)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	4413      	add	r3, r2
 800603c:	330c      	adds	r3, #12
 800603e:	2200      	movs	r2, #0
 8006040:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <inc_lock+0xe0>
 8006048:	4a12      	ldr	r2, [pc, #72]	; (8006094 <inc_lock+0x118>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	4413      	add	r3, r2
 8006050:	330c      	adds	r3, #12
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <inc_lock+0xe0>
 8006058:	2300      	movs	r3, #0
 800605a:	e015      	b.n	8006088 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d108      	bne.n	8006074 <inc_lock+0xf8>
 8006062:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <inc_lock+0x118>)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	4413      	add	r3, r2
 800606a:	330c      	adds	r3, #12
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	e001      	b.n	8006078 <inc_lock+0xfc>
 8006074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006078:	4906      	ldr	r1, [pc, #24]	; (8006094 <inc_lock+0x118>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	440b      	add	r3, r1
 8006080:	330c      	adds	r3, #12
 8006082:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	2000055c 	.word	0x2000055c

08006098 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d825      	bhi.n	80060f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80060ac:	4a17      	ldr	r2, [pc, #92]	; (800610c <dec_lock+0x74>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4413      	add	r3, r2
 80060b4:	330c      	adds	r3, #12
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c0:	d101      	bne.n	80060c6 <dec_lock+0x2e>
 80060c2:	2300      	movs	r3, #0
 80060c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <dec_lock+0x3a>
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80060d2:	4a0e      	ldr	r2, [pc, #56]	; (800610c <dec_lock+0x74>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	330c      	adds	r3, #12
 80060dc:	89fa      	ldrh	r2, [r7, #14]
 80060de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d105      	bne.n	80060f2 <dec_lock+0x5a>
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <dec_lock+0x74>)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	4413      	add	r3, r2
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	737b      	strb	r3, [r7, #13]
 80060f6:	e001      	b.n	80060fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060f8:	2302      	movs	r3, #2
 80060fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	2000055c 	.word	0x2000055c

08006110 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e010      	b.n	8006140 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800611e:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <clear_lock+0x44>)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	4413      	add	r3, r2
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d105      	bne.n	800613a <clear_lock+0x2a>
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <clear_lock+0x44>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	4413      	add	r3, r2
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d9eb      	bls.n	800611e <clear_lock+0xe>
	}
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	2000055c 	.word	0x2000055c

08006158 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	78db      	ldrb	r3, [r3, #3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d034      	beq.n	80061d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7858      	ldrb	r0, [r3, #1]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800617c:	2301      	movs	r3, #1
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	f7ff fd0e 	bl	8005ba0 <disk_write>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <sync_window+0x38>
			res = FR_DISK_ERR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
 800618e:	e022      	b.n	80061d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d217      	bcs.n	80061d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	789b      	ldrb	r3, [r3, #2]
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	e010      	b.n	80061d0 <sync_window+0x78>
					wsect += fs->fsize;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7858      	ldrb	r0, [r3, #1]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80061c2:	2301      	movs	r3, #1
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	f7ff fceb 	bl	8005ba0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d8eb      	bhi.n	80061ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d01b      	beq.n	8006230 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ffad 	bl	8006158 <sync_window>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d113      	bne.n	8006230 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	7858      	ldrb	r0, [r3, #1]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006212:	2301      	movs	r3, #1
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	f7ff fca3 	bl	8005b60 <disk_read>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006224:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ff87 	bl	8006158 <sync_window>
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d159      	bne.n	8006308 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d149      	bne.n	80062f0 <sync_fs+0xb4>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d145      	bne.n	80062f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	899b      	ldrh	r3, [r3, #12]
 800626e:	461a      	mov	r2, r3
 8006270:	2100      	movs	r1, #0
 8006272:	f7ff fd76 	bl	8005d62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	333c      	adds	r3, #60	; 0x3c
 800627a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800627e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fd05 	bl	8005c92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	333c      	adds	r3, #60	; 0x3c
 800628c:	4921      	ldr	r1, [pc, #132]	; (8006314 <sync_fs+0xd8>)
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fd1a 	bl	8005cc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	333c      	adds	r3, #60	; 0x3c
 8006298:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800629c:	491e      	ldr	r1, [pc, #120]	; (8006318 <sync_fs+0xdc>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fd12 	bl	8005cc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	333c      	adds	r3, #60	; 0x3c
 80062a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f7ff fd08 	bl	8005cc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	333c      	adds	r3, #60	; 0x3c
 80062bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7ff fcfe 	bl	8005cc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7858      	ldrb	r0, [r3, #1]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e4:	2301      	movs	r3, #1
 80062e6:	f7ff fc5b 	bl	8005ba0 <disk_write>
			fs->fsi_flag = 0;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fc71 	bl	8005be0 <disk_ioctl>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <sync_fs+0xcc>
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	41615252 	.word	0x41615252
 8006318:	61417272 	.word	0x61417272

0800631c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	3b02      	subs	r3, #2
 800632a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	3b02      	subs	r3, #2
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d301      	bcc.n	800633c <clust2sect+0x20>
 8006338:	2300      	movs	r3, #0
 800633a:	e008      	b.n	800634e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	461a      	mov	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	fb03 f202 	mul.w	r2, r3, r2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	4413      	add	r3, r2
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d904      	bls.n	800637a <get_fat+0x20>
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <get_fat+0x26>
		val = 1;	/* Internal error */
 800637a:	2301      	movs	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	e0bb      	b.n	80064f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006384:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b03      	cmp	r3, #3
 800638c:	f000 8083 	beq.w	8006496 <get_fat+0x13c>
 8006390:	2b03      	cmp	r3, #3
 8006392:	f300 80a7 	bgt.w	80064e4 <get_fat+0x18a>
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <get_fat+0x46>
 800639a:	2b02      	cmp	r3, #2
 800639c:	d056      	beq.n	800644c <get_fat+0xf2>
 800639e:	e0a1      	b.n	80064e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	899b      	ldrh	r3, [r3, #12]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80063be:	4413      	add	r3, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	6938      	ldr	r0, [r7, #16]
 80063c4:	f7ff ff0c 	bl	80061e0 <move_window>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 808d 	bne.w	80064ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	60fa      	str	r2, [r7, #12]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	8992      	ldrh	r2, [r2, #12]
 80063da:	fbb3 f1f2 	udiv	r1, r3, r2
 80063de:	fb01 f202 	mul.w	r2, r1, r2
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	899b      	ldrh	r3, [r3, #12]
 80063f6:	4619      	mov	r1, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80063fe:	4413      	add	r3, r2
 8006400:	4619      	mov	r1, r3
 8006402:	6938      	ldr	r0, [r7, #16]
 8006404:	f7ff feec 	bl	80061e0 <move_window>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d16f      	bne.n	80064ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	899b      	ldrh	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	fbb3 f1f2 	udiv	r1, r3, r2
 800641a:	fb01 f202 	mul.w	r2, r1, r2
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	461a      	mov	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4313      	orrs	r3, r2
 8006430:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <get_fat+0xe8>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	e002      	b.n	8006448 <get_fat+0xee>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006448:	617b      	str	r3, [r7, #20]
			break;
 800644a:	e055      	b.n	80064f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	899b      	ldrh	r3, [r3, #12]
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	4619      	mov	r1, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006460:	4413      	add	r3, r2
 8006462:	4619      	mov	r1, r3
 8006464:	6938      	ldr	r0, [r7, #16]
 8006466:	f7ff febb 	bl	80061e0 <move_window>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d140      	bne.n	80064f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	8992      	ldrh	r2, [r2, #12]
 800647e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006482:	fb00 f202 	mul.w	r2, r0, r2
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	440b      	add	r3, r1
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fbc6 	bl	8005c1c <ld_word>
 8006490:	4603      	mov	r3, r0
 8006492:	617b      	str	r3, [r7, #20]
			break;
 8006494:	e030      	b.n	80064f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	899b      	ldrh	r3, [r3, #12]
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064aa:	4413      	add	r3, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	6938      	ldr	r0, [r7, #16]
 80064b0:	f7ff fe96 	bl	80061e0 <move_window>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11d      	bne.n	80064f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	8992      	ldrh	r2, [r2, #12]
 80064c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80064cc:	fb00 f202 	mul.w	r2, r0, r2
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	440b      	add	r3, r1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fbb9 	bl	8005c4c <ld_dword>
 80064da:	4603      	mov	r3, r0
 80064dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064e0:	617b      	str	r3, [r7, #20]
			break;
 80064e2:	e009      	b.n	80064f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80064e4:	2301      	movs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e006      	b.n	80064f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064f6:	bf00      	nop
		}
	}

	return val;
 80064f8:	697b      	ldr	r3, [r7, #20]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006502:	b590      	push	{r4, r7, lr}
 8006504:	b089      	sub	sp, #36	; 0x24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800650e:	2302      	movs	r3, #2
 8006510:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b01      	cmp	r3, #1
 8006516:	f240 8109 	bls.w	800672c <put_fat+0x22a>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	f080 8103 	bcs.w	800672c <put_fat+0x22a>
		switch (fs->fs_type) {
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b03      	cmp	r3, #3
 800652c:	f000 80b6 	beq.w	800669c <put_fat+0x19a>
 8006530:	2b03      	cmp	r3, #3
 8006532:	f300 80fb 	bgt.w	800672c <put_fat+0x22a>
 8006536:	2b01      	cmp	r3, #1
 8006538:	d003      	beq.n	8006542 <put_fat+0x40>
 800653a:	2b02      	cmp	r3, #2
 800653c:	f000 8083 	beq.w	8006646 <put_fat+0x144>
 8006540:	e0f4      	b.n	800672c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4413      	add	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	899b      	ldrh	r3, [r3, #12]
 8006558:	4619      	mov	r1, r3
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006560:	4413      	add	r3, r2
 8006562:	4619      	mov	r1, r3
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fe3b 	bl	80061e0 <move_window>
 800656a:	4603      	mov	r3, r0
 800656c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800656e:	7ffb      	ldrb	r3, [r7, #31]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 80d4 	bne.w	800671e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	61ba      	str	r2, [r7, #24]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	8992      	ldrh	r2, [r2, #12]
 8006586:	fbb3 f0f2 	udiv	r0, r3, r2
 800658a:	fb00 f202 	mul.w	r2, r0, r2
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	440b      	add	r3, r1
 8006592:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00d      	beq.n	80065ba <put_fat+0xb8>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b25b      	sxtb	r3, r3
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	b25a      	sxtb	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	4313      	orrs	r3, r2
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	e001      	b.n	80065be <put_fat+0xbc>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	899b      	ldrh	r3, [r3, #12]
 80065d0:	4619      	mov	r1, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80065d8:	4413      	add	r3, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fdff 	bl	80061e0 <move_window>
 80065e2:	4603      	mov	r3, r0
 80065e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065e6:	7ffb      	ldrb	r3, [r7, #31]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f040 809a 	bne.w	8006722 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	899b      	ldrh	r3, [r3, #12]
 80065f8:	461a      	mov	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006600:	fb00 f202 	mul.w	r2, r0, r2
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	440b      	add	r3, r1
 8006608:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <put_fat+0x11a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	091b      	lsrs	r3, r3, #4
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e00e      	b.n	800663a <put_fat+0x138>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	b25b      	sxtb	r3, r3
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	b25a      	sxtb	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b25b      	sxtb	r3, r3
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	b25b      	sxtb	r3, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	b25b      	sxtb	r3, r3
 8006638:	b2db      	uxtb	r3, r3
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	70da      	strb	r2, [r3, #3]
			break;
 8006644:	e072      	b.n	800672c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	899b      	ldrh	r3, [r3, #12]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	fbb3 f3f1 	udiv	r3, r3, r1
 800665a:	4413      	add	r3, r2
 800665c:	4619      	mov	r1, r3
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff fdbe 	bl	80061e0 <move_window>
 8006664:	4603      	mov	r3, r0
 8006666:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006668:	7ffb      	ldrb	r3, [r7, #31]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d15b      	bne.n	8006726 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	8992      	ldrh	r2, [r2, #12]
 800667c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006680:	fb00 f202 	mul.w	r2, r0, r2
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	440b      	add	r3, r1
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	b292      	uxth	r2, r2
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff faff 	bl	8005c92 <st_word>
			fs->wflag = 1;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	70da      	strb	r2, [r3, #3]
			break;
 800669a:	e047      	b.n	800672c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	899b      	ldrh	r3, [r3, #12]
 80066a4:	089b      	lsrs	r3, r3, #2
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	4619      	mov	r1, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80066b0:	4413      	add	r3, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fd93 	bl	80061e0 <move_window>
 80066ba:	4603      	mov	r3, r0
 80066bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066be:	7ffb      	ldrb	r3, [r7, #31]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d132      	bne.n	800672a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8992      	ldrh	r2, [r2, #12]
 80066d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80066dc:	fb00 f202 	mul.w	r2, r0, r2
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fab1 	bl	8005c4c <ld_dword>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066f0:	4323      	orrs	r3, r4
 80066f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	8992      	ldrh	r2, [r2, #12]
 8006702:	fbb3 f0f2 	udiv	r0, r3, r2
 8006706:	fb00 f202 	mul.w	r2, r0, r2
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	440b      	add	r3, r1
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fad9 	bl	8005cc8 <st_dword>
			fs->wflag = 1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	70da      	strb	r2, [r3, #3]
			break;
 800671c:	e006      	b.n	800672c <put_fat+0x22a>
			if (res != FR_OK) break;
 800671e:	bf00      	nop
 8006720:	e004      	b.n	800672c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006722:	bf00      	nop
 8006724:	e002      	b.n	800672c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <put_fat+0x22a>
			if (res != FR_OK) break;
 800672a:	bf00      	nop
		}
	}
	return res;
 800672c:	7ffb      	ldrb	r3, [r7, #31]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3724      	adds	r7, #36	; 0x24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd90      	pop	{r4, r7, pc}

08006736 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b088      	sub	sp, #32
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d904      	bls.n	800675c <remove_chain+0x26>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d301      	bcc.n	8006760 <remove_chain+0x2a>
 800675c:	2302      	movs	r3, #2
 800675e:	e04b      	b.n	80067f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00c      	beq.n	8006780 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	69b8      	ldr	r0, [r7, #24]
 800676e:	f7ff fec8 	bl	8006502 <put_fat>
 8006772:	4603      	mov	r3, r0
 8006774:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006776:	7ffb      	ldrb	r3, [r7, #31]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <remove_chain+0x4a>
 800677c:	7ffb      	ldrb	r3, [r7, #31]
 800677e:	e03b      	b.n	80067f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fde9 	bl	800635a <get_fat>
 8006788:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d031      	beq.n	80067f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <remove_chain+0x64>
 8006796:	2302      	movs	r3, #2
 8006798:	e02e      	b.n	80067f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a0:	d101      	bne.n	80067a6 <remove_chain+0x70>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e028      	b.n	80067f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067a6:	2200      	movs	r2, #0
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	69b8      	ldr	r0, [r7, #24]
 80067ac:	f7ff fea9 	bl	8006502 <put_fat>
 80067b0:	4603      	mov	r3, r0
 80067b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80067b4:	7ffb      	ldrb	r3, [r7, #31]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <remove_chain+0x88>
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
 80067bc:	e01c      	b.n	80067f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	69da      	ldr	r2, [r3, #28]
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	3b02      	subs	r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d20b      	bcs.n	80067e4 <remove_chain+0xae>
			fs->free_clst++;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3c6      	bcc.n	8006780 <remove_chain+0x4a>
 80067f2:	e000      	b.n	80067f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <create_chain+0x2c>
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	429a      	cmp	r2, r3
 800682a:	d31b      	bcc.n	8006864 <create_chain+0x64>
 800682c:	2301      	movs	r3, #1
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e018      	b.n	8006864 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fd90 	bl	800635a <get_fat>
 800683a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d801      	bhi.n	8006846 <create_chain+0x46>
 8006842:	2301      	movs	r3, #1
 8006844:	e070      	b.n	8006928 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d101      	bne.n	8006852 <create_chain+0x52>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	e06a      	b.n	8006928 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	429a      	cmp	r2, r3
 800685a:	d201      	bcs.n	8006860 <create_chain+0x60>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	e063      	b.n	8006928 <create_chain+0x128>
		scl = clst;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	429a      	cmp	r2, r3
 8006876:	d307      	bcc.n	8006888 <create_chain+0x88>
				ncl = 2;
 8006878:	2302      	movs	r3, #2
 800687a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d901      	bls.n	8006888 <create_chain+0x88>
 8006884:	2300      	movs	r3, #0
 8006886:	e04f      	b.n	8006928 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff fd65 	bl	800635a <get_fat>
 8006890:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00e      	beq.n	80068b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d003      	beq.n	80068a6 <create_chain+0xa6>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a4:	d101      	bne.n	80068aa <create_chain+0xaa>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	e03e      	b.n	8006928 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d1da      	bne.n	8006868 <create_chain+0x68>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e038      	b.n	8006928 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80068b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068bc:	69f9      	ldr	r1, [r7, #28]
 80068be:	6938      	ldr	r0, [r7, #16]
 80068c0:	f7ff fe1f 	bl	8006502 <put_fat>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <create_chain+0xe2>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d006      	beq.n	80068e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6938      	ldr	r0, [r7, #16]
 80068da:	f7ff fe12 	bl	8006502 <put_fat>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d116      	bne.n	8006916 <create_chain+0x116>
		fs->last_clst = ncl;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	3b02      	subs	r3, #2
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d804      	bhi.n	8006906 <create_chain+0x106>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	1e5a      	subs	r2, r3, #1
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	b2da      	uxtb	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	711a      	strb	r2, [r3, #4]
 8006914:	e007      	b.n	8006926 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d102      	bne.n	8006922 <create_chain+0x122>
 800691c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006920:	e000      	b.n	8006924 <create_chain+0x124>
 8006922:	2301      	movs	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006926:	69fb      	ldr	r3, [r7, #28]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	3304      	adds	r3, #4
 8006946:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	899b      	ldrh	r3, [r3, #12]
 800694c:	461a      	mov	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	fbb3 f3f2 	udiv	r3, r3, r2
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	8952      	ldrh	r2, [r2, #10]
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	613a      	str	r2, [r7, #16]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <clmt_clust+0x42>
 800696e:	2300      	movs	r3, #0
 8006970:	e010      	b.n	8006994 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d307      	bcc.n	800698a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3304      	adds	r3, #4
 8006986:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006988:	e7e9      	b.n	800695e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800698a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4413      	add	r3, r2
}
 8006994:	4618      	mov	r0, r3
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b6:	d204      	bcs.n	80069c2 <dir_sdi+0x22>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80069c2:	2302      	movs	r3, #2
 80069c4:	e071      	b.n	8006aaa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <dir_sdi+0x46>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d902      	bls.n	80069e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10c      	bne.n	8006a06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	8912      	ldrh	r2, [r2, #8]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d301      	bcc.n	80069fc <dir_sdi+0x5c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e056      	b.n	8006aaa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	61da      	str	r2, [r3, #28]
 8006a04:	e02d      	b.n	8006a62 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	895b      	ldrh	r3, [r3, #10]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	899b      	ldrh	r3, [r3, #12]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a16:	e019      	b.n	8006a4c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6979      	ldr	r1, [r7, #20]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fc9c 	bl	800635a <get_fat>
 8006a22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2a:	d101      	bne.n	8006a30 <dir_sdi+0x90>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e03c      	b.n	8006aaa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d904      	bls.n	8006a40 <dir_sdi+0xa0>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d301      	bcc.n	8006a44 <dir_sdi+0xa4>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e032      	b.n	8006aaa <dir_sdi+0x10a>
			ofs -= csz;
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d2e1      	bcs.n	8006a18 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	6938      	ldr	r0, [r7, #16]
 8006a58:	f7ff fc60 	bl	800631c <clust2sect>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <dir_sdi+0xd4>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e01a      	b.n	8006aaa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	899b      	ldrh	r3, [r3, #12]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a84:	441a      	add	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	899b      	ldrh	r3, [r3, #12]
 8006a94:	461a      	mov	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a9c:	fb00 f202 	mul.w	r2, r0, r2
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	18ca      	adds	r2, r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	3320      	adds	r3, #32
 8006ac8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <dir_next+0x28>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ad8:	d301      	bcc.n	8006ade <dir_next+0x2c>
 8006ada:	2304      	movs	r3, #4
 8006adc:	e0bb      	b.n	8006c56 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	899b      	ldrh	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aea:	fb01 f202 	mul.w	r2, r1, r2
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 809d 	bne.w	8006c30 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	8912      	ldrh	r2, [r2, #8]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f0c0 808d 	bcc.w	8006c30 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	61da      	str	r2, [r3, #28]
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	e09a      	b.n	8006c56 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	899b      	ldrh	r3, [r3, #12]
 8006b24:	461a      	mov	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	8952      	ldrh	r2, [r2, #10]
 8006b30:	3a01      	subs	r2, #1
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d17b      	bne.n	8006c30 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f7ff fc0a 	bl	800635a <get_fat>
 8006b46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d801      	bhi.n	8006b52 <dir_next+0xa0>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e081      	b.n	8006c56 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b58:	d101      	bne.n	8006b5e <dir_next+0xac>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e07b      	b.n	8006c56 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d359      	bcc.n	8006c1c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	61da      	str	r2, [r3, #28]
 8006b74:	2304      	movs	r3, #4
 8006b76:	e06e      	b.n	8006c56 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7ff fe3d 	bl	8006800 <create_chain>
 8006b86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <dir_next+0xe0>
 8006b8e:	2307      	movs	r3, #7
 8006b90:	e061      	b.n	8006c56 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <dir_next+0xea>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e05c      	b.n	8006c56 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba2:	d101      	bne.n	8006ba8 <dir_next+0xf6>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e056      	b.n	8006c56 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fad5 	bl	8006158 <sync_window>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <dir_next+0x106>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04e      	b.n	8006c56 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	899b      	ldrh	r3, [r3, #12]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	f7ff f8cc 	bl	8005d62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	6979      	ldr	r1, [r7, #20]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff fba3 	bl	800631c <clust2sect>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
 8006bdc:	e012      	b.n	8006c04 <dir_next+0x152>
						fs->wflag = 1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fab7 	bl	8006158 <sync_window>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <dir_next+0x142>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e030      	b.n	8006c56 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	895b      	ldrh	r3, [r3, #10]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d3e6      	bcc.n	8006bde <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fb79 	bl	800631c <clust2sect>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	899b      	ldrh	r3, [r3, #12]
 8006c40:	461a      	mov	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c48:	fb00 f202 	mul.w	r2, r0, r2
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	18ca      	adds	r2, r1, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fe95 	bl	80069a0 <dir_sdi>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d12b      	bne.n	8006cd8 <dir_alloc+0x7a>
		n = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff faa8 	bl	80061e0 <move_window>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11d      	bne.n	8006cd6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2be5      	cmp	r3, #229	; 0xe5
 8006ca2:	d004      	beq.n	8006cae <dir_alloc+0x50>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d107      	bne.n	8006cbe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d102      	bne.n	8006cc2 <dir_alloc+0x64>
 8006cbc:	e00c      	b.n	8006cd8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fef4 	bl	8006ab2 <dir_next>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0d7      	beq.n	8006c84 <dir_alloc+0x26>
 8006cd4:	e000      	b.n	8006cd8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006cd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d101      	bne.n	8006ce2 <dir_alloc+0x84>
 8006cde:	2307      	movs	r3, #7
 8006ce0:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	331a      	adds	r3, #26
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe ff8e 	bl	8005c1c <ld_word>
 8006d00:	4603      	mov	r3, r0
 8006d02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d109      	bne.n	8006d20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe ff83 	bl	8005c1c <ld_word>
 8006d16:	4603      	mov	r3, r0
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d20:	68fb      	ldr	r3, [r7, #12]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	331a      	adds	r3, #26
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe ffa6 	bl	8005c92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d109      	bne.n	8006d62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f103 0214 	add.w	r2, r3, #20
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7fe ff98 	bl	8005c92 <st_word>
	}
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	331a      	adds	r3, #26
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe ff4e 	bl	8005c1c <ld_word>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <cmp_lfn+0x1e>
 8006d86:	2300      	movs	r3, #0
 8006d88:	e059      	b.n	8006e3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006da0:	2301      	movs	r3, #1
 8006da2:	81fb      	strh	r3, [r7, #14]
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e033      	b.n	8006e12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006daa:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <cmp_lfn+0xdc>)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4413      	add	r3, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe ff2f 	bl	8005c1c <ld_word>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2bfe      	cmp	r3, #254	; 0xfe
 8006dcc:	d812      	bhi.n	8006df4 <cmp_lfn+0x88>
 8006dce:	89bb      	ldrh	r3, [r7, #12]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 ff59 	bl	8008c88 <ff_wtoupper>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461c      	mov	r4, r3
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	617a      	str	r2, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 ff4d 	bl	8008c88 <ff_wtoupper>
 8006dee:	4603      	mov	r3, r0
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d001      	beq.n	8006df8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006df4:	2300      	movs	r3, #0
 8006df6:	e022      	b.n	8006e3e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006df8:	89bb      	ldrh	r3, [r7, #12]
 8006dfa:	81fb      	strh	r3, [r7, #14]
 8006dfc:	e006      	b.n	8006e0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006dfe:	89bb      	ldrh	r3, [r7, #12]
 8006e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d001      	beq.n	8006e0c <cmp_lfn+0xa0>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e018      	b.n	8006e3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d9c8      	bls.n	8006daa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <cmp_lfn+0xd0>
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <cmp_lfn+0xd0>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	4413      	add	r3, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <cmp_lfn+0xd0>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e3c:	2301      	movs	r3, #1
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}
 8006e46:	bf00      	nop
 8006e48:	0800ca6c 	.word	0x0800ca6c

08006e4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4611      	mov	r1, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	71fb      	strb	r3, [r7, #7]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	330d      	adds	r3, #13
 8006e66:	79ba      	ldrb	r2, [r7, #6]
 8006e68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	330b      	adds	r3, #11
 8006e6e:	220f      	movs	r2, #15
 8006e70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	330c      	adds	r3, #12
 8006e76:	2200      	movs	r2, #0
 8006e78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	331a      	adds	r3, #26
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe ff06 	bl	8005c92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	1e5a      	subs	r2, r3, #1
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	82fb      	strh	r3, [r7, #22]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006e9e:	8afb      	ldrh	r3, [r7, #22]
 8006ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <put_lfn+0x6c>
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	61fa      	str	r2, [r7, #28]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006eb8:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <put_lfn+0xcc>)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	8afa      	ldrh	r2, [r7, #22]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fee1 	bl	8005c92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ed0:	8afb      	ldrh	r3, [r7, #22]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <put_lfn+0x90>
 8006ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d9da      	bls.n	8006e9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ee8:	8afb      	ldrh	r3, [r7, #22]
 8006eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d006      	beq.n	8006f00 <put_lfn+0xb4>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <put_lfn+0xbc>
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	79fa      	ldrb	r2, [r7, #7]
 8006f0c:	701a      	strb	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0800ca6c 	.word	0x0800ca6c

08006f1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08c      	sub	sp, #48	; 0x30
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006f2a:	220b      	movs	r2, #11
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7fe fef6 	bl	8005d20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d92b      	bls.n	8006f92 <gen_numname+0x76>
		sr = seq;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f3e:	e022      	b.n	8006f86 <gen_numname+0x6a>
			wc = *lfn++;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4e:	e017      	b.n	8006f80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	005a      	lsls	r2, r3, #1
 8006f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <gen_numname+0x5e>
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f74:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	d9e4      	bls.n	8006f50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1d8      	bne.n	8006f40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f92:	2307      	movs	r3, #7
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	3330      	adds	r3, #48	; 0x30
 8006fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006faa:	2b39      	cmp	r3, #57	; 0x39
 8006fac:	d904      	bls.n	8006fb8 <gen_numname+0x9c>
 8006fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb2:	3307      	adds	r3, #7
 8006fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	1e5a      	subs	r2, r3, #1
 8006fbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fbe:	3330      	adds	r3, #48	; 0x30
 8006fc0:	443b      	add	r3, r7
 8006fc2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006fc6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1df      	bne.n	8006f96 <gen_numname+0x7a>
	ns[i] = '~';
 8006fd6:	f107 0214 	add.w	r2, r7, #20
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	4413      	add	r3, r2
 8006fde:	227e      	movs	r2, #126	; 0x7e
 8006fe0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe6:	e002      	b.n	8006fee <gen_numname+0xd2>
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	3301      	adds	r3, #1
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
 8006fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d205      	bcs.n	8007002 <gen_numname+0xe6>
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	4413      	add	r3, r2
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d1f2      	bne.n	8006fe8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	2b07      	cmp	r3, #7
 8007006:	d807      	bhi.n	8007018 <gen_numname+0xfc>
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	62ba      	str	r2, [r7, #40]	; 0x28
 800700e:	3330      	adds	r3, #48	; 0x30
 8007010:	443b      	add	r3, r7
 8007012:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007016:	e000      	b.n	800701a <gen_numname+0xfe>
 8007018:	2120      	movs	r1, #32
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	627a      	str	r2, [r7, #36]	; 0x24
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	460a      	mov	r2, r1
 8007026:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	2b07      	cmp	r3, #7
 800702c:	d9e9      	bls.n	8007002 <gen_numname+0xe6>
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	3730      	adds	r7, #48	; 0x30
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007044:	230b      	movs	r3, #11
 8007046:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	0852      	lsrs	r2, r2, #1
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	4313      	orrs	r3, r2
 8007052:	b2da      	uxtb	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	6079      	str	r1, [r7, #4]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	4413      	add	r3, r2
 800705e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3b01      	subs	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1ed      	bne.n	8007048 <sum_sfn+0x10>
	return sum;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b086      	sub	sp, #24
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fc88 	bl	80069a0 <dir_sdi>
 8007090:	4603      	mov	r3, r0
 8007092:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <dir_find+0x24>
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	e0a9      	b.n	80071f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800709e:	23ff      	movs	r3, #255	; 0xff
 80070a0:	753b      	strb	r3, [r7, #20]
 80070a2:	7d3b      	ldrb	r3, [r7, #20]
 80070a4:	757b      	strb	r3, [r7, #21]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6938      	ldr	r0, [r7, #16]
 80070b6:	f7ff f893 	bl	80061e0 <move_window>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8090 	bne.w	80071e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80070ce:	7dbb      	ldrb	r3, [r7, #22]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <dir_find+0x60>
 80070d4:	2304      	movs	r3, #4
 80070d6:	75fb      	strb	r3, [r7, #23]
 80070d8:	e08a      	b.n	80071f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	330b      	adds	r3, #11
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7bfa      	ldrb	r2, [r7, #15]
 80070ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80070ee:	7dbb      	ldrb	r3, [r7, #22]
 80070f0:	2be5      	cmp	r3, #229	; 0xe5
 80070f2:	d007      	beq.n	8007104 <dir_find+0x8a>
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <dir_find+0x98>
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	2b0f      	cmp	r3, #15
 8007102:	d006      	beq.n	8007112 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007104:	23ff      	movs	r3, #255	; 0xff
 8007106:	757b      	strb	r3, [r7, #21]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
 8007110:	e05e      	b.n	80071d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b0f      	cmp	r3, #15
 8007116:	d136      	bne.n	8007186 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d154      	bne.n	80071d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007126:	7dbb      	ldrb	r3, [r7, #22]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00d      	beq.n	800714c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	7b5b      	ldrb	r3, [r3, #13]
 8007136:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007138:	7dbb      	ldrb	r3, [r7, #22]
 800713a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713e:	75bb      	strb	r3, [r7, #22]
 8007140:	7dbb      	ldrb	r3, [r7, #22]
 8007142:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800714c:	7dba      	ldrb	r2, [r7, #22]
 800714e:	7d7b      	ldrb	r3, [r7, #21]
 8007150:	429a      	cmp	r2, r3
 8007152:	d115      	bne.n	8007180 <dir_find+0x106>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	330d      	adds	r3, #13
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	7d3a      	ldrb	r2, [r7, #20]
 800715e:	429a      	cmp	r2, r3
 8007160:	d10e      	bne.n	8007180 <dir_find+0x106>
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f7ff fdfd 	bl	8006d6c <cmp_lfn>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <dir_find+0x106>
 8007178:	7d7b      	ldrb	r3, [r7, #21]
 800717a:	3b01      	subs	r3, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e000      	b.n	8007182 <dir_find+0x108>
 8007180:	23ff      	movs	r3, #255	; 0xff
 8007182:	757b      	strb	r3, [r7, #21]
 8007184:	e024      	b.n	80071d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007186:	7d7b      	ldrb	r3, [r7, #21]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <dir_find+0x126>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff ff51 	bl	8007038 <sum_sfn>
 8007196:	4603      	mov	r3, r0
 8007198:	461a      	mov	r2, r3
 800719a:	7d3b      	ldrb	r3, [r7, #20]
 800719c:	4293      	cmp	r3, r2
 800719e:	d024      	beq.n	80071ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <dir_find+0x14a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a18      	ldr	r0, [r3, #32]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	220b      	movs	r2, #11
 80071b8:	4619      	mov	r1, r3
 80071ba:	f7fe fded 	bl	8005d98 <mem_cmp>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d014      	beq.n	80071ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071c4:	23ff      	movs	r3, #255	; 0xff
 80071c6:	757b      	strb	r3, [r7, #21]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80071d0:	2100      	movs	r1, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fc6d 	bl	8006ab2 <dir_next>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f43f af65 	beq.w	80070ae <dir_find+0x34>
 80071e4:	e004      	b.n	80071f0 <dir_find+0x176>
		if (res != FR_OK) break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071ee:	bf00      	nop

	return res;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08c      	sub	sp, #48	; 0x30
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007210:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <dir_register+0x20>
 8007218:	2306      	movs	r3, #6
 800721a:	e0e0      	b.n	80073de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
 8007220:	e002      	b.n	8007228 <dir_register+0x2c>
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	3301      	adds	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f4      	bne.n	8007222 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800723e:	f107 030c 	add.w	r3, r7, #12
 8007242:	220c      	movs	r2, #12
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fd6b 	bl	8005d20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d032      	beq.n	80072ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2240      	movs	r2, #64	; 0x40
 8007258:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800725c:	2301      	movs	r3, #1
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007260:	e016      	b.n	8007290 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	f107 010c 	add.w	r1, r7, #12
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f7ff fe53 	bl	8006f1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff feff 	bl	800707a <dir_find>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	3301      	adds	r3, #1
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	2b63      	cmp	r3, #99	; 0x63
 8007294:	d9e5      	bls.n	8007262 <dir_register+0x66>
 8007296:	e000      	b.n	800729a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007298:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	2b64      	cmp	r3, #100	; 0x64
 800729e:	d101      	bne.n	80072a4 <dir_register+0xa8>
 80072a0:	2307      	movs	r3, #7
 80072a2:	e09c      	b.n	80073de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80072a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d002      	beq.n	80072b2 <dir_register+0xb6>
 80072ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b0:	e095      	b.n	80073de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80072b2:	7dfa      	ldrb	r2, [r7, #23]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <dir_register+0xd8>
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	330c      	adds	r3, #12
 80072c8:	4a47      	ldr	r2, [pc, #284]	; (80073e8 <dir_register+0x1ec>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	089b      	lsrs	r3, r3, #2
 80072d0:	3301      	adds	r3, #1
 80072d2:	e000      	b.n	80072d6 <dir_register+0xda>
 80072d4:	2301      	movs	r3, #1
 80072d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fcbf 	bl	8006c5e <dir_alloc>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d148      	bne.n	8007380 <dir_register+0x184>
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	623b      	str	r3, [r7, #32]
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d042      	beq.n	8007380 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	015b      	lsls	r3, r3, #5
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff fb4a 	bl	80069a0 <dir_sdi>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d132      	bne.n	8007380 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3324      	adds	r3, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fe8a 	bl	8007038 <sum_sfn>
 8007324:	4603      	mov	r3, r0
 8007326:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4619      	mov	r1, r3
 800732e:	69f8      	ldr	r0, [r7, #28]
 8007330:	f7fe ff56 	bl	80061e0 <move_window>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800733a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11d      	bne.n	800737e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	6918      	ldr	r0, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a19      	ldr	r1, [r3, #32]
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	7efb      	ldrb	r3, [r7, #27]
 8007350:	f7ff fd7c 	bl	8006e4c <put_lfn>
				fs->wflag = 1;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2201      	movs	r2, #1
 8007358:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fba8 	bl	8006ab2 <dir_next>
 8007362:	4603      	mov	r3, r0
 8007364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <dir_register+0x184>
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	3b01      	subs	r3, #1
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1d5      	bne.n	8007328 <dir_register+0x12c>
 800737c:	e000      	b.n	8007380 <dir_register+0x184>
				if (res != FR_OK) break;
 800737e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007384:	2b00      	cmp	r3, #0
 8007386:	d128      	bne.n	80073da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	4619      	mov	r1, r3
 800738e:	69f8      	ldr	r0, [r7, #28]
 8007390:	f7fe ff26 	bl	80061e0 <move_window>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800739a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d11b      	bne.n	80073da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	2220      	movs	r2, #32
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fcd9 	bl	8005d62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a18      	ldr	r0, [r3, #32]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3324      	adds	r3, #36	; 0x24
 80073b8:	220b      	movs	r2, #11
 80073ba:	4619      	mov	r1, r3
 80073bc:	f7fe fcb0 	bl	8005d20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	330c      	adds	r3, #12
 80073cc:	f002 0218 	and.w	r2, r2, #24
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2201      	movs	r2, #1
 80073d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80073da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3730      	adds	r7, #48	; 0x30
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	4ec4ec4f 	.word	0x4ec4ec4f

080073ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	61ba      	str	r2, [r7, #24]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800741a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800741c:	2b1f      	cmp	r3, #31
 800741e:	d940      	bls.n	80074a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007422:	2b2f      	cmp	r3, #47	; 0x2f
 8007424:	d006      	beq.n	8007434 <create_name+0x48>
 8007426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007428:	2b5c      	cmp	r3, #92	; 0x5c
 800742a:	d110      	bne.n	800744e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800742c:	e002      	b.n	8007434 <create_name+0x48>
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	3301      	adds	r3, #1
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4413      	add	r3, r2
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b2f      	cmp	r3, #47	; 0x2f
 800743e:	d0f6      	beq.n	800742e <create_name+0x42>
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b5c      	cmp	r3, #92	; 0x5c
 800744a:	d0f0      	beq.n	800742e <create_name+0x42>
			break;
 800744c:	e02a      	b.n	80074a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2bfe      	cmp	r3, #254	; 0xfe
 8007452:	d901      	bls.n	8007458 <create_name+0x6c>
 8007454:	2306      	movs	r3, #6
 8007456:	e17d      	b.n	8007754 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745a:	b2db      	uxtb	r3, r3
 800745c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800745e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fbd4 	bl	8008c10 <ff_convert>
 8007468:	4603      	mov	r3, r0
 800746a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800746c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <create_name+0x8a>
 8007472:	2306      	movs	r3, #6
 8007474:	e16e      	b.n	8007754 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007478:	2b7f      	cmp	r3, #127	; 0x7f
 800747a:	d809      	bhi.n	8007490 <create_name+0xa4>
 800747c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747e:	4619      	mov	r1, r3
 8007480:	488d      	ldr	r0, [pc, #564]	; (80076b8 <create_name+0x2cc>)
 8007482:	f7fe fcb0 	bl	8005de6 <chk_chr>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <create_name+0xa4>
 800748c:	2306      	movs	r3, #6
 800748e:	e161      	b.n	8007754 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	617a      	str	r2, [r7, #20]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800749e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80074a0:	e7b4      	b.n	800740c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80074a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	441a      	add	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80074ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b0:	2b1f      	cmp	r3, #31
 80074b2:	d801      	bhi.n	80074b8 <create_name+0xcc>
 80074b4:	2304      	movs	r3, #4
 80074b6:	e000      	b.n	80074ba <create_name+0xce>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074be:	e011      	b.n	80074e4 <create_name+0xf8>
		w = lfn[di - 1];
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074c6:	3b01      	subs	r3, #1
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80074d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d002      	beq.n	80074de <create_name+0xf2>
 80074d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074da:	2b2e      	cmp	r3, #46	; 0x2e
 80074dc:	d106      	bne.n	80074ec <create_name+0x100>
		di--;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1ea      	bne.n	80074c0 <create_name+0xd4>
 80074ea:	e000      	b.n	80074ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80074ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <create_name+0x118>
 8007500:	2306      	movs	r3, #6
 8007502:	e127      	b.n	8007754 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	220b      	movs	r2, #11
 800750a:	2120      	movs	r1, #32
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fc28 	bl	8005d62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007512:	2300      	movs	r3, #0
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	e002      	b.n	800751e <create_name+0x132>
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	3301      	adds	r3, #1
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	2b20      	cmp	r3, #32
 800752a:	d0f5      	beq.n	8007518 <create_name+0x12c>
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	2b2e      	cmp	r3, #46	; 0x2e
 8007538:	d0ee      	beq.n	8007518 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <create_name+0x168>
 8007540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007544:	f043 0303 	orr.w	r3, r3, #3
 8007548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800754c:	e002      	b.n	8007554 <create_name+0x168>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3b01      	subs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <create_name+0x182>
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007560:	3b01      	subs	r3, #1
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	2b2e      	cmp	r3, #46	; 0x2e
 800756c:	d1ef      	bne.n	800754e <create_name+0x162>

	i = b = 0; ni = 8;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007574:	2300      	movs	r3, #0
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	2308      	movs	r3, #8
 800757a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	61ba      	str	r2, [r7, #24]
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800758c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8090 	beq.w	80076b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007596:	2b20      	cmp	r3, #32
 8007598:	d006      	beq.n	80075a8 <create_name+0x1bc>
 800759a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800759c:	2b2e      	cmp	r3, #46	; 0x2e
 800759e:	d10a      	bne.n	80075b6 <create_name+0x1ca>
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d006      	beq.n	80075b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80075a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ac:	f043 0303 	orr.w	r3, r3, #3
 80075b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075b4:	e07d      	b.n	80076b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80075b6:	6a3a      	ldr	r2, [r7, #32]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d203      	bcs.n	80075c6 <create_name+0x1da>
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d123      	bne.n	800760e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	2b0b      	cmp	r3, #11
 80075ca:	d106      	bne.n	80075da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80075cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d0:	f043 0303 	orr.w	r3, r3, #3
 80075d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075d8:	e075      	b.n	80076c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d005      	beq.n	80075ee <create_name+0x202>
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e6:	f043 0303 	orr.w	r3, r3, #3
 80075ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d866      	bhi.n	80076c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	2308      	movs	r3, #8
 80075fc:	623b      	str	r3, [r7, #32]
 80075fe:	230b      	movs	r3, #11
 8007600:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800760c:	e051      	b.n	80076b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800760e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007610:	2b7f      	cmp	r3, #127	; 0x7f
 8007612:	d914      	bls.n	800763e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f001 faf9 	bl	8008c10 <ff_convert>
 800761e:	4603      	mov	r3, r0
 8007620:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <create_name+0x246>
 8007628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800762a:	3b80      	subs	r3, #128	; 0x80
 800762c:	4a23      	ldr	r2, [pc, #140]	; (80076bc <create_name+0x2d0>)
 800762e:	5cd3      	ldrb	r3, [r2, r3]
 8007630:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007636:	f043 0302 	orr.w	r3, r3, #2
 800763a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800763e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <create_name+0x268>
 8007644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007646:	4619      	mov	r1, r3
 8007648:	481d      	ldr	r0, [pc, #116]	; (80076c0 <create_name+0x2d4>)
 800764a:	f7fe fbcc 	bl	8005de6 <chk_chr>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007654:	235f      	movs	r3, #95	; 0x5f
 8007656:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765c:	f043 0303 	orr.w	r3, r3, #3
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007664:	e01b      	b.n	800769e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d909      	bls.n	8007680 <create_name+0x294>
 800766c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800766e:	2b5a      	cmp	r3, #90	; 0x5a
 8007670:	d806      	bhi.n	8007680 <create_name+0x294>
					b |= 2;
 8007672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007676:	f043 0302 	orr.w	r3, r3, #2
 800767a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800767e:	e00e      	b.n	800769e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007682:	2b60      	cmp	r3, #96	; 0x60
 8007684:	d90b      	bls.n	800769e <create_name+0x2b2>
 8007686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007688:	2b7a      	cmp	r3, #122	; 0x7a
 800768a:	d808      	bhi.n	800769e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800768c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769a:	3b20      	subs	r3, #32
 800769c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	623a      	str	r2, [r7, #32]
 80076a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076a6:	b2d1      	uxtb	r1, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	460a      	mov	r2, r1
 80076ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80076b2:	e763      	b.n	800757c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80076b4:	bf00      	nop
 80076b6:	e006      	b.n	80076c6 <create_name+0x2da>
 80076b8:	0800c95c 	.word	0x0800c95c
 80076bc:	0800c9ec 	.word	0x0800c9ec
 80076c0:	0800c968 	.word	0x0800c968
			if (si > di) break;			/* No extension */
 80076c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076cc:	2be5      	cmp	r3, #229	; 0xe5
 80076ce:	d103      	bne.n	80076d8 <create_name+0x2ec>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2205      	movs	r2, #5
 80076d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d104      	bne.n	80076e8 <create_name+0x2fc>
 80076de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80076e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d005      	beq.n	8007700 <create_name+0x314>
 80076f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d105      	bne.n	800770c <create_name+0x320>
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d117      	bne.n	8007748 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <create_name+0x344>
 8007724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007728:	f043 0310 	orr.w	r3, r3, #16
 800772c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007734:	f003 030c 	and.w	r3, r3, #12
 8007738:	2b04      	cmp	r3, #4
 800773a:	d105      	bne.n	8007748 <create_name+0x35c>
 800773c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800774e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007752:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007770:	e002      	b.n	8007778 <follow_path+0x1c>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b2f      	cmp	r3, #47	; 0x2f
 800777e:	d0f8      	beq.n	8007772 <follow_path+0x16>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b5c      	cmp	r3, #92	; 0x5c
 8007786:	d0f4      	beq.n	8007772 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b1f      	cmp	r3, #31
 8007794:	d80a      	bhi.n	80077ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2280      	movs	r2, #128	; 0x80
 800779a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff f8fd 	bl	80069a0 <dir_sdi>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]
 80077aa:	e048      	b.n	800783e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077ac:	463b      	mov	r3, r7
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fe1b 	bl	80073ec <create_name>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d139      	bne.n	8007834 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fc5a 	bl	800707a <dir_find>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d12c      	bne.n	8007838 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077de:	7afb      	ldrb	r3, [r7, #11]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d127      	bne.n	8007838 <follow_path+0xdc>
 80077e8:	2305      	movs	r3, #5
 80077ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077ec:	e024      	b.n	8007838 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d121      	bne.n	800783c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	799b      	ldrb	r3, [r3, #6]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007804:	2305      	movs	r3, #5
 8007806:	75fb      	strb	r3, [r7, #23]
 8007808:	e019      	b.n	800783e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	8992      	ldrh	r2, [r2, #12]
 8007818:	fbb3 f0f2 	udiv	r0, r3, r2
 800781c:	fb00 f202 	mul.w	r2, r0, r2
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	440b      	add	r3, r1
 8007824:	4619      	mov	r1, r3
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff fa60 	bl	8006cec <ld_clust>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007832:	e7bb      	b.n	80077ac <follow_path+0x50>
			if (res != FR_OK) break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <follow_path+0xe2>
				break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800783c:	bf00      	nop
			}
		}
	}

	return res;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007854:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d031      	beq.n	80078c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e002      	b.n	800786c <get_ldnumber+0x24>
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	3301      	adds	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b1f      	cmp	r3, #31
 8007872:	d903      	bls.n	800787c <get_ldnumber+0x34>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b3a      	cmp	r3, #58	; 0x3a
 800787a:	d1f4      	bne.n	8007866 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b3a      	cmp	r3, #58	; 0x3a
 8007882:	d11c      	bne.n	80078be <get_ldnumber+0x76>
			tp = *path;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	60fa      	str	r2, [r7, #12]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	3b30      	subs	r3, #48	; 0x30
 8007894:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b09      	cmp	r3, #9
 800789a:	d80e      	bhi.n	80078ba <get_ldnumber+0x72>
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d10a      	bne.n	80078ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d107      	bne.n	80078ba <get_ldnumber+0x72>
					vol = (int)i;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	3301      	adds	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	e002      	b.n	80078c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078be:	2300      	movs	r3, #0
 80078c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078c2:	693b      	ldr	r3, [r7, #16]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	70da      	strb	r2, [r3, #3]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fe fc78 	bl	80061e0 <move_window>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <check_fs+0x2a>
 80078f6:	2304      	movs	r3, #4
 80078f8:	e038      	b.n	800796c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	333c      	adds	r3, #60	; 0x3c
 80078fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe f98a 	bl	8005c1c <ld_word>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <check_fs+0x48>
 8007914:	2303      	movs	r3, #3
 8007916:	e029      	b.n	800796c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791e:	2be9      	cmp	r3, #233	; 0xe9
 8007920:	d009      	beq.n	8007936 <check_fs+0x66>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007928:	2beb      	cmp	r3, #235	; 0xeb
 800792a:	d11e      	bne.n	800796a <check_fs+0x9a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007932:	2b90      	cmp	r3, #144	; 0x90
 8007934:	d119      	bne.n	800796a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	333c      	adds	r3, #60	; 0x3c
 800793a:	3336      	adds	r3, #54	; 0x36
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe f985 	bl	8005c4c <ld_dword>
 8007942:	4603      	mov	r3, r0
 8007944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007948:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <check_fs+0xa4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d101      	bne.n	8007952 <check_fs+0x82>
 800794e:	2300      	movs	r3, #0
 8007950:	e00c      	b.n	800796c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	333c      	adds	r3, #60	; 0x3c
 8007956:	3352      	adds	r3, #82	; 0x52
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe f977 	bl	8005c4c <ld_dword>
 800795e:	4603      	mov	r3, r0
 8007960:	4a05      	ldr	r2, [pc, #20]	; (8007978 <check_fs+0xa8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d101      	bne.n	800796a <check_fs+0x9a>
 8007966:	2300      	movs	r3, #0
 8007968:	e000      	b.n	800796c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800796a:	2302      	movs	r3, #2
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	00544146 	.word	0x00544146
 8007978:	33544146 	.word	0x33544146

0800797c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff ff59 	bl	8007848 <get_ldnumber>
 8007996:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	da01      	bge.n	80079a2 <find_volume+0x26>
 800799e:	230b      	movs	r3, #11
 80079a0:	e26a      	b.n	8007e78 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079a2:	4aa3      	ldr	r2, [pc, #652]	; (8007c30 <find_volume+0x2b4>)
 80079a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <find_volume+0x3a>
 80079b2:	230c      	movs	r3, #12
 80079b4:	e260      	b.n	8007e78 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80079b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079b8:	f7fe fa30 	bl	8005e1c <lock_fs>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <find_volume+0x4a>
 80079c2:	230f      	movs	r3, #15
 80079c4:	e258      	b.n	8007e78 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f87d 	bl	8005ae0 <disk_status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <find_volume+0x92>
 80079fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e234      	b.n	8007e78 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e232      	b.n	8007e78 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f875 	bl	8005b14 <disk_initialize>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e21b      	b.n	8007e78 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <find_volume+0xda>
 8007a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007a52:	230a      	movs	r3, #10
 8007a54:	e210      	b.n	8007e78 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	7858      	ldrb	r0, [r3, #1]
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2102      	movs	r1, #2
 8007a62:	f7fe f8bd 	bl	8005be0 <disk_ioctl>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <find_volume+0xf4>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e203      	b.n	8007e78 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	899b      	ldrh	r3, [r3, #12]
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d80d      	bhi.n	8007a96 <find_volume+0x11a>
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	899b      	ldrh	r3, [r3, #12]
 8007a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a82:	d308      	bcc.n	8007a96 <find_volume+0x11a>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	899b      	ldrh	r3, [r3, #12]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	899b      	ldrh	r3, [r3, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <find_volume+0x11e>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e1ee      	b.n	8007e78 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aa2:	f7ff ff15 	bl	80078d0 <check_fs>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d149      	bne.n	8007b48 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab8:	e01e      	b.n	8007af8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007ac8:	4413      	add	r3, r2
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3304      	adds	r3, #4
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <find_volume+0x168>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	3308      	adds	r3, #8
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe f8b6 	bl	8005c4c <ld_dword>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	e000      	b.n	8007ae6 <find_volume+0x16a>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3358      	adds	r3, #88	; 0x58
 8007aec:	443b      	add	r3, r7
 8007aee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af4:	3301      	adds	r3, #1
 8007af6:	643b      	str	r3, [r7, #64]	; 0x40
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d9dd      	bls.n	8007aba <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007afe:	2300      	movs	r3, #0
 8007b00:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <find_volume+0x192>
 8007b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	3358      	adds	r3, #88	; 0x58
 8007b14:	443b      	add	r3, r7
 8007b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <find_volume+0x1b2>
 8007b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b26:	f7ff fed3 	bl	80078d0 <check_fs>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	e000      	b.n	8007b30 <find_volume+0x1b4>
 8007b2e:	2303      	movs	r3, #3
 8007b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d905      	bls.n	8007b48 <find_volume+0x1cc>
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3e:	3301      	adds	r3, #1
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
 8007b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d9e2      	bls.n	8007b0e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d101      	bne.n	8007b54 <find_volume+0x1d8>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e191      	b.n	8007e78 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d901      	bls.n	8007b60 <find_volume+0x1e4>
 8007b5c:	230d      	movs	r3, #13
 8007b5e:	e18b      	b.n	8007e78 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	333c      	adds	r3, #60	; 0x3c
 8007b64:	330b      	adds	r3, #11
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe f858 	bl	8005c1c <ld_word>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	899b      	ldrh	r3, [r3, #12]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <find_volume+0x200>
 8007b78:	230d      	movs	r3, #13
 8007b7a:	e17d      	b.n	8007e78 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	333c      	adds	r3, #60	; 0x3c
 8007b80:	3316      	adds	r3, #22
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f84a 	bl	8005c1c <ld_word>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <find_volume+0x224>
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	333c      	adds	r3, #60	; 0x3c
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe f857 	bl	8005c4c <ld_dword>
 8007b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ba4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d005      	beq.n	8007bc4 <find_volume+0x248>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	789b      	ldrb	r3, [r3, #2]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d001      	beq.n	8007bc4 <find_volume+0x248>
 8007bc0:	230d      	movs	r3, #13
 8007bc2:	e159      	b.n	8007e78 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bcc:	fb02 f303 	mul.w	r3, r2, r3
 8007bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	895b      	ldrh	r3, [r3, #10]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d008      	beq.n	8007bf8 <find_volume+0x27c>
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	895b      	ldrh	r3, [r3, #10]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	895b      	ldrh	r3, [r3, #10]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <find_volume+0x280>
 8007bf8:	230d      	movs	r3, #13
 8007bfa:	e13d      	b.n	8007e78 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	333c      	adds	r3, #60	; 0x3c
 8007c00:	3311      	adds	r3, #17
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe f80a 	bl	8005c1c <ld_word>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	891b      	ldrh	r3, [r3, #8]
 8007c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c16:	8992      	ldrh	r2, [r2, #12]
 8007c18:	0952      	lsrs	r2, r2, #5
 8007c1a:	b292      	uxth	r2, r2
 8007c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c20:	fb01 f202 	mul.w	r2, r1, r2
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <find_volume+0x2b8>
 8007c2c:	230d      	movs	r3, #13
 8007c2e:	e123      	b.n	8007e78 <find_volume+0x4fc>
 8007c30:	20000554 	.word	0x20000554

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	333c      	adds	r3, #60	; 0x3c
 8007c38:	3313      	adds	r3, #19
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd ffee 	bl	8005c1c <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <find_volume+0x2dc>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	333c      	adds	r3, #60	; 0x3c
 8007c4e:	3320      	adds	r3, #32
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fffb 	bl	8005c4c <ld_dword>
 8007c56:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	333c      	adds	r3, #60	; 0x3c
 8007c5c:	330e      	adds	r3, #14
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fd ffdc 	bl	8005c1c <ld_word>
 8007c64:	4603      	mov	r3, r0
 8007c66:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <find_volume+0x2f6>
 8007c6e:	230d      	movs	r3, #13
 8007c70:	e102      	b.n	8007e78 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	4413      	add	r3, r2
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	8911      	ldrh	r1, [r2, #8]
 8007c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7e:	8992      	ldrh	r2, [r2, #12]
 8007c80:	0952      	lsrs	r2, r2, #5
 8007c82:	b292      	uxth	r2, r2
 8007c84:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d201      	bcs.n	8007c9a <find_volume+0x31e>
 8007c96:	230d      	movs	r3, #13
 8007c98:	e0ee      	b.n	8007e78 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ca2:	8952      	ldrh	r2, [r2, #10]
 8007ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <find_volume+0x338>
 8007cb0:	230d      	movs	r3, #13
 8007cb2:	e0e1      	b.n	8007e78 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d802      	bhi.n	8007cca <find_volume+0x34e>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d802      	bhi.n	8007cda <find_volume+0x35e>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	1c9a      	adds	r2, r3, #2
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ce8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cec:	441a      	add	r2, r3
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	441a      	add	r2, r3
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d11e      	bne.n	8007d42 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	333c      	adds	r3, #60	; 0x3c
 8007d08:	332a      	adds	r3, #42	; 0x2a
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fd ff86 	bl	8005c1c <ld_word>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <find_volume+0x39e>
 8007d16:	230d      	movs	r3, #13
 8007d18:	e0ae      	b.n	8007e78 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	891b      	ldrh	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <find_volume+0x3aa>
 8007d22:	230d      	movs	r3, #13
 8007d24:	e0a8      	b.n	8007e78 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	333c      	adds	r3, #60	; 0x3c
 8007d2a:	332c      	adds	r3, #44	; 0x2c
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd ff8d 	bl	8005c4c <ld_dword>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d40:	e01f      	b.n	8007d82 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	891b      	ldrh	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <find_volume+0x3d2>
 8007d4a:	230d      	movs	r3, #13
 8007d4c:	e094      	b.n	8007e78 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d54:	441a      	add	r2, r3
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d103      	bne.n	8007d6a <find_volume+0x3ee>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	e00a      	b.n	8007d80 <find_volume+0x404>
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6c:	6a1a      	ldr	r2, [r3, #32]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	085a      	lsrs	r2, r3, #1
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d80:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	899b      	ldrh	r3, [r3, #12]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8e:	440b      	add	r3, r1
 8007d90:	3b01      	subs	r3, #1
 8007d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d94:	8989      	ldrh	r1, [r1, #12]
 8007d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d201      	bcs.n	8007da2 <find_volume+0x426>
 8007d9e:	230d      	movs	r3, #13
 8007da0:	e06a      	b.n	8007e78 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007da8:	61da      	str	r2, [r3, #28]
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2280      	movs	r2, #128	; 0x80
 8007db6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d149      	bne.n	8007e54 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	333c      	adds	r3, #60	; 0x3c
 8007dc4:	3330      	adds	r3, #48	; 0x30
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd ff28 	bl	8005c1c <ld_word>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d140      	bne.n	8007e54 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dda:	f7fe fa01 	bl	80061e0 <move_window>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d137      	bne.n	8007e54 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	2200      	movs	r2, #0
 8007de8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	333c      	adds	r3, #60	; 0x3c
 8007dee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd ff12 	bl	8005c1c <ld_word>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d127      	bne.n	8007e54 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	333c      	adds	r3, #60	; 0x3c
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd ff1f 	bl	8005c4c <ld_dword>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <find_volume+0x504>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d11e      	bne.n	8007e54 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	333c      	adds	r3, #60	; 0x3c
 8007e1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fd ff14 	bl	8005c4c <ld_dword>
 8007e24:	4603      	mov	r3, r0
 8007e26:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <find_volume+0x508>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d113      	bne.n	8007e54 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	333c      	adds	r3, #60	; 0x3c
 8007e30:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd ff09 	bl	8005c4c <ld_dword>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	333c      	adds	r3, #60	; 0x3c
 8007e44:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd feff 	bl	8005c4c <ld_dword>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007e5a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <find_volume+0x50c>)
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <find_volume+0x50c>)
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <find_volume+0x50c>)
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e72:	f7fe f94d 	bl	8006110 <clear_lock>
#endif
	return FR_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3758      	adds	r7, #88	; 0x58
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	41615252 	.word	0x41615252
 8007e84:	61417272 	.word	0x61417272
 8007e88:	20000558 	.word	0x20000558

08007e8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e96:	2309      	movs	r3, #9
 8007e98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02e      	beq.n	8007efe <validate+0x72>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02a      	beq.n	8007efe <validate+0x72>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d025      	beq.n	8007efe <validate+0x72>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	889a      	ldrh	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	88db      	ldrh	r3, [r3, #6]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d11e      	bne.n	8007efe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd ffa9 	bl	8005e1c <lock_fs>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d014      	beq.n	8007efa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fd fe02 	bl	8005ae0 <disk_status>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <validate+0x60>
				res = FR_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	e008      	b.n	8007efe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd ffa8 	bl	8005e48 <unlock_fs>
 8007ef8:	e001      	b.n	8007efe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007efa:	230f      	movs	r3, #15
 8007efc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <validate+0x7e>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	e000      	b.n	8007f0c <validate+0x80>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	6013      	str	r3, [r2, #0]
	return res;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f2e:	f107 0310 	add.w	r3, r7, #16
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fc88 	bl	8007848 <get_ldnumber>
 8007f38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da01      	bge.n	8007f44 <f_mount+0x28>
 8007f40:	230b      	movs	r3, #11
 8007f42:	e048      	b.n	8007fd6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007f44:	4a26      	ldr	r2, [pc, #152]	; (8007fe0 <f_mount+0xc4>)
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007f54:	69b8      	ldr	r0, [r7, #24]
 8007f56:	f7fe f8db 	bl	8006110 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 ff3c 	bl	8008ddc <ff_del_syncobj>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <f_mount+0x52>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e033      	b.n	8007fd6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00f      	beq.n	8007f9a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3314      	adds	r3, #20
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f000 ff06 	bl	8008d9c <ff_cre_syncobj>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <f_mount+0x7e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e01d      	b.n	8007fd6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4910      	ldr	r1, [pc, #64]	; (8007fe0 <f_mount+0xc4>)
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <f_mount+0x94>
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d001      	beq.n	8007fb4 <f_mount+0x98>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e010      	b.n	8007fd6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fb4:	f107 010c 	add.w	r1, r7, #12
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fcdc 	bl	800797c <find_volume>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	7dfa      	ldrb	r2, [r7, #23]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd ff3a 	bl	8005e48 <unlock_fs>
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000554 	.word	0x20000554

08007fe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b09a      	sub	sp, #104	; 0x68
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <f_open+0x18>
 8007ff8:	2309      	movs	r3, #9
 8007ffa:	e1d7      	b.n	80083ac <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008002:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	f107 0110 	add.w	r1, r7, #16
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fcb4 	bl	800797c <find_volume>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800801a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 81b4 	bne.w	800838c <f_open+0x3a8>
		dj.obj.fs = fs;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008028:	f44f 7000 	mov.w	r0, #512	; 0x200
 800802c:	f000 ff02 	bl	8008e34 <ff_memalloc>
 8008030:	65b8      	str	r0, [r7, #88]	; 0x58
 8008032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <f_open+0x62>
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2111      	movs	r1, #17
 800803c:	4618      	mov	r0, r3
 800803e:	f7fd ff03 	bl	8005e48 <unlock_fs>
 8008042:	2311      	movs	r3, #17
 8008044:	e1b2      	b.n	80083ac <f_open+0x3c8>
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800804a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	f107 0314 	add.w	r3, r7, #20
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fb81 	bl	800775c <follow_path>
 800805a:	4603      	mov	r3, r0
 800805c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008060:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11a      	bne.n	800809e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008068:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800806c:	b25b      	sxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	da03      	bge.n	800807a <f_open+0x96>
				res = FR_INVALID_NAME;
 8008072:	2306      	movs	r3, #6
 8008074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008078:	e011      	b.n	800809e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf14      	ite	ne
 8008084:	2301      	movne	r3, #1
 8008086:	2300      	moveq	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd fef4 	bl	8005e80 <chk_lock>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	f003 031c 	and.w	r3, r3, #28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d07f      	beq.n	80081a8 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 80080a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d10e      	bne.n	80080d6 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080b8:	f7fd ff3e 	bl	8005f38 <enq_lock>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d006      	beq.n	80080d0 <f_open+0xec>
 80080c2:	f107 0314 	add.w	r3, r7, #20
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff f898 	bl	80071fc <dir_register>
 80080cc:	4603      	mov	r3, r0
 80080ce:	e000      	b.n	80080d2 <f_open+0xee>
 80080d0:	2312      	movs	r3, #18
 80080d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	f043 0308 	orr.w	r3, r3, #8
 80080dc:	71fb      	strb	r3, [r7, #7]
 80080de:	e010      	b.n	8008102 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080e0:	7ebb      	ldrb	r3, [r7, #26]
 80080e2:	f003 0311 	and.w	r3, r3, #17
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <f_open+0x10e>
					res = FR_DENIED;
 80080ea:	2307      	movs	r3, #7
 80080ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080f0:	e007      	b.n	8008102 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <f_open+0x11e>
 80080fc:	2308      	movs	r3, #8
 80080fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008106:	2b00      	cmp	r3, #0
 8008108:	d168      	bne.n	80081dc <f_open+0x1f8>
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d063      	beq.n	80081dc <f_open+0x1f8>
				dw = GET_FATTIME();
 8008114:	f7fd fc86 	bl	8005a24 <get_fattime>
 8008118:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	330e      	adds	r3, #14
 800811e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fdd1 	bl	8005cc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	3316      	adds	r3, #22
 800812a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800812c:	4618      	mov	r0, r3
 800812e:	f7fd fdcb 	bl	8005cc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	330b      	adds	r3, #11
 8008136:	2220      	movs	r2, #32
 8008138:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe fdd3 	bl	8006cec <ld_clust>
 8008146:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800814c:	2200      	movs	r2, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fdeb 	bl	8006d2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	331c      	adds	r3, #28
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fdb4 	bl	8005cc8 <st_dword>
					fs->wflag = 1;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2201      	movs	r2, #1
 8008164:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008168:	2b00      	cmp	r3, #0
 800816a:	d037      	beq.n	80081dc <f_open+0x1f8>
						dw = fs->winsect;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	2200      	movs	r2, #0
 8008178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fadb 	bl	8006736 <remove_chain>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800818a:	2b00      	cmp	r3, #0
 800818c:	d126      	bne.n	80081dc <f_open+0x1f8>
							res = move_window(fs, dw);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe f824 	bl	80061e0 <move_window>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081a2:	3a01      	subs	r2, #1
 80081a4:	619a      	str	r2, [r3, #24]
 80081a6:	e019      	b.n	80081dc <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80081a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d115      	bne.n	80081dc <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80081b0:	7ebb      	ldrb	r3, [r7, #26]
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <f_open+0x1de>
					res = FR_NO_FILE;
 80081ba:	2304      	movs	r3, #4
 80081bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081c0:	e00c      	b.n	80081dc <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <f_open+0x1f8>
 80081cc:	7ebb      	ldrb	r3, [r7, #26]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <f_open+0x1f8>
						res = FR_DENIED;
 80081d6:	2307      	movs	r3, #7
 80081d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80081dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d128      	bne.n	8008236 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <f_open+0x212>
				mode |= FA_MODIFIED;
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80081fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	bf14      	ite	ne
 800820e:	2301      	movne	r3, #1
 8008210:	2300      	moveq	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	f107 0314 	add.w	r3, r7, #20
 800821a:	4611      	mov	r1, r2
 800821c:	4618      	mov	r0, r3
 800821e:	f7fd fead 	bl	8005f7c <inc_lock>
 8008222:	4602      	mov	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <f_open+0x252>
 8008230:	2302      	movs	r3, #2
 8008232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 80a3 	bne.w	8008386 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008244:	4611      	mov	r1, r2
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fd50 	bl	8006cec <ld_clust>
 800824c:	4602      	mov	r2, r0
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	331c      	adds	r3, #28
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd fcf8 	bl	8005c4c <ld_dword>
 800825c:	4602      	mov	r2, r0
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	88da      	ldrh	r2, [r3, #6]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3330      	adds	r3, #48	; 0x30
 8008292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd fd62 	bl	8005d62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d06e      	beq.n	8008386 <f_open+0x3a2>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06a      	beq.n	8008386 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	895b      	ldrh	r3, [r3, #10]
 80082bc:	461a      	mov	r2, r3
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	899b      	ldrh	r3, [r3, #12]
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082d4:	e016      	b.n	8008304 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe f83d 	bl	800635a <get_fat>
 80082e0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80082e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d802      	bhi.n	80082ee <f_open+0x30a>
 80082e8:	2302      	movs	r3, #2
 80082ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f4:	d102      	bne.n	80082fc <f_open+0x318>
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008304:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <f_open+0x330>
 800830c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800830e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008310:	429a      	cmp	r2, r3
 8008312:	d8e0      	bhi.n	80082d6 <f_open+0x2f2>
				}
				fp->clust = clst;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008318:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800831a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800831e:	2b00      	cmp	r3, #0
 8008320:	d131      	bne.n	8008386 <f_open+0x3a2>
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	899b      	ldrh	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832a:	fbb3 f1f2 	udiv	r1, r3, r2
 800832e:	fb01 f202 	mul.w	r2, r1, r2
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d026      	beq.n	8008386 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800833c:	4618      	mov	r0, r3
 800833e:	f7fd ffed 	bl	800631c <clust2sect>
 8008342:	64b8      	str	r0, [r7, #72]	; 0x48
 8008344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <f_open+0x36e>
						res = FR_INT_ERR;
 800834a:	2302      	movs	r3, #2
 800834c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008350:	e019      	b.n	8008386 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	899b      	ldrh	r3, [r3, #12]
 8008356:	461a      	mov	r2, r3
 8008358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800835a:	fbb3 f2f2 	udiv	r2, r3, r2
 800835e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	7858      	ldrb	r0, [r3, #1]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	2301      	movs	r3, #1
 8008376:	f7fd fbf3 	bl	8005b60 <disk_read>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <f_open+0x3a2>
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008386:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008388:	f000 fd60 	bl	8008e4c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800838c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <f_open+0x3b6>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fd fd50 	bl	8005e48 <unlock_fs>
 80083a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3768      	adds	r7, #104	; 0x68
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	; 0x30
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f107 0210 	add.w	r2, r7, #16
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff fd59 	bl	8007e8c <validate>
 80083da:	4603      	mov	r3, r0
 80083dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <f_write+0x44>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	7d5b      	ldrb	r3, [r3, #21]
 80083ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <f_write+0x58>
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f7fd fd21 	bl	8005e48 <unlock_fs>
 8008406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800840a:	e192      	b.n	8008732 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	7d1b      	ldrb	r3, [r3, #20]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <f_write+0x72>
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2107      	movs	r1, #7
 800841c:	4618      	mov	r0, r3
 800841e:	f7fd fd13 	bl	8005e48 <unlock_fs>
 8008422:	2307      	movs	r3, #7
 8008424:	e185      	b.n	8008732 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	429a      	cmp	r2, r3
 8008434:	f080 816a 	bcs.w	800870c <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	43db      	mvns	r3, r3
 800843e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008440:	e164      	b.n	800870c <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	8992      	ldrh	r2, [r2, #12]
 800844a:	fbb3 f1f2 	udiv	r1, r3, r2
 800844e:	fb01 f202 	mul.w	r2, r1, r2
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 810f 	bne.w	8008678 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	8992      	ldrh	r2, [r2, #12]
 8008462:	fbb3 f3f2 	udiv	r3, r3, r2
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	8952      	ldrh	r2, [r2, #10]
 800846a:	3a01      	subs	r2, #1
 800846c:	4013      	ands	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d14d      	bne.n	8008512 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10c      	bne.n	8008498 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d11a      	bne.n	80084c0 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe f9b6 	bl	8006800 <create_chain>
 8008494:	62b8      	str	r0, [r7, #40]	; 0x28
 8008496:	e013      	b.n	80084c0 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d007      	beq.n	80084b0 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4619      	mov	r1, r3
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7fe fa42 	bl	8006930 <clmt_clust>
 80084ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80084ae:	e007      	b.n	80084c0 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fe f9a1 	bl	8006800 <create_chain>
 80084be:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8127 	beq.w	8008716 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d109      	bne.n	80084e2 <f_write+0x12e>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2202      	movs	r2, #2
 80084d2:	755a      	strb	r2, [r3, #21]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2102      	movs	r1, #2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fd fcb5 	bl	8005e48 <unlock_fs>
 80084de:	2302      	movs	r3, #2
 80084e0:	e127      	b.n	8008732 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e8:	d109      	bne.n	80084fe <f_write+0x14a>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	755a      	strb	r2, [r3, #21]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2101      	movs	r1, #1
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fd fca7 	bl	8005e48 <unlock_fs>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e119      	b.n	8008732 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008502:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <f_write+0x15e>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008510:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7d1b      	ldrb	r3, [r3, #20]
 8008516:	b25b      	sxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	da1d      	bge.n	8008558 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	7858      	ldrb	r0, [r3, #1]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1a      	ldr	r2, [r3, #32]
 800852a:	2301      	movs	r3, #1
 800852c:	f7fd fb38 	bl	8005ba0 <disk_write>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <f_write+0x196>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	755a      	strb	r2, [r3, #21]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2101      	movs	r1, #1
 8008540:	4618      	mov	r0, r3
 8008542:	f7fd fc81 	bl	8005e48 <unlock_fs>
 8008546:	2301      	movs	r3, #1
 8008548:	e0f3      	b.n	8008732 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	7d1b      	ldrb	r3, [r3, #20]
 800854e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008552:	b2da      	uxtb	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7fd fedb 	bl	800631c <clust2sect>
 8008566:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <f_write+0x1ce>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2202      	movs	r2, #2
 8008572:	755a      	strb	r2, [r3, #21]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2102      	movs	r1, #2
 8008578:	4618      	mov	r0, r3
 800857a:	f7fd fc65 	bl	8005e48 <unlock_fs>
 800857e:	2302      	movs	r3, #2
 8008580:	e0d7      	b.n	8008732 <f_write+0x37e>
			sect += csect;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	4413      	add	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	899b      	ldrh	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	fbb3 f3f2 	udiv	r3, r3, r2
 8008596:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d048      	beq.n	8008630 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	4413      	add	r3, r2
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	8952      	ldrh	r2, [r2, #10]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d905      	bls.n	80085b8 <f_write+0x204>
					cc = fs->csize - csect;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	895b      	ldrh	r3, [r3, #10]
 80085b0:	461a      	mov	r2, r3
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	7858      	ldrb	r0, [r3, #1]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	f7fd faed 	bl	8005ba0 <disk_write>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <f_write+0x22c>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	755a      	strb	r2, [r3, #21]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2101      	movs	r1, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd fc36 	bl	8005e48 <unlock_fs>
 80085dc:	2301      	movs	r3, #1
 80085de:	e0a8      	b.n	8008732 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1a      	ldr	r2, [r3, #32]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	6a3a      	ldr	r2, [r7, #32]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d918      	bls.n	8008620 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1a      	ldr	r2, [r3, #32]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	8992      	ldrh	r2, [r2, #12]
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	18d1      	adds	r1, r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	899b      	ldrh	r3, [r3, #12]
 800860c:	461a      	mov	r2, r3
 800860e:	f7fd fb87 	bl	8005d20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	7d1b      	ldrb	r3, [r3, #20]
 8008616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	899b      	ldrh	r3, [r3, #12]
 8008624:	461a      	mov	r2, r3
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	fb02 f303 	mul.w	r3, r2, r3
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800862e:	e050      	b.n	80086d2 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	429a      	cmp	r2, r3
 8008638:	d01b      	beq.n	8008672 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008642:	429a      	cmp	r2, r3
 8008644:	d215      	bcs.n	8008672 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	7858      	ldrb	r0, [r3, #1]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008650:	2301      	movs	r3, #1
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	f7fd fa84 	bl	8005b60 <disk_read>
 8008658:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	755a      	strb	r2, [r3, #21]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2101      	movs	r1, #1
 8008668:	4618      	mov	r0, r3
 800866a:	f7fd fbed 	bl	8005e48 <unlock_fs>
 800866e:	2301      	movs	r3, #1
 8008670:	e05f      	b.n	8008732 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	899b      	ldrh	r3, [r3, #12]
 800867c:	4618      	mov	r0, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	8992      	ldrh	r2, [r2, #12]
 8008686:	fbb3 f1f2 	udiv	r1, r3, r2
 800868a:	fb01 f202 	mul.w	r2, r1, r2
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	1ac3      	subs	r3, r0, r3
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d901      	bls.n	80086a0 <f_write+0x2ec>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	8992      	ldrh	r2, [r2, #12]
 80086ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80086b2:	fb00 f202 	mul.w	r2, r0, r2
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	440b      	add	r3, r1
 80086ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd fb2e 	bl	8005d20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	4413      	add	r3, r2
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	441a      	add	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	619a      	str	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	bf38      	it	cc
 80086f2:	461a      	movcc	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	60da      	str	r2, [r3, #12]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	441a      	add	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f47f ae97 	bne.w	8008442 <f_write+0x8e>
 8008714:	e000      	b.n	8008718 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008716:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	7d1b      	ldrb	r3, [r3, #20]
 800871c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fd fb8c 	bl	8005e48 <unlock_fs>
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3730      	adds	r7, #48	; 0x30
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f107 0208 	add.w	r2, r7, #8
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fb9e 	bl	8007e8c <validate>
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d16d      	bne.n	8008836 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7d1b      	ldrb	r3, [r3, #20]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d067      	beq.n	8008836 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7d1b      	ldrb	r3, [r3, #20]
 800876a:	b25b      	sxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	da1a      	bge.n	80087a6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7858      	ldrb	r0, [r3, #1]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1a      	ldr	r2, [r3, #32]
 800877e:	2301      	movs	r3, #1
 8008780:	f7fd fa0e 	bl	8005ba0 <disk_write>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d006      	beq.n	8008798 <f_sync+0x5e>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2101      	movs	r1, #1
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd fb5a 	bl	8005e48 <unlock_fs>
 8008794:	2301      	movs	r3, #1
 8008796:	e055      	b.n	8008844 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7d1b      	ldrb	r3, [r3, #20]
 800879c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80087a6:	f7fd f93d 	bl	8005a24 <get_fattime>
 80087aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f7fd fd13 	bl	80061e0 <move_window>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d138      	bne.n	8008836 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	330b      	adds	r3, #11
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	330b      	adds	r3, #11
 80087d4:	f042 0220 	orr.w	r2, r2, #32
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	f7fe fa9f 	bl	8006d2a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f103 021c 	add.w	r2, r3, #28
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7fd fa65 	bl	8005cc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3316      	adds	r3, #22
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	4618      	mov	r0, r3
 8008806:	f7fd fa5f 	bl	8005cc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3312      	adds	r3, #18
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f7fd fa3e 	bl	8005c92 <st_word>
					fs->wflag = 1;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2201      	movs	r2, #1
 800881a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4618      	mov	r0, r3
 8008820:	f7fd fd0c 	bl	800623c <sync_fs>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7d1b      	ldrb	r3, [r3, #20]
 800882c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008830:	b2da      	uxtb	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	7dfa      	ldrb	r2, [r7, #23]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fd fb03 	bl	8005e48 <unlock_fs>
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff70 	bl	800873a <f_sync>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d11d      	bne.n	80088a0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f107 0208 	add.w	r2, r7, #8
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fb0d 	bl	8007e8c <validate>
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d111      	bne.n	80088a0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd fc09 	bl	8006098 <dec_lock>
 8008886:	4603      	mov	r3, r0
 8008888:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fad4 	bl	8005e48 <unlock_fs>
#endif
		}
	}
	return res;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b092      	sub	sp, #72	; 0x48
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80088b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	2200      	movs	r2, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff f85b 	bl	800797c <find_volume>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80088cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 8099 	bne.w	8008a08 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80088d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	69da      	ldr	r2, [r3, #28]
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	3b02      	subs	r3, #2
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d804      	bhi.n	80088f4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e089      	b.n	8008a08 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d128      	bne.n	8008952 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008900:	2302      	movs	r3, #2
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800890e:	4618      	mov	r0, r3
 8008910:	f7fd fd23 	bl	800635a <get_fat>
 8008914:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891c:	d103      	bne.n	8008926 <f_getfree+0x7c>
 800891e:	2301      	movs	r3, #1
 8008920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008924:	e063      	b.n	80089ee <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d103      	bne.n	8008934 <f_getfree+0x8a>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008932:	e05c      	b.n	80089ee <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <f_getfree+0x96>
 800893a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893c:	3301      	adds	r3, #1
 800893e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008942:	3301      	adds	r3, #1
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800894c:	429a      	cmp	r2, r3
 800894e:	d3db      	bcc.n	8008908 <f_getfree+0x5e>
 8008950:	e04d      	b.n	80089ee <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
 8008962:	2300      	movs	r3, #0
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	2b00      	cmp	r3, #0
 800896a:	d113      	bne.n	8008994 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800896c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	63ba      	str	r2, [r7, #56]	; 0x38
 8008974:	4619      	mov	r1, r3
 8008976:	f7fd fc33 	bl	80061e0 <move_window>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008984:	2b00      	cmp	r3, #0
 8008986:	d131      	bne.n	80089ec <f_getfree+0x142>
							p = fs->win;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	333c      	adds	r3, #60	; 0x3c
 800898c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d10f      	bne.n	80089bc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800899c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800899e:	f7fd f93d 	bl	8005c1c <ld_word>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <f_getfree+0x104>
 80089a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089aa:	3301      	adds	r3, #1
 80089ac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	3302      	adds	r3, #2
 80089b2:	633b      	str	r3, [r7, #48]	; 0x30
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	3b02      	subs	r3, #2
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ba:	e010      	b.n	80089de <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80089bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089be:	f7fd f945 	bl	8005c4c <ld_dword>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <f_getfree+0x128>
 80089cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ce:	3301      	adds	r3, #1
 80089d0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	3304      	adds	r3, #4
 80089d6:	633b      	str	r3, [r7, #48]	; 0x30
 80089d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089da:	3b04      	subs	r3, #4
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	3b01      	subs	r3, #1
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1bd      	bne.n	8008966 <f_getfree+0xbc>
 80089ea:	e000      	b.n	80089ee <f_getfree+0x144>
							if (res != FR_OK) break;
 80089ec:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f8:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	791a      	ldrb	r2, [r3, #4]
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	f042 0201 	orr.w	r2, r2, #1
 8008a04:	b2d2      	uxtb	r2, r2
 8008a06:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fd fa19 	bl	8005e48 <unlock_fs>
 8008a16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3748      	adds	r7, #72	; 0x48
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	2b0a      	cmp	r3, #10
 8008a32:	d103      	bne.n	8008a3c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008a34:	210d      	movs	r1, #13
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff fff3 	bl	8008a22 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	db25      	blt.n	8008a94 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	60fa      	str	r2, [r7, #12]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b3c      	cmp	r3, #60	; 0x3c
 8008a5a:	dd12      	ble.n	8008a82 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 010c 	add.w	r1, r3, #12
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f107 0308 	add.w	r3, r7, #8
 8008a6c:	f7ff fca2 	bl	80083b4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d101      	bne.n	8008a7c <putc_bfd+0x5a>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e001      	b.n	8008a80 <putc_bfd+0x5e>
 8008a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a80:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	609a      	str	r2, [r3, #8]
 8008a92:	e000      	b.n	8008a96 <putc_bfd+0x74>
	if (i < 0) return;
 8008a94:	bf00      	nop
}
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	db16      	blt.n	8008ada <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f103 010c 	add.w	r1, r3, #12
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	f7ff fc78 	bl	80083b4 <f_write>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d107      	bne.n	8008ada <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d102      	bne.n	8008ada <putc_flush+0x3e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	e001      	b.n	8008ade <putc_flush+0x42>
	return EOF;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	605a      	str	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	609a      	str	r2, [r3, #8]
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b096      	sub	sp, #88	; 0x58
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008b1a:	f107 030c 	add.w	r3, r7, #12
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff ffe0 	bl	8008ae6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008b26:	e009      	b.n	8008b3c <f_puts+0x2c>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	607a      	str	r2, [r7, #4]
 8008b2e:	781a      	ldrb	r2, [r3, #0]
 8008b30:	f107 030c 	add.w	r3, r7, #12
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff73 	bl	8008a22 <putc_bfd>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f1      	bne.n	8008b28 <f_puts+0x18>
	return putc_flush(&pb);
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff ffa7 	bl	8008a9c <putc_flush>
 8008b4e:	4603      	mov	r3, r0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3758      	adds	r7, #88	; 0x58
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b6e:	4b1f      	ldr	r3, [pc, #124]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b70:	7a5b      	ldrb	r3, [r3, #9]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d131      	bne.n	8008bdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b78:	4b1c      	ldr	r3, [pc, #112]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b7a:	7a5b      	ldrb	r3, [r3, #9]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b82:	2100      	movs	r1, #0
 8008b84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b88:	7a5b      	ldrb	r3, [r3, #9]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	4a17      	ldr	r2, [pc, #92]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b96:	4b15      	ldr	r3, [pc, #84]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008b98:	7a5b      	ldrb	r3, [r3, #9]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008ba0:	4413      	add	r3, r2
 8008ba2:	79fa      	ldrb	r2, [r7, #7]
 8008ba4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008ba8:	7a5b      	ldrb	r3, [r3, #9]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	b2d1      	uxtb	r1, r2
 8008bb0:	4a0e      	ldr	r2, [pc, #56]	; (8008bec <FATFS_LinkDriverEx+0x94>)
 8008bb2:	7251      	strb	r1, [r2, #9]
 8008bb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bb6:	7dbb      	ldrb	r3, [r7, #22]
 8008bb8:	3330      	adds	r3, #48	; 0x30
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	223a      	movs	r2, #58	; 0x3a
 8008bc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	222f      	movs	r2, #47	; 0x2f
 8008bce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3303      	adds	r3, #3
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	2000057c 	.word	0x2000057c

08008bf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ffaa 	bl	8008b58 <FATFS_LinkDriverEx>
 8008c04:	4603      	mov	r3, r0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c20:	d802      	bhi.n	8008c28 <ff_convert+0x18>
		c = chr;
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	81fb      	strh	r3, [r7, #14]
 8008c26:	e025      	b.n	8008c74 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2bff      	cmp	r3, #255	; 0xff
 8008c32:	d805      	bhi.n	8008c40 <ff_convert+0x30>
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	3b80      	subs	r3, #128	; 0x80
 8008c38:	4a12      	ldr	r2, [pc, #72]	; (8008c84 <ff_convert+0x74>)
 8008c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c3e:	e000      	b.n	8008c42 <ff_convert+0x32>
 8008c40:	2300      	movs	r3, #0
 8008c42:	81fb      	strh	r3, [r7, #14]
 8008c44:	e016      	b.n	8008c74 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008c46:	2300      	movs	r3, #0
 8008c48:	81fb      	strh	r3, [r7, #14]
 8008c4a:	e009      	b.n	8008c60 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	; (8008c84 <ff_convert+0x74>)
 8008c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d006      	beq.n	8008c68 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c5a:	89fb      	ldrh	r3, [r7, #14]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	81fb      	strh	r3, [r7, #14]
 8008c60:	89fb      	ldrh	r3, [r7, #14]
 8008c62:	2b7f      	cmp	r3, #127	; 0x7f
 8008c64:	d9f2      	bls.n	8008c4c <ff_convert+0x3c>
 8008c66:	e000      	b.n	8008c6a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c68:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
 8008c6c:	3380      	adds	r3, #128	; 0x80
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c74:	89fb      	ldrh	r3, [r7, #14]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	0800ca7c 	.word	0x0800ca7c

08008c88 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	d201      	bcs.n	8008c9e <ff_wtoupper+0x16>
 8008c9a:	4b3e      	ldr	r3, [pc, #248]	; (8008d94 <ff_wtoupper+0x10c>)
 8008c9c:	e000      	b.n	8008ca0 <ff_wtoupper+0x18>
 8008c9e:	4b3e      	ldr	r3, [pc, #248]	; (8008d98 <ff_wtoupper+0x110>)
 8008ca0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	1c9a      	adds	r2, r3, #2
 8008ca6:	617a      	str	r2, [r7, #20]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008cac:	8a7b      	ldrh	r3, [r7, #18]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d068      	beq.n	8008d84 <ff_wtoupper+0xfc>
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	8a7b      	ldrh	r3, [r7, #18]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d364      	bcc.n	8008d84 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	1c9a      	adds	r2, r3, #2
 8008cbe:	617a      	str	r2, [r7, #20]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	823b      	strh	r3, [r7, #16]
 8008cc4:	8a3b      	ldrh	r3, [r7, #16]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	81fb      	strh	r3, [r7, #14]
 8008cca:	8a3b      	ldrh	r3, [r7, #16]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	8a79      	ldrh	r1, [r7, #18]
 8008cd4:	8a3b      	ldrh	r3, [r7, #16]
 8008cd6:	440b      	add	r3, r1
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	da49      	bge.n	8008d70 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	2b08      	cmp	r3, #8
 8008ce0:	d84f      	bhi.n	8008d82 <ff_wtoupper+0xfa>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <ff_wtoupper+0x60>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d1f 	.word	0x08008d1f
 8008cf0:	08008d35 	.word	0x08008d35
 8008cf4:	08008d3d 	.word	0x08008d3d
 8008cf8:	08008d45 	.word	0x08008d45
 8008cfc:	08008d4d 	.word	0x08008d4d
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d65 	.word	0x08008d65
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008d0c:	88fa      	ldrh	r2, [r7, #6]
 8008d0e:	8a7b      	ldrh	r3, [r7, #18]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	80fb      	strh	r3, [r7, #6]
 8008d1c:	e027      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	8a7b      	ldrh	r3, [r7, #18]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	88fa      	ldrh	r2, [r7, #6]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	80fb      	strh	r3, [r7, #6]
 8008d32:	e01c      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008d34:	88fb      	ldrh	r3, [r7, #6]
 8008d36:	3b10      	subs	r3, #16
 8008d38:	80fb      	strh	r3, [r7, #6]
 8008d3a:	e018      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	3b20      	subs	r3, #32
 8008d40:	80fb      	strh	r3, [r7, #6]
 8008d42:	e014      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	3b30      	subs	r3, #48	; 0x30
 8008d48:	80fb      	strh	r3, [r7, #6]
 8008d4a:	e010      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	3b1a      	subs	r3, #26
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	e00c      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	3308      	adds	r3, #8
 8008d58:	80fb      	strh	r3, [r7, #6]
 8008d5a:	e008      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	3b50      	subs	r3, #80	; 0x50
 8008d60:	80fb      	strh	r3, [r7, #6]
 8008d62:	e004      	b.n	8008d6e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008d6a:	80fb      	strh	r3, [r7, #6]
 8008d6c:	bf00      	nop
			}
			break;
 8008d6e:	e008      	b.n	8008d82 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008d70:	89fb      	ldrh	r3, [r7, #14]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d195      	bne.n	8008ca2 <ff_wtoupper+0x1a>
 8008d76:	8a3b      	ldrh	r3, [r7, #16]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008d80:	e78f      	b.n	8008ca2 <ff_wtoupper+0x1a>
			break;
 8008d82:	bf00      	nop
	}

	return chr;
 8008d84:	88fb      	ldrh	r3, [r7, #6]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	0800cb7c 	.word	0x0800cb7c
 8008d98:	0800cd70 	.word	0x0800cd70

08008d9c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	2300      	movs	r3, #0
 8008dae:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008db0:	f107 030c 	add.w	r3, r7, #12
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f8e4 	bl	8008f84 <osSemaphoreCreate>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf14      	ite	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	2300      	moveq	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	617b      	str	r3, [r7, #20]

    return ret;
 8008dd2:	697b      	ldr	r3, [r7, #20]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f983 	bl	80090f0 <osSemaphoreDelete>
#endif
    return 1;
 8008dea:	2301      	movs	r3, #1
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f8ef 	bl	8008fe8 <osSemaphoreWait>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008e14:	68fb      	ldr	r3, [r7, #12]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f92c 	bl	8009084 <osSemaphoreRelease>
#endif
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 fadb 	bl	800b3f8 <pvPortMalloc>
 8008e42:	4603      	mov	r3, r0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f002 fb9b 	bl	800b590 <vPortFree>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	4603      	mov	r3, r0
 8008e6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e74:	2b84      	cmp	r3, #132	; 0x84
 8008e76:	d005      	beq.n	8008e84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	3303      	adds	r3, #3
 8008e82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e84:	68fb      	ldr	r3, [r7, #12]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e98:	f3ef 8305 	mrs	r3, IPSR
 8008e9c:	607b      	str	r3, [r7, #4]
  return(result);
 8008e9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf14      	ite	ne
 8008ea4:	2301      	movne	r3, #1
 8008ea6:	2300      	moveq	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008eba:	f001 fa19 	bl	800a2f0 <vTaskStartScheduler>
  
  return osOK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec6:	b089      	sub	sp, #36	; 0x24
 8008ec8:	af04      	add	r7, sp, #16
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <osThreadCreate+0x54>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01c      	beq.n	8008f18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685c      	ldr	r4, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691e      	ldr	r6, [r3, #16]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff ffb6 	bl	8008e62 <makeFreeRtosPriority>
 8008ef6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f00:	9202      	str	r2, [sp, #8]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	9100      	str	r1, [sp, #0]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 ff7f 	bl	8009e10 <xTaskCreateStatic>
 8008f12:	4603      	mov	r3, r0
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	e01c      	b.n	8008f52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685c      	ldr	r4, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff ff98 	bl	8008e62 <makeFreeRtosPriority>
 8008f32:	4602      	mov	r2, r0
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	9200      	str	r2, [sp, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	4632      	mov	r2, r6
 8008f40:	4629      	mov	r1, r5
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 ffc1 	bl	8009eca <xTaskCreate>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d001      	beq.n	8008f52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008f52:	68fb      	ldr	r3, [r7, #12]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <osDelay+0x16>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	e000      	b.n	8008f74 <osDelay+0x18>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f8f5 	bl	800a164 <vTaskDelay>
  
  return osOK;
 8008f7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00f      	beq.n	8008fb6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d10a      	bne.n	8008fb2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	9200      	str	r2, [sp, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f000 f9d1 	bl	8009350 <xQueueGenericCreateStatic>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	e016      	b.n	8008fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e014      	b.n	8008fe0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d110      	bne.n	8008fde <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	f000 fa3d 	bl	8009440 <xQueueGenericCreate>
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <osSemaphoreCreate+0x56>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fa8d 	bl	80094f4 <xQueueGenericSend>
      return sema;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	e000      	b.n	8008fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008fde:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ffc:	2380      	movs	r3, #128	; 0x80
 8008ffe:	e03a      	b.n	8009076 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900a:	d103      	bne.n	8009014 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800900c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e009      	b.n	8009028 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d006      	beq.n	8009028 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <osSemaphoreWait+0x40>
      ticks = 1;
 8009024:	2301      	movs	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009028:	f7ff ff33 	bl	8008e92 <inHandlerMode>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d017      	beq.n	8009062 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	461a      	mov	r2, r3
 8009038:	2100      	movs	r1, #0
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fcf2 	bl	8009a24 <xQueueReceiveFromISR>
 8009040:	4603      	mov	r3, r0
 8009042:	2b01      	cmp	r3, #1
 8009044:	d001      	beq.n	800904a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009046:	23ff      	movs	r3, #255	; 0xff
 8009048:	e015      	b.n	8009076 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d011      	beq.n	8009074 <osSemaphoreWait+0x8c>
 8009050:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <osSemaphoreWait+0x98>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	e008      	b.n	8009074 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009062:	68f9      	ldr	r1, [r7, #12]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fbd1 	bl	800980c <xQueueSemaphoreTake>
 800906a:	4603      	mov	r3, r0
 800906c:	2b01      	cmp	r3, #1
 800906e:	d001      	beq.n	8009074 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009070:	23ff      	movs	r3, #255	; 0xff
 8009072:	e000      	b.n	8009076 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009090:	2300      	movs	r3, #0
 8009092:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009094:	f7ff fefd 	bl	8008e92 <inHandlerMode>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d016      	beq.n	80090cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fb23 	bl	80096f0 <xQueueGiveFromISR>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d001      	beq.n	80090b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80090b0:	23ff      	movs	r3, #255	; 0xff
 80090b2:	e017      	b.n	80090e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d013      	beq.n	80090e2 <osSemaphoreRelease+0x5e>
 80090ba:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <osSemaphoreRelease+0x68>)
 80090bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	e00a      	b.n	80090e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80090cc:	2300      	movs	r3, #0
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa0e 	bl	80094f4 <xQueueGenericSend>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80090de:	23ff      	movs	r3, #255	; 0xff
 80090e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80090f8:	f7ff fecb 	bl	8008e92 <inHandlerMode>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009102:	2382      	movs	r3, #130	; 0x82
 8009104:	e003      	b.n	800910e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fd0c 	bl	8009b24 <vQueueDelete>

  return osOK; 
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f103 0208 	add.w	r2, r3, #8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800912e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f103 0208 	add.w	r2, r3, #8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f103 0208 	add.w	r2, r3, #8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	601a      	str	r2, [r3, #0]
}
 80091ac:	bf00      	nop
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ce:	d103      	bne.n	80091d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e00c      	b.n	80091f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3308      	adds	r3, #8
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e002      	b.n	80091e6 <vListInsert+0x2e>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d2f6      	bcs.n	80091e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6892      	ldr	r2, [r2, #8]
 8009240:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6852      	ldr	r2, [r2, #4]
 800924a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d103      	bne.n	800925e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
	...

08009280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092aa:	f001 ff83 	bl	800b1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	441a      	add	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092da:	3b01      	subs	r3, #1
 80092dc:	68f9      	ldr	r1, [r7, #12]
 80092de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d114      	bne.n	800932a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01a      	beq.n	800933e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3310      	adds	r3, #16
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fa41 	bl	800a794 <xTaskRemoveFromEventList>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <xQueueGenericReset+0xcc>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	e009      	b.n	800933e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3310      	adds	r3, #16
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fef1 	bl	8009116 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3324      	adds	r3, #36	; 0x24
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff feec 	bl	8009116 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800933e:	f001 ff69 	bl	800b214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009342:	2301      	movs	r3, #1
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08e      	sub	sp, #56	; 0x38
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <xQueueGenericCreateStatic+0x52>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <xQueueGenericCreateStatic+0x56>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueGenericCreateStatic+0x58>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	623b      	str	r3, [r7, #32]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <xQueueGenericCreateStatic+0x7e>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <xQueueGenericCreateStatic+0x82>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <xQueueGenericCreateStatic+0x84>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	61fb      	str	r3, [r7, #28]
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ee:	2348      	movs	r3, #72	; 0x48
 80093f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b48      	cmp	r3, #72	; 0x48
 80093f6:	d00a      	beq.n	800940e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61bb      	str	r3, [r7, #24]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800940e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00d      	beq.n	8009436 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4613      	mov	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f83f 	bl	80094b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009438:	4618      	mov	r0, r3
 800943a:	3730      	adds	r7, #48	; 0x30
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	; 0x28
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	613b      	str	r3, [r7, #16]
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	3348      	adds	r3, #72	; 0x48
 8009478:	4618      	mov	r0, r3
 800947a:	f001 ffbd 	bl	800b3f8 <pvPortMalloc>
 800947e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d011      	beq.n	80094aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	3348      	adds	r3, #72	; 0x48
 800948e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009498:	79fa      	ldrb	r2, [r7, #7]
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f805 	bl	80094b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094aa:	69bb      	ldr	r3, [r7, #24]
	}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094e2:	2101      	movs	r1, #1
 80094e4:	69b8      	ldr	r0, [r7, #24]
 80094e6:	f7ff fecb 	bl	8009280 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08e      	sub	sp, #56	; 0x38
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009502:	2300      	movs	r3, #0
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <xQueueGenericSend+0x32>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <xQueueGenericSend+0x40>
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <xQueueGenericSend+0x44>
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <xQueueGenericSend+0x46>
 8009538:	2300      	movs	r3, #0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <xQueueGenericSend+0x60>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d103      	bne.n	8009562 <xQueueGenericSend+0x6e>
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <xQueueGenericSend+0x72>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <xQueueGenericSend+0x74>
 8009566:	2300      	movs	r3, #0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <xQueueGenericSend+0x8e>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	623b      	str	r3, [r7, #32]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009582:	f001 fac7 	bl	800ab14 <xTaskGetSchedulerState>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <xQueueGenericSend+0x9e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <xQueueGenericSend+0xa2>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xQueueGenericSend+0xa4>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61fb      	str	r3, [r7, #28]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095b2:	f001 fdff 	bl	800b1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095be:	429a      	cmp	r2, r3
 80095c0:	d302      	bcc.n	80095c8 <xQueueGenericSend+0xd4>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d129      	bne.n	800961c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	68b9      	ldr	r1, [r7, #8]
 80095cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ce:	f000 fae4 	bl	8009b9a <prvCopyDataToQueue>
 80095d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d010      	beq.n	80095fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f8d7 	bl	800a794 <xTaskRemoveFromEventList>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d013      	beq.n	8009614 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095ec:	4b3f      	ldr	r3, [pc, #252]	; (80096ec <xQueueGenericSend+0x1f8>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	e00a      	b.n	8009614 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009604:	4b39      	ldr	r3, [pc, #228]	; (80096ec <xQueueGenericSend+0x1f8>)
 8009606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009614:	f001 fdfe 	bl	800b214 <vPortExitCritical>
				return pdPASS;
 8009618:	2301      	movs	r3, #1
 800961a:	e063      	b.n	80096e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d103      	bne.n	800962a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009622:	f001 fdf7 	bl	800b214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009626:	2300      	movs	r3, #0
 8009628:	e05c      	b.n	80096e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	4618      	mov	r0, r3
 8009636:	f001 f90f 	bl	800a858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800963e:	f001 fde9 	bl	800b214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009642:	f000 febf 	bl	800a3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009646:	f001 fdb5 	bl	800b1b4 <vPortEnterCritical>
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009650:	b25b      	sxtb	r3, r3
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009656:	d103      	bne.n	8009660 <xQueueGenericSend+0x16c>
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009666:	b25b      	sxtb	r3, r3
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966c:	d103      	bne.n	8009676 <xQueueGenericSend+0x182>
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009676:	f001 fdcd 	bl	800b214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800967a:	1d3a      	adds	r2, r7, #4
 800967c:	f107 0314 	add.w	r3, r7, #20
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f8fe 	bl	800a884 <xTaskCheckForTimeOut>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d124      	bne.n	80096d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800968e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009690:	f000 fb7b 	bl	8009d8a <prvIsQueueFull>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d018      	beq.n	80096cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	3310      	adds	r3, #16
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 f852 	bl	800a74c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096aa:	f000 fb06 	bl	8009cba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ae:	f000 fe97 	bl	800a3e0 <xTaskResumeAll>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f47f af7c 	bne.w	80095b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <xQueueGenericSend+0x1f8>)
 80096bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	e772      	b.n	80095b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ce:	f000 faf4 	bl	8009cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096d2:	f000 fe85 	bl	800a3e0 <xTaskResumeAll>
 80096d6:	e76c      	b.n	80095b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096da:	f000 faee 	bl	8009cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096de:	f000 fe7f 	bl	800a3e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3738      	adds	r7, #56	; 0x38
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	e000ed04 	.word	0xe000ed04

080096f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	623b      	str	r3, [r7, #32]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	61fb      	str	r3, [r7, #28]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <xQueueGiveFromISR+0x58>
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <xQueueGiveFromISR+0x5c>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <xQueueGiveFromISR+0x5e>
 800974c:	2300      	movs	r3, #0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	61bb      	str	r3, [r7, #24]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009768:	f001 fe06 	bl	800b378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800976c:	f3ef 8211 	mrs	r2, BASEPRI
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	617a      	str	r2, [r7, #20]
 8009782:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009784:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009794:	429a      	cmp	r2, r3
 8009796:	d22b      	bcs.n	80097f0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800979e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b2:	d112      	bne.n	80097da <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d016      	beq.n	80097ea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	3324      	adds	r3, #36	; 0x24
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 ffe7 	bl	800a794 <xTaskRemoveFromEventList>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00e      	beq.n	80097ea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00b      	beq.n	80097ea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e007      	b.n	80097ea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097de:	3301      	adds	r3, #1
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	b25a      	sxtb	r2, r3
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097ea:	2301      	movs	r3, #1
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34
 80097ee:	e001      	b.n	80097f4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097f0:	2300      	movs	r3, #0
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009802:	4618      	mov	r0, r3
 8009804:	3738      	adds	r7, #56	; 0x38
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08e      	sub	sp, #56	; 0x38
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009816:	2300      	movs	r3, #0
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800981e:	2300      	movs	r3, #0
 8009820:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	623b      	str	r3, [r7, #32]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	61fb      	str	r3, [r7, #28]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800985c:	f001 f95a 	bl	800ab14 <xTaskGetSchedulerState>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <xQueueSemaphoreTake+0x60>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <xQueueSemaphoreTake+0x64>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <xQueueSemaphoreTake+0x66>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	61bb      	str	r3, [r7, #24]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988c:	f001 fc92 	bl	800b1b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	2b00      	cmp	r3, #0
 800989a:	d024      	beq.n	80098e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80098ac:	f001 fada 	bl	800ae64 <pvTaskIncrementMutexHeldCount>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00f      	beq.n	80098de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	3310      	adds	r3, #16
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 ff66 	bl	800a794 <xTaskRemoveFromEventList>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098ce:	4b54      	ldr	r3, [pc, #336]	; (8009a20 <xQueueSemaphoreTake+0x214>)
 80098d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098de:	f001 fc99 	bl	800b214 <vPortExitCritical>
				return pdPASS;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e097      	b.n	8009a16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d111      	bne.n	8009910 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009908:	f001 fc84 	bl	800b214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800990c:	2300      	movs	r3, #0
 800990e:	e082      	b.n	8009a16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009916:	f107 030c 	add.w	r3, r7, #12
 800991a:	4618      	mov	r0, r3
 800991c:	f000 ff9c 	bl	800a858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009924:	f001 fc76 	bl	800b214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009928:	f000 fd4c 	bl	800a3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800992c:	f001 fc42 	bl	800b1b4 <vPortEnterCritical>
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009936:	b25b      	sxtb	r3, r3
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800993c:	d103      	bne.n	8009946 <xQueueSemaphoreTake+0x13a>
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800994c:	b25b      	sxtb	r3, r3
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009952:	d103      	bne.n	800995c <xQueueSemaphoreTake+0x150>
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800995c:	f001 fc5a 	bl	800b214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009960:	463a      	mov	r2, r7
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f000 ff8b 	bl	800a884 <xTaskCheckForTimeOut>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d132      	bne.n	80099da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009976:	f000 f9f2 	bl	8009d5e <prvIsQueueEmpty>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d026      	beq.n	80099ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d109      	bne.n	800999c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009988:	f001 fc14 	bl	800b1b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	4618      	mov	r0, r3
 8009992:	f001 f8dd 	bl	800ab50 <xTaskPriorityInherit>
 8009996:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009998:	f001 fc3c 	bl	800b214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	3324      	adds	r3, #36	; 0x24
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fed1 	bl	800a74c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099ac:	f000 f985 	bl	8009cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099b0:	f000 fd16 	bl	800a3e0 <xTaskResumeAll>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f47f af68 	bne.w	800988c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80099bc:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <xQueueSemaphoreTake+0x214>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	e75e      	b.n	800988c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80099ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099d0:	f000 f973 	bl	8009cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099d4:	f000 fd04 	bl	800a3e0 <xTaskResumeAll>
 80099d8:	e758      	b.n	800988c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80099da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099dc:	f000 f96d 	bl	8009cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099e0:	f000 fcfe 	bl	800a3e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099e6:	f000 f9ba 	bl	8009d5e <prvIsQueueEmpty>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f43f af4d 	beq.w	800988c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00d      	beq.n	8009a14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80099f8:	f001 fbdc 	bl	800b1b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80099fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099fe:	f000 f8b4 	bl	8009b6a <prvGetDisinheritPriorityAfterTimeout>
 8009a02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 f99c 	bl	800ad48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a10:	f001 fc00 	bl	800b214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3738      	adds	r7, #56	; 0x38
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	e000ed04 	.word	0xe000ed04

08009a24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08e      	sub	sp, #56	; 0x38
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	623b      	str	r3, [r7, #32]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <xQueueReceiveFromISR+0x3a>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <xQueueReceiveFromISR+0x3e>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <xQueueReceiveFromISR+0x40>
 8009a62:	2300      	movs	r3, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	61fb      	str	r3, [r7, #28]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a7e:	f001 fc7b 	bl	800b378 <vPortValidateInterruptPriority>
	__asm volatile
 8009a82:	f3ef 8211 	mrs	r2, BASEPRI
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	61ba      	str	r2, [r7, #24]
 8009a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d02f      	beq.n	8009b0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ab8:	f000 f8d9 	bl	8009c6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	1e5a      	subs	r2, r3, #1
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009acc:	d112      	bne.n	8009af4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d016      	beq.n	8009b04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	3310      	adds	r3, #16
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fe5a 	bl	800a794 <xTaskRemoveFromEventList>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	e007      	b.n	8009b04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af8:	3301      	adds	r3, #1
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	b25a      	sxtb	r2, r3
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b04:	2301      	movs	r3, #1
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	e001      	b.n	8009b0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f383 8811 	msr	BASEPRI, r3
}
 8009b18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3738      	adds	r7, #56	; 0x38
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <vQueueDelete+0x28>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	60bb      	str	r3, [r7, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f935 	bl	8009dbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f001 fd17 	bl	800b590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d006      	beq.n	8009b88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f1c3 0307 	rsb	r3, r3, #7
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e001      	b.n	8009b8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d14d      	bne.n	8009c5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 f839 	bl	800ac3c <xTaskPriorityDisinherit>
 8009bca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	609a      	str	r2, [r3, #8]
 8009bd2:	e043      	b.n	8009c5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d119      	bne.n	8009c0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6858      	ldr	r0, [r3, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	461a      	mov	r2, r3
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	f001 fe7b 	bl	800b8e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d32b      	bcc.n	8009c5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	e026      	b.n	8009c5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68d8      	ldr	r0, [r3, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	461a      	mov	r2, r3
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	f001 fe61 	bl	800b8e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	425b      	negs	r3, r3
 8009c28:	441a      	add	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d207      	bcs.n	8009c4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689a      	ldr	r2, [r3, #8]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	425b      	negs	r3, r3
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d105      	bne.n	8009c5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c64:	697b      	ldr	r3, [r7, #20]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d018      	beq.n	8009cb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	441a      	add	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d303      	bcc.n	8009ca2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68d9      	ldr	r1, [r3, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	461a      	mov	r2, r3
 8009cac:	6838      	ldr	r0, [r7, #0]
 8009cae:	f001 fe17 	bl	800b8e0 <memcpy>
	}
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cc2:	f001 fa77 	bl	800b1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ccc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cce:	e011      	b.n	8009cf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d012      	beq.n	8009cfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3324      	adds	r3, #36	; 0x24
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fd59 	bl	800a794 <xTaskRemoveFromEventList>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ce8:	f000 fe2e 	bl	800a948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dce9      	bgt.n	8009cd0 <prvUnlockQueue+0x16>
 8009cfc:	e000      	b.n	8009d00 <prvUnlockQueue+0x46>
					break;
 8009cfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	22ff      	movs	r2, #255	; 0xff
 8009d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d08:	f001 fa84 	bl	800b214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d0c:	f001 fa52 	bl	800b1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d18:	e011      	b.n	8009d3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d012      	beq.n	8009d48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	3310      	adds	r3, #16
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fd34 	bl	800a794 <xTaskRemoveFromEventList>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d32:	f000 fe09 	bl	800a948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dce9      	bgt.n	8009d1a <prvUnlockQueue+0x60>
 8009d46:	e000      	b.n	8009d4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d52:	f001 fa5f 	bl	800b214 <vPortExitCritical>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d66:	f001 fa25 	bl	800b1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e001      	b.n	8009d7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 fa4a 	bl	800b214 <vPortExitCritical>

	return xReturn;
 8009d80:	68fb      	ldr	r3, [r7, #12]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d92:	f001 fa0f 	bl	800b1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d102      	bne.n	8009da8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	e001      	b.n	8009dac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dac:	f001 fa32 	bl	800b214 <vPortExitCritical>

	return xReturn;
 8009db0:	68fb      	ldr	r3, [r7, #12]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	e016      	b.n	8009df8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009dca:	4a10      	ldr	r2, [pc, #64]	; (8009e0c <vQueueUnregisterQueue+0x50>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d10b      	bne.n	8009df2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009dda:	4a0c      	ldr	r2, [pc, #48]	; (8009e0c <vQueueUnregisterQueue+0x50>)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2100      	movs	r1, #0
 8009de0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009de4:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <vQueueUnregisterQueue+0x50>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	2200      	movs	r2, #0
 8009dee:	605a      	str	r2, [r3, #4]
				break;
 8009df0:	e006      	b.n	8009e00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b07      	cmp	r3, #7
 8009dfc:	d9e5      	bls.n	8009dca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009dfe:	bf00      	nop
 8009e00:	bf00      	nop
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000588 	.word	0x20000588

08009e10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08e      	sub	sp, #56	; 0x38
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	623b      	str	r3, [r7, #32]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	61fb      	str	r3, [r7, #28]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e56:	23a0      	movs	r3, #160	; 0xa0
 8009e58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2ba0      	cmp	r3, #160	; 0xa0
 8009e5e:	d00a      	beq.n	8009e76 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61bb      	str	r3, [r7, #24]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d01e      	beq.n	8009ebc <xTaskCreateStatic+0xac>
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01b      	beq.n	8009ebc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	2202      	movs	r2, #2
 8009e92:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e96:	2300      	movs	r3, #0
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	9302      	str	r3, [sp, #8]
 8009e9e:	f107 0314 	add.w	r3, r7, #20
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	68b9      	ldr	r1, [r7, #8]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 f850 	bl	8009f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eb6:	f000 f8eb 	bl	800a090 <prvAddNewTaskToReadyList>
 8009eba:	e001      	b.n	8009ec0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ec0:	697b      	ldr	r3, [r7, #20]
	}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3728      	adds	r7, #40	; 0x28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08c      	sub	sp, #48	; 0x30
 8009ece:	af04      	add	r7, sp, #16
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 fa8a 	bl	800b3f8 <pvPortMalloc>
 8009ee4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009eec:	20a0      	movs	r0, #160	; 0xa0
 8009eee:	f001 fa83 	bl	800b3f8 <pvPortMalloc>
 8009ef2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
 8009f00:	e005      	b.n	8009f0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f02:	6978      	ldr	r0, [r7, #20]
 8009f04:	f001 fb44 	bl	800b590 <vPortFree>
 8009f08:	e001      	b.n	8009f0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d017      	beq.n	8009f44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f1c:	88fa      	ldrh	r2, [r7, #6]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	9302      	str	r3, [sp, #8]
 8009f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 f80e 	bl	8009f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f38:	69f8      	ldr	r0, [r7, #28]
 8009f3a:	f000 f8a9 	bl	800a090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	e002      	b.n	8009f4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <prvInitialiseNewTask+0x48>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	617b      	str	r3, [r7, #20]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d01f      	beq.n	8009fe2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	e012      	b.n	8009fce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	4413      	add	r3, r2
 8009fae:	7819      	ldrb	r1, [r3, #0]
 8009fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3334      	adds	r3, #52	; 0x34
 8009fb8:	460a      	mov	r2, r1
 8009fba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	61fb      	str	r3, [r7, #28]
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	2b0f      	cmp	r3, #15
 8009fd2:	d9e9      	bls.n	8009fa8 <prvInitialiseNewTask+0x54>
 8009fd4:	e000      	b.n	8009fd8 <prvInitialiseNewTask+0x84>
			{
				break;
 8009fd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fe0:	e003      	b.n	8009fea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	2b06      	cmp	r3, #6
 8009fee:	d901      	bls.n	8009ff4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ff0:	2306      	movs	r3, #6
 8009ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ffe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	2200      	movs	r2, #0
 800a004:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	3304      	adds	r3, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff f8a3 	bl	8009156 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	3318      	adds	r3, #24
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff f89e 	bl	8009156 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a01e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	f1c3 0207 	rsb	r2, r3, #7
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	334c      	adds	r3, #76	; 0x4c
 800a044:	224c      	movs	r2, #76	; 0x4c
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 fbbf 	bl	800b7cc <memset>
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	4a0c      	ldr	r2, [pc, #48]	; (800a084 <prvInitialiseNewTask+0x130>)
 800a052:	651a      	str	r2, [r3, #80]	; 0x50
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <prvInitialiseNewTask+0x134>)
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	4a0b      	ldr	r2, [pc, #44]	; (800a08c <prvInitialiseNewTask+0x138>)
 800a05e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	69b8      	ldr	r0, [r7, #24]
 800a066:	f000 ff77 	bl	800af58 <pxPortInitialiseStack>
 800a06a:	4602      	mov	r2, r0
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a07a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a07c:	bf00      	nop
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	2000f17c 	.word	0x2000f17c
 800a088:	2000f1e4 	.word	0x2000f1e4
 800a08c:	2000f24c 	.word	0x2000f24c

0800a090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a098:	f001 f88c 	bl	800b1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a09c:	4b2a      	ldr	r3, [pc, #168]	; (800a148 <prvAddNewTaskToReadyList+0xb8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	4a29      	ldr	r2, [pc, #164]	; (800a148 <prvAddNewTaskToReadyList+0xb8>)
 800a0a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0a6:	4b29      	ldr	r3, [pc, #164]	; (800a14c <prvAddNewTaskToReadyList+0xbc>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0ae:	4a27      	ldr	r2, [pc, #156]	; (800a14c <prvAddNewTaskToReadyList+0xbc>)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0b4:	4b24      	ldr	r3, [pc, #144]	; (800a148 <prvAddNewTaskToReadyList+0xb8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d110      	bne.n	800a0de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0bc:	f000 fc68 	bl	800a990 <prvInitialiseTaskLists>
 800a0c0:	e00d      	b.n	800a0de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0c2:	4b23      	ldr	r3, [pc, #140]	; (800a150 <prvAddNewTaskToReadyList+0xc0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0ca:	4b20      	ldr	r3, [pc, #128]	; (800a14c <prvAddNewTaskToReadyList+0xbc>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d802      	bhi.n	800a0de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0d8:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <prvAddNewTaskToReadyList+0xbc>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0de:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <prvAddNewTaskToReadyList+0xc4>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4a1b      	ldr	r2, [pc, #108]	; (800a154 <prvAddNewTaskToReadyList+0xc4>)
 800a0e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	409a      	lsls	r2, r3
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <prvAddNewTaskToReadyList+0xc8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	4a18      	ldr	r2, [pc, #96]	; (800a158 <prvAddNewTaskToReadyList+0xc8>)
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4a15      	ldr	r2, [pc, #84]	; (800a15c <prvAddNewTaskToReadyList+0xcc>)
 800a108:	441a      	add	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f7ff f82d 	bl	8009170 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a116:	f001 f87d 	bl	800b214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <prvAddNewTaskToReadyList+0xc0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00e      	beq.n	800a140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <prvAddNewTaskToReadyList+0xbc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d207      	bcs.n	800a140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a130:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <prvAddNewTaskToReadyList+0xd0>)
 800a132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	200006c8 	.word	0x200006c8
 800a14c:	200005c8 	.word	0x200005c8
 800a150:	200006d4 	.word	0x200006d4
 800a154:	200006e4 	.word	0x200006e4
 800a158:	200006d0 	.word	0x200006d0
 800a15c:	200005cc 	.word	0x200005cc
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d017      	beq.n	800a1a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a176:	4b13      	ldr	r3, [pc, #76]	; (800a1c4 <vTaskDelay+0x60>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <vTaskDelay+0x30>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60bb      	str	r3, [r7, #8]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a194:	f000 f916 	bl	800a3c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a198:	2100      	movs	r1, #0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fe76 	bl	800ae8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1a0:	f000 f91e 	bl	800a3e0 <xTaskResumeAll>
 800a1a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d107      	bne.n	800a1bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <vTaskDelay+0x64>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200006f0 	.word	0x200006f0
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a1d4:	f000 ffee 	bl	800b1b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <vTaskSuspend+0x18>
 800a1de:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <vTaskSuspend+0x104>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	e000      	b.n	800a1e6 <vTaskSuspend+0x1a>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff f81c 	bl	800922a <uxListRemove>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d115      	bne.n	800a224 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	4935      	ldr	r1, [pc, #212]	; (800a2d4 <vTaskSuspend+0x108>)
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <vTaskSuspend+0x58>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	2201      	movs	r2, #1
 800a214:	fa02 f303 	lsl.w	r3, r2, r3
 800a218:	43da      	mvns	r2, r3
 800a21a:	4b2f      	ldr	r3, [pc, #188]	; (800a2d8 <vTaskSuspend+0x10c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4013      	ands	r3, r2
 800a220:	4a2d      	ldr	r2, [pc, #180]	; (800a2d8 <vTaskSuspend+0x10c>)
 800a222:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d004      	beq.n	800a236 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3318      	adds	r3, #24
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fffa 	bl	800922a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3304      	adds	r3, #4
 800a23a:	4619      	mov	r1, r3
 800a23c:	4827      	ldr	r0, [pc, #156]	; (800a2dc <vTaskSuspend+0x110>)
 800a23e:	f7fe ff97 	bl	8009170 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d103      	bne.n	800a256 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a256:	f000 ffdd 	bl	800b214 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a25a:	4b21      	ldr	r3, [pc, #132]	; (800a2e0 <vTaskSuspend+0x114>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d005      	beq.n	800a26e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a262:	f000 ffa7 	bl	800b1b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a266:	f000 fc35 	bl	800aad4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a26a:	f000 ffd3 	bl	800b214 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a26e:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <vTaskSuspend+0x104>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	429a      	cmp	r2, r3
 800a276:	d127      	bne.n	800a2c8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a278:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <vTaskSuspend+0x114>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d017      	beq.n	800a2b0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a280:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <vTaskSuspend+0x118>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00a      	beq.n	800a29e <vTaskSuspend+0xd2>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	60bb      	str	r3, [r7, #8]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a29e:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <vTaskSuspend+0x11c>)
 800a2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2ae:	e00b      	b.n	800a2c8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <vTaskSuspend+0x110>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <vTaskSuspend+0x120>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d103      	bne.n	800a2c4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a2bc:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <vTaskSuspend+0x104>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
	}
 800a2c2:	e001      	b.n	800a2c8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a2c4:	f000 f9e0 	bl	800a688 <vTaskSwitchContext>
	}
 800a2c8:	bf00      	nop
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	200005c8 	.word	0x200005c8
 800a2d4:	200005cc 	.word	0x200005cc
 800a2d8:	200006d0 	.word	0x200006d0
 800a2dc:	200006b4 	.word	0x200006b4
 800a2e0:	200006d4 	.word	0x200006d4
 800a2e4:	200006f0 	.word	0x200006f0
 800a2e8:	e000ed04 	.word	0xe000ed04
 800a2ec:	200006c8 	.word	0x200006c8

0800a2f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2fe:	463a      	mov	r2, r7
 800a300:	1d39      	adds	r1, r7, #4
 800a302:	f107 0308 	add.w	r3, r7, #8
 800a306:	4618      	mov	r0, r3
 800a308:	f7f7 ff1c 	bl	8002144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	9202      	str	r2, [sp, #8]
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	2300      	movs	r3, #0
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	2300      	movs	r3, #0
 800a31c:	460a      	mov	r2, r1
 800a31e:	4921      	ldr	r1, [pc, #132]	; (800a3a4 <vTaskStartScheduler+0xb4>)
 800a320:	4821      	ldr	r0, [pc, #132]	; (800a3a8 <vTaskStartScheduler+0xb8>)
 800a322:	f7ff fd75 	bl	8009e10 <xTaskCreateStatic>
 800a326:	4603      	mov	r3, r0
 800a328:	4a20      	ldr	r2, [pc, #128]	; (800a3ac <vTaskStartScheduler+0xbc>)
 800a32a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a32c:	4b1f      	ldr	r3, [pc, #124]	; (800a3ac <vTaskStartScheduler+0xbc>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a334:	2301      	movs	r3, #1
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	e001      	b.n	800a33e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d11b      	bne.n	800a37c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	613b      	str	r3, [r7, #16]
}
 800a356:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <vTaskStartScheduler+0xc0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	334c      	adds	r3, #76	; 0x4c
 800a35e:	4a15      	ldr	r2, [pc, #84]	; (800a3b4 <vTaskStartScheduler+0xc4>)
 800a360:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <vTaskStartScheduler+0xc8>)
 800a364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <vTaskStartScheduler+0xcc>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a370:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <vTaskStartScheduler+0xd0>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a376:	f000 fe7b 	bl	800b070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a37a:	e00e      	b.n	800a39a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a382:	d10a      	bne.n	800a39a <vTaskStartScheduler+0xaa>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	60fb      	str	r3, [r7, #12]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <vTaskStartScheduler+0xa8>
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800c9a4 	.word	0x0800c9a4
 800a3a8:	0800a961 	.word	0x0800a961
 800a3ac:	200006ec 	.word	0x200006ec
 800a3b0:	200005c8 	.word	0x200005c8
 800a3b4:	20000074 	.word	0x20000074
 800a3b8:	200006e8 	.word	0x200006e8
 800a3bc:	200006d4 	.word	0x200006d4
 800a3c0:	200006cc 	.word	0x200006cc

0800a3c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3c8:	4b04      	ldr	r3, [pc, #16]	; (800a3dc <vTaskSuspendAll+0x18>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a03      	ldr	r2, [pc, #12]	; (800a3dc <vTaskSuspendAll+0x18>)
 800a3d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3d2:	bf00      	nop
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200006f0 	.word	0x200006f0

0800a3e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3ee:	4b41      	ldr	r3, [pc, #260]	; (800a4f4 <xTaskResumeAll+0x114>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <xTaskResumeAll+0x2c>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	603b      	str	r3, [r7, #0]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a40c:	f000 fed2 	bl	800b1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a410:	4b38      	ldr	r3, [pc, #224]	; (800a4f4 <xTaskResumeAll+0x114>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3b01      	subs	r3, #1
 800a416:	4a37      	ldr	r2, [pc, #220]	; (800a4f4 <xTaskResumeAll+0x114>)
 800a418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a41a:	4b36      	ldr	r3, [pc, #216]	; (800a4f4 <xTaskResumeAll+0x114>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d161      	bne.n	800a4e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a422:	4b35      	ldr	r3, [pc, #212]	; (800a4f8 <xTaskResumeAll+0x118>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d05d      	beq.n	800a4e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a42a:	e02e      	b.n	800a48a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a42c:	4b33      	ldr	r3, [pc, #204]	; (800a4fc <xTaskResumeAll+0x11c>)
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3318      	adds	r3, #24
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe fef6 	bl	800922a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fef1 	bl	800922a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	2201      	movs	r2, #1
 800a44e:	409a      	lsls	r2, r3
 800a450:	4b2b      	ldr	r3, [pc, #172]	; (800a500 <xTaskResumeAll+0x120>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4313      	orrs	r3, r2
 800a456:	4a2a      	ldr	r2, [pc, #168]	; (800a500 <xTaskResumeAll+0x120>)
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45e:	4613      	mov	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4a27      	ldr	r2, [pc, #156]	; (800a504 <xTaskResumeAll+0x124>)
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7fe fe7d 	bl	8009170 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47a:	4b23      	ldr	r3, [pc, #140]	; (800a508 <xTaskResumeAll+0x128>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	429a      	cmp	r2, r3
 800a482:	d302      	bcc.n	800a48a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a484:	4b21      	ldr	r3, [pc, #132]	; (800a50c <xTaskResumeAll+0x12c>)
 800a486:	2201      	movs	r2, #1
 800a488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a48a:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <xTaskResumeAll+0x11c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1cc      	bne.n	800a42c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a498:	f000 fb1c 	bl	800aad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a49c:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <xTaskResumeAll+0x130>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d010      	beq.n	800a4ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4a8:	f000 f836 	bl	800a518 <xTaskIncrementTick>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a4b2:	4b16      	ldr	r3, [pc, #88]	; (800a50c <xTaskResumeAll+0x12c>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f1      	bne.n	800a4a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a4c4:	4b12      	ldr	r3, [pc, #72]	; (800a510 <xTaskResumeAll+0x130>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4ca:	4b10      	ldr	r3, [pc, #64]	; (800a50c <xTaskResumeAll+0x12c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <xTaskResumeAll+0x134>)
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4e6:	f000 fe95 	bl	800b214 <vPortExitCritical>

	return xAlreadyYielded;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	200006f0 	.word	0x200006f0
 800a4f8:	200006c8 	.word	0x200006c8
 800a4fc:	20000688 	.word	0x20000688
 800a500:	200006d0 	.word	0x200006d0
 800a504:	200005cc 	.word	0x200005cc
 800a508:	200005c8 	.word	0x200005c8
 800a50c:	200006dc 	.word	0x200006dc
 800a510:	200006d8 	.word	0x200006d8
 800a514:	e000ed04 	.word	0xe000ed04

0800a518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a522:	4b4e      	ldr	r3, [pc, #312]	; (800a65c <xTaskIncrementTick+0x144>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 808e 	bne.w	800a648 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a52c:	4b4c      	ldr	r3, [pc, #304]	; (800a660 <xTaskIncrementTick+0x148>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a534:	4a4a      	ldr	r2, [pc, #296]	; (800a660 <xTaskIncrementTick+0x148>)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d120      	bne.n	800a582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a540:	4b48      	ldr	r3, [pc, #288]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <xTaskIncrementTick+0x48>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	603b      	str	r3, [r7, #0]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <xTaskIncrementTick+0x46>
 800a560:	4b40      	ldr	r3, [pc, #256]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	4b40      	ldr	r3, [pc, #256]	; (800a668 <xTaskIncrementTick+0x150>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3e      	ldr	r2, [pc, #248]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	4a3e      	ldr	r2, [pc, #248]	; (800a668 <xTaskIncrementTick+0x150>)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	4b3d      	ldr	r3, [pc, #244]	; (800a66c <xTaskIncrementTick+0x154>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	4a3c      	ldr	r2, [pc, #240]	; (800a66c <xTaskIncrementTick+0x154>)
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	f000 faa9 	bl	800aad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a582:	4b3b      	ldr	r3, [pc, #236]	; (800a670 <xTaskIncrementTick+0x158>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d348      	bcc.n	800a61e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a58c:	4b35      	ldr	r3, [pc, #212]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a596:	4b36      	ldr	r3, [pc, #216]	; (800a670 <xTaskIncrementTick+0x158>)
 800a598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a59c:	601a      	str	r2, [r3, #0]
					break;
 800a59e:	e03e      	b.n	800a61e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	4b30      	ldr	r3, [pc, #192]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d203      	bcs.n	800a5c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5b8:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <xTaskIncrementTick+0x158>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5be:	e02e      	b.n	800a61e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fe30 	bl	800922a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d004      	beq.n	800a5dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fe27 	bl	800922a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	4b23      	ldr	r3, [pc, #140]	; (800a674 <xTaskIncrementTick+0x15c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	4a22      	ldr	r2, [pc, #136]	; (800a674 <xTaskIncrementTick+0x15c>)
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <xTaskIncrementTick+0x160>)
 800a5fc:	441a      	add	r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	3304      	adds	r3, #4
 800a602:	4619      	mov	r1, r3
 800a604:	4610      	mov	r0, r2
 800a606:	f7fe fdb3 	bl	8009170 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60e:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <xTaskIncrementTick+0x164>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	429a      	cmp	r2, r3
 800a616:	d3b9      	bcc.n	800a58c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a61c:	e7b6      	b.n	800a58c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a61e:	4b17      	ldr	r3, [pc, #92]	; (800a67c <xTaskIncrementTick+0x164>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a624:	4914      	ldr	r1, [pc, #80]	; (800a678 <xTaskIncrementTick+0x160>)
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d901      	bls.n	800a63a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a636:	2301      	movs	r3, #1
 800a638:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a63a:	4b11      	ldr	r3, [pc, #68]	; (800a680 <xTaskIncrementTick+0x168>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d007      	beq.n	800a652 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a642:	2301      	movs	r3, #1
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	e004      	b.n	800a652 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a648:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <xTaskIncrementTick+0x16c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	4a0d      	ldr	r2, [pc, #52]	; (800a684 <xTaskIncrementTick+0x16c>)
 800a650:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a652:	697b      	ldr	r3, [r7, #20]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	200006f0 	.word	0x200006f0
 800a660:	200006cc 	.word	0x200006cc
 800a664:	20000680 	.word	0x20000680
 800a668:	20000684 	.word	0x20000684
 800a66c:	200006e0 	.word	0x200006e0
 800a670:	200006e8 	.word	0x200006e8
 800a674:	200006d0 	.word	0x200006d0
 800a678:	200005cc 	.word	0x200005cc
 800a67c:	200005c8 	.word	0x200005c8
 800a680:	200006dc 	.word	0x200006dc
 800a684:	200006d8 	.word	0x200006d8

0800a688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a68e:	4b29      	ldr	r3, [pc, #164]	; (800a734 <vTaskSwitchContext+0xac>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a696:	4b28      	ldr	r3, [pc, #160]	; (800a738 <vTaskSwitchContext+0xb0>)
 800a698:	2201      	movs	r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a69c:	e044      	b.n	800a728 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a69e:	4b26      	ldr	r3, [pc, #152]	; (800a738 <vTaskSwitchContext+0xb0>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a4:	4b25      	ldr	r3, [pc, #148]	; (800a73c <vTaskSwitchContext+0xb4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	fab3 f383 	clz	r3, r3
 800a6b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6b2:	7afb      	ldrb	r3, [r7, #11]
 800a6b4:	f1c3 031f 	rsb	r3, r3, #31
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	4921      	ldr	r1, [pc, #132]	; (800a740 <vTaskSwitchContext+0xb8>)
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vTaskSwitchContext+0x5a>
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4a14      	ldr	r2, [pc, #80]	; (800a740 <vTaskSwitchContext+0xb8>)
 800a6f0:	4413      	add	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	605a      	str	r2, [r3, #4]
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	3308      	adds	r3, #8
 800a706:	429a      	cmp	r2, r3
 800a708:	d104      	bne.n	800a714 <vTaskSwitchContext+0x8c>
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	605a      	str	r2, [r3, #4]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <vTaskSwitchContext+0xbc>)
 800a71c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <vTaskSwitchContext+0xbc>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	334c      	adds	r3, #76	; 0x4c
 800a724:	4a08      	ldr	r2, [pc, #32]	; (800a748 <vTaskSwitchContext+0xc0>)
 800a726:	6013      	str	r3, [r2, #0]
}
 800a728:	bf00      	nop
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	200006f0 	.word	0x200006f0
 800a738:	200006dc 	.word	0x200006dc
 800a73c:	200006d0 	.word	0x200006d0
 800a740:	200005cc 	.word	0x200005cc
 800a744:	200005c8 	.word	0x200005c8
 800a748:	20000074 	.word	0x20000074

0800a74c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60fb      	str	r3, [r7, #12]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a772:	4b07      	ldr	r3, [pc, #28]	; (800a790 <vTaskPlaceOnEventList+0x44>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3318      	adds	r3, #24
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7fe fd1c 	bl	80091b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a780:	2101      	movs	r1, #1
 800a782:	6838      	ldr	r0, [r7, #0]
 800a784:	f000 fb82 	bl	800ae8c <prvAddCurrentTaskToDelayedList>
}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	200005c8 	.word	0x200005c8

0800a794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	60fb      	str	r3, [r7, #12]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fd30 	bl	800922a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7ca:	4b1d      	ldr	r3, [pc, #116]	; (800a840 <xTaskRemoveFromEventList+0xac>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d11c      	bne.n	800a80c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fe fd27 	bl	800922a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	409a      	lsls	r2, r3
 800a7e4:	4b17      	ldr	r3, [pc, #92]	; (800a844 <xTaskRemoveFromEventList+0xb0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	4a16      	ldr	r2, [pc, #88]	; (800a844 <xTaskRemoveFromEventList+0xb0>)
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4a13      	ldr	r2, [pc, #76]	; (800a848 <xTaskRemoveFromEventList+0xb4>)
 800a7fc:	441a      	add	r2, r3
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7fe fcb3 	bl	8009170 <vListInsertEnd>
 800a80a:	e005      	b.n	800a818 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	3318      	adds	r3, #24
 800a810:	4619      	mov	r1, r3
 800a812:	480e      	ldr	r0, [pc, #56]	; (800a84c <xTaskRemoveFromEventList+0xb8>)
 800a814:	f7fe fcac 	bl	8009170 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <xTaskRemoveFromEventList+0xbc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	429a      	cmp	r2, r3
 800a824:	d905      	bls.n	800a832 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a826:	2301      	movs	r3, #1
 800a828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a82a:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <xTaskRemoveFromEventList+0xc0>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	e001      	b.n	800a836 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a832:	2300      	movs	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a836:	697b      	ldr	r3, [r7, #20]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200006f0 	.word	0x200006f0
 800a844:	200006d0 	.word	0x200006d0
 800a848:	200005cc 	.word	0x200005cc
 800a84c:	20000688 	.word	0x20000688
 800a850:	200005c8 	.word	0x200005c8
 800a854:	200006dc 	.word	0x200006dc

0800a858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <vTaskInternalSetTimeOutState+0x24>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <vTaskInternalSetTimeOutState+0x28>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	605a      	str	r2, [r3, #4]
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	200006e0 	.word	0x200006e0
 800a880:	200006cc 	.word	0x200006cc

0800a884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b088      	sub	sp, #32
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	613b      	str	r3, [r7, #16]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	60fb      	str	r3, [r7, #12]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8c6:	f000 fc75 	bl	800b1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8ca:	4b1d      	ldr	r3, [pc, #116]	; (800a940 <xTaskCheckForTimeOut+0xbc>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	69ba      	ldr	r2, [r7, #24]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e2:	d102      	bne.n	800a8ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e023      	b.n	800a932 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4b15      	ldr	r3, [pc, #84]	; (800a944 <xTaskCheckForTimeOut+0xc0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d007      	beq.n	800a906 <xTaskCheckForTimeOut+0x82>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d302      	bcc.n	800a906 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	e015      	b.n	800a932 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d20b      	bcs.n	800a928 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff ff9b 	bl	800a858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
 800a926:	e004      	b.n	800a932 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a92e:	2301      	movs	r3, #1
 800a930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a932:	f000 fc6f 	bl	800b214 <vPortExitCritical>

	return xReturn;
 800a936:	69fb      	ldr	r3, [r7, #28]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3720      	adds	r7, #32
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	200006cc 	.word	0x200006cc
 800a944:	200006e0 	.word	0x200006e0

0800a948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a94c:	4b03      	ldr	r3, [pc, #12]	; (800a95c <vTaskMissedYield+0x14>)
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
}
 800a952:	bf00      	nop
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	200006dc 	.word	0x200006dc

0800a960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a968:	f000 f852 	bl	800aa10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <prvIdleTask+0x28>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d9f9      	bls.n	800a968 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <prvIdleTask+0x2c>)
 800a976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a984:	e7f0      	b.n	800a968 <prvIdleTask+0x8>
 800a986:	bf00      	nop
 800a988:	200005cc 	.word	0x200005cc
 800a98c:	e000ed04 	.word	0xe000ed04

0800a990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a996:	2300      	movs	r3, #0
 800a998:	607b      	str	r3, [r7, #4]
 800a99a:	e00c      	b.n	800a9b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4a12      	ldr	r2, [pc, #72]	; (800a9f0 <prvInitialiseTaskLists+0x60>)
 800a9a8:	4413      	add	r3, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fbb3 	bl	8009116 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	607b      	str	r3, [r7, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b06      	cmp	r3, #6
 800a9ba:	d9ef      	bls.n	800a99c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9bc:	480d      	ldr	r0, [pc, #52]	; (800a9f4 <prvInitialiseTaskLists+0x64>)
 800a9be:	f7fe fbaa 	bl	8009116 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9c2:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <prvInitialiseTaskLists+0x68>)
 800a9c4:	f7fe fba7 	bl	8009116 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9c8:	480c      	ldr	r0, [pc, #48]	; (800a9fc <prvInitialiseTaskLists+0x6c>)
 800a9ca:	f7fe fba4 	bl	8009116 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9ce:	480c      	ldr	r0, [pc, #48]	; (800aa00 <prvInitialiseTaskLists+0x70>)
 800a9d0:	f7fe fba1 	bl	8009116 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9d4:	480b      	ldr	r0, [pc, #44]	; (800aa04 <prvInitialiseTaskLists+0x74>)
 800a9d6:	f7fe fb9e 	bl	8009116 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <prvInitialiseTaskLists+0x78>)
 800a9dc:	4a05      	ldr	r2, [pc, #20]	; (800a9f4 <prvInitialiseTaskLists+0x64>)
 800a9de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <prvInitialiseTaskLists+0x7c>)
 800a9e2:	4a05      	ldr	r2, [pc, #20]	; (800a9f8 <prvInitialiseTaskLists+0x68>)
 800a9e4:	601a      	str	r2, [r3, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200005cc 	.word	0x200005cc
 800a9f4:	20000658 	.word	0x20000658
 800a9f8:	2000066c 	.word	0x2000066c
 800a9fc:	20000688 	.word	0x20000688
 800aa00:	2000069c 	.word	0x2000069c
 800aa04:	200006b4 	.word	0x200006b4
 800aa08:	20000680 	.word	0x20000680
 800aa0c:	20000684 	.word	0x20000684

0800aa10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa16:	e019      	b.n	800aa4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa18:	f000 fbcc 	bl	800b1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <prvCheckTasksWaitingTermination+0x50>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe fbfe 	bl	800922a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <prvCheckTasksWaitingTermination+0x54>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	4a0b      	ldr	r2, [pc, #44]	; (800aa64 <prvCheckTasksWaitingTermination+0x54>)
 800aa36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa38:	4b0b      	ldr	r3, [pc, #44]	; (800aa68 <prvCheckTasksWaitingTermination+0x58>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4a0a      	ldr	r2, [pc, #40]	; (800aa68 <prvCheckTasksWaitingTermination+0x58>)
 800aa40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa42:	f000 fbe7 	bl	800b214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f810 	bl	800aa6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <prvCheckTasksWaitingTermination+0x58>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e1      	bne.n	800aa18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	2000069c 	.word	0x2000069c
 800aa64:	200006c8 	.word	0x200006c8
 800aa68:	200006b0 	.word	0x200006b0

0800aa6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	334c      	adds	r3, #76	; 0x4c
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 feaf 	bl	800b7dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d108      	bne.n	800aa9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fd7f 	bl	800b590 <vPortFree>
				vPortFree( pxTCB );
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fd7c 	bl	800b590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa98:	e018      	b.n	800aacc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d103      	bne.n	800aaac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fd73 	bl	800b590 <vPortFree>
	}
 800aaaa:	e00f      	b.n	800aacc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d00a      	beq.n	800aacc <prvDeleteTCB+0x60>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	60fb      	str	r3, [r7, #12]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <prvDeleteTCB+0x5e>
	}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aada:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aae4:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaec:	e008      	b.n	800ab00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4a04      	ldr	r2, [pc, #16]	; (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	20000680 	.word	0x20000680
 800ab10:	200006e8 	.word	0x200006e8

0800ab14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <xTaskGetSchedulerState+0x34>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab22:	2301      	movs	r3, #1
 800ab24:	607b      	str	r3, [r7, #4]
 800ab26:	e008      	b.n	800ab3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab28:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <xTaskGetSchedulerState+0x38>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab30:	2302      	movs	r3, #2
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	e001      	b.n	800ab3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab36:	2300      	movs	r3, #0
 800ab38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab3a:	687b      	ldr	r3, [r7, #4]
	}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	200006d4 	.word	0x200006d4
 800ab4c:	200006f0 	.word	0x200006f0

0800ab50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d05e      	beq.n	800ac24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xTaskPriorityInherit+0xe0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d24e      	bcs.n	800ac12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db06      	blt.n	800ab8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	; (800ac30 <xTaskPriorityInherit+0xe0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	f1c3 0207 	rsb	r2, r3, #7
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6959      	ldr	r1, [r3, #20]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4a26      	ldr	r2, [pc, #152]	; (800ac34 <xTaskPriorityInherit+0xe4>)
 800ab9c:	4413      	add	r3, r2
 800ab9e:	4299      	cmp	r1, r3
 800aba0:	d12f      	bne.n	800ac02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fb3f 	bl	800922a <uxListRemove>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	2201      	movs	r2, #1
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	43da      	mvns	r2, r3
 800abbe:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <xTaskPriorityInherit+0xe8>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4013      	ands	r3, r2
 800abc4:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <xTaskPriorityInherit+0xe8>)
 800abc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abc8:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <xTaskPriorityInherit+0xe0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	2201      	movs	r2, #1
 800abd8:	409a      	lsls	r2, r3
 800abda:	4b17      	ldr	r3, [pc, #92]	; (800ac38 <xTaskPriorityInherit+0xe8>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4313      	orrs	r3, r2
 800abe0:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <xTaskPriorityInherit+0xe8>)
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <xTaskPriorityInherit+0xe4>)
 800abf2:	441a      	add	r2, r3
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe fab8 	bl	8009170 <vListInsertEnd>
 800ac00:	e004      	b.n	800ac0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <xTaskPriorityInherit+0xe0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e008      	b.n	800ac24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac16:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <xTaskPriorityInherit+0xe0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d201      	bcs.n	800ac24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac20:	2301      	movs	r3, #1
 800ac22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac24:	68fb      	ldr	r3, [r7, #12]
	}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	200005c8 	.word	0x200005c8
 800ac34:	200005cc 	.word	0x200005cc
 800ac38:	200006d0 	.word	0x200006d0

0800ac3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d06e      	beq.n	800ad30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac52:	4b3a      	ldr	r3, [pc, #232]	; (800ad3c <xTaskPriorityDisinherit+0x100>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d00a      	beq.n	800ac72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	60fb      	str	r3, [r7, #12]
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	60bb      	str	r3, [r7, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac94:	1e5a      	subs	r2, r3, #1
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d044      	beq.n	800ad30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d140      	bne.n	800ad30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fab9 	bl	800922a <uxListRemove>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d115      	bne.n	800acea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc2:	491f      	ldr	r1, [pc, #124]	; (800ad40 <xTaskPriorityDisinherit+0x104>)
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10a      	bne.n	800acea <xTaskPriorityDisinherit+0xae>
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	2201      	movs	r2, #1
 800acda:	fa02 f303 	lsl.w	r3, r2, r3
 800acde:	43da      	mvns	r2, r3
 800ace0:	4b18      	ldr	r3, [pc, #96]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4013      	ands	r3, r2
 800ace6:	4a17      	ldr	r2, [pc, #92]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ace8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	f1c3 0207 	rsb	r2, r3, #7
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	2201      	movs	r2, #1
 800ad04:	409a      	lsls	r2, r3
 800ad06:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	4a0d      	ldr	r2, [pc, #52]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4a08      	ldr	r2, [pc, #32]	; (800ad40 <xTaskPriorityDisinherit+0x104>)
 800ad1e:	441a      	add	r2, r3
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	3304      	adds	r3, #4
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f7fe fa22 	bl	8009170 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad30:	697b      	ldr	r3, [r7, #20]
	}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200005c8 	.word	0x200005c8
 800ad40:	200005cc 	.word	0x200005cc
 800ad44:	200006d0 	.word	0x200006d0

0800ad48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad56:	2301      	movs	r3, #1
 800ad58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d077      	beq.n	800ae50 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	60fb      	str	r3, [r7, #12]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d902      	bls.n	800ad8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	61fb      	str	r3, [r7, #28]
 800ad8c:	e002      	b.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d058      	beq.n	800ae50 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d153      	bne.n	800ae50 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ada8:	4b2b      	ldr	r3, [pc, #172]	; (800ae58 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d10a      	bne.n	800adc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	60bb      	str	r3, [r7, #8]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	69fa      	ldr	r2, [r7, #28]
 800add2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	db04      	blt.n	800ade6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	f1c3 0207 	rsb	r2, r3, #7
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6959      	ldr	r1, [r3, #20]
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4a19      	ldr	r2, [pc, #100]	; (800ae5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800adf6:	4413      	add	r3, r2
 800adf8:	4299      	cmp	r1, r3
 800adfa:	d129      	bne.n	800ae50 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe fa12 	bl	800922a <uxListRemove>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	2201      	movs	r2, #1
 800ae12:	fa02 f303 	lsl.w	r3, r2, r3
 800ae16:	43da      	mvns	r2, r3
 800ae18:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	4a10      	ldr	r2, [pc, #64]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ae20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae26:	2201      	movs	r2, #1
 800ae28:	409a      	lsls	r2, r3
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	4a0b      	ldr	r2, [pc, #44]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae38:	4613      	mov	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4a06      	ldr	r2, [pc, #24]	; (800ae5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ae42:	441a      	add	r2, r3
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f7fe f990 	bl	8009170 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae50:	bf00      	nop
 800ae52:	3720      	adds	r7, #32
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	200005c8 	.word	0x200005c8
 800ae5c:	200005cc 	.word	0x200005cc
 800ae60:	200006d0 	.word	0x200006d0

0800ae64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae68:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae76:	3201      	adds	r2, #1
 800ae78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae7a:	4b03      	ldr	r3, [pc, #12]	; (800ae88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
	}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	200005c8 	.word	0x200005c8

0800ae8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae96:	4b29      	ldr	r3, [pc, #164]	; (800af3c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae9c:	4b28      	ldr	r3, [pc, #160]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3304      	adds	r3, #4
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe f9c1 	bl	800922a <uxListRemove>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10b      	bne.n	800aec6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aeae:	4b24      	ldr	r3, [pc, #144]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeba:	43da      	mvns	r2, r3
 800aebc:	4b21      	ldr	r3, [pc, #132]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4013      	ands	r3, r2
 800aec2:	4a20      	ldr	r2, [pc, #128]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aec4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aecc:	d10a      	bne.n	800aee4 <prvAddCurrentTaskToDelayedList+0x58>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aed4:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	481a      	ldr	r0, [pc, #104]	; (800af48 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aede:	f7fe f947 	bl	8009170 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aee2:	e026      	b.n	800af32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4413      	add	r3, r2
 800aeea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeec:	4b14      	ldr	r3, [pc, #80]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d209      	bcs.n	800af10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <prvAddCurrentTaskToDelayedList+0xc0>)
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3304      	adds	r3, #4
 800af06:	4619      	mov	r1, r3
 800af08:	4610      	mov	r0, r2
 800af0a:	f7fe f955 	bl	80091b8 <vListInsert>
}
 800af0e:	e010      	b.n	800af32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af10:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <prvAddCurrentTaskToDelayedList+0xc4>)
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3304      	adds	r3, #4
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7fe f94b 	bl	80091b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af22:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d202      	bcs.n	800af32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af2c:	4a09      	ldr	r2, [pc, #36]	; (800af54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6013      	str	r3, [r2, #0]
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	200006cc 	.word	0x200006cc
 800af40:	200005c8 	.word	0x200005c8
 800af44:	200006d0 	.word	0x200006d0
 800af48:	200006b4 	.word	0x200006b4
 800af4c:	20000684 	.word	0x20000684
 800af50:	20000680 	.word	0x20000680
 800af54:	200006e8 	.word	0x200006e8

0800af58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3b04      	subs	r3, #4
 800af68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3b04      	subs	r3, #4
 800af76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f023 0201 	bic.w	r2, r3, #1
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3b04      	subs	r3, #4
 800af86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af88:	4a0c      	ldr	r2, [pc, #48]	; (800afbc <pxPortInitialiseStack+0x64>)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3b14      	subs	r3, #20
 800af92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3b04      	subs	r3, #4
 800af9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f06f 0202 	mvn.w	r2, #2
 800afa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3b20      	subs	r3, #32
 800afac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	0800afc1 	.word	0x0800afc1

0800afc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afca:	4b12      	ldr	r3, [pc, #72]	; (800b014 <prvTaskExitError+0x54>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afd2:	d00a      	beq.n	800afea <prvTaskExitError+0x2a>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60fb      	str	r3, [r7, #12]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <prvTaskExitError+0x28>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	60bb      	str	r3, [r7, #8]
}
 800affc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800affe:	bf00      	nop
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0fc      	beq.n	800b000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b006:	bf00      	nop
 800b008:	bf00      	nop
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	20000024 	.word	0x20000024
	...

0800b020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <pxCurrentTCBConst2>)
 800b022:	6819      	ldr	r1, [r3, #0]
 800b024:	6808      	ldr	r0, [r1, #0]
 800b026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	f380 8809 	msr	PSP, r0
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f04f 0000 	mov.w	r0, #0
 800b036:	f380 8811 	msr	BASEPRI, r0
 800b03a:	4770      	bx	lr
 800b03c:	f3af 8000 	nop.w

0800b040 <pxCurrentTCBConst2>:
 800b040:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop

0800b048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b048:	4808      	ldr	r0, [pc, #32]	; (800b06c <prvPortStartFirstTask+0x24>)
 800b04a:	6800      	ldr	r0, [r0, #0]
 800b04c:	6800      	ldr	r0, [r0, #0]
 800b04e:	f380 8808 	msr	MSP, r0
 800b052:	f04f 0000 	mov.w	r0, #0
 800b056:	f380 8814 	msr	CONTROL, r0
 800b05a:	b662      	cpsie	i
 800b05c:	b661      	cpsie	f
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	df00      	svc	0
 800b068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b06a:	bf00      	nop
 800b06c:	e000ed08 	.word	0xe000ed08

0800b070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b076:	4b46      	ldr	r3, [pc, #280]	; (800b190 <xPortStartScheduler+0x120>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a46      	ldr	r2, [pc, #280]	; (800b194 <xPortStartScheduler+0x124>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d10a      	bne.n	800b096 <xPortStartScheduler+0x26>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	613b      	str	r3, [r7, #16]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b096:	4b3e      	ldr	r3, [pc, #248]	; (800b190 <xPortStartScheduler+0x120>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a3f      	ldr	r2, [pc, #252]	; (800b198 <xPortStartScheduler+0x128>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d10a      	bne.n	800b0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60fb      	str	r3, [r7, #12]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0b6:	4b39      	ldr	r3, [pc, #228]	; (800b19c <xPortStartScheduler+0x12c>)
 800b0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	22ff      	movs	r2, #255	; 0xff
 800b0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4b31      	ldr	r3, [pc, #196]	; (800b1a0 <xPortStartScheduler+0x130>)
 800b0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0de:	4b31      	ldr	r3, [pc, #196]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b0e0:	2207      	movs	r2, #7
 800b0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0e4:	e009      	b.n	800b0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b0e6:	4b2f      	ldr	r3, [pc, #188]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	4a2d      	ldr	r2, [pc, #180]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d0ef      	beq.n	800b0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b106:	4b27      	ldr	r3, [pc, #156]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f1c3 0307 	rsb	r3, r3, #7
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d00a      	beq.n	800b128 <xPortStartScheduler+0xb8>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	60bb      	str	r3, [r7, #8]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b128:	4b1e      	ldr	r3, [pc, #120]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	4a1d      	ldr	r2, [pc, #116]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b132:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b13a:	4a1a      	ldr	r2, [pc, #104]	; (800b1a4 <xPortStartScheduler+0x134>)
 800b13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	b2da      	uxtb	r2, r3
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b146:	4b18      	ldr	r3, [pc, #96]	; (800b1a8 <xPortStartScheduler+0x138>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <xPortStartScheduler+0x138>)
 800b14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b152:	4b15      	ldr	r3, [pc, #84]	; (800b1a8 <xPortStartScheduler+0x138>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a14      	ldr	r2, [pc, #80]	; (800b1a8 <xPortStartScheduler+0x138>)
 800b158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b15e:	f000 f8dd 	bl	800b31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b162:	4b12      	ldr	r3, [pc, #72]	; (800b1ac <xPortStartScheduler+0x13c>)
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b168:	f000 f8fc 	bl	800b364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b16c:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <xPortStartScheduler+0x140>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a0f      	ldr	r2, [pc, #60]	; (800b1b0 <xPortStartScheduler+0x140>)
 800b172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b178:	f7ff ff66 	bl	800b048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b17c:	f7ff fa84 	bl	800a688 <vTaskSwitchContext>
	prvTaskExitError();
 800b180:	f7ff ff1e 	bl	800afc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	e000ed00 	.word	0xe000ed00
 800b194:	410fc271 	.word	0x410fc271
 800b198:	410fc270 	.word	0x410fc270
 800b19c:	e000e400 	.word	0xe000e400
 800b1a0:	200006f4 	.word	0x200006f4
 800b1a4:	200006f8 	.word	0x200006f8
 800b1a8:	e000ed20 	.word	0xe000ed20
 800b1ac:	20000024 	.word	0x20000024
 800b1b0:	e000ef34 	.word	0xe000ef34

0800b1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	607b      	str	r3, [r7, #4]
}
 800b1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1ce:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <vPortEnterCritical+0x58>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <vPortEnterCritical+0x58>)
 800b1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1d8:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <vPortEnterCritical+0x58>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d10f      	bne.n	800b200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <vPortEnterCritical+0x5c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <vPortEnterCritical+0x4a>
	}
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20000024 	.word	0x20000024
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b21a:	4b12      	ldr	r3, [pc, #72]	; (800b264 <vPortExitCritical+0x50>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <vPortExitCritical+0x24>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	607b      	str	r3, [r7, #4]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <vPortExitCritical+0x50>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	4a09      	ldr	r2, [pc, #36]	; (800b264 <vPortExitCritical+0x50>)
 800b240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b242:	4b08      	ldr	r3, [pc, #32]	; (800b264 <vPortExitCritical+0x50>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d105      	bne.n	800b256 <vPortExitCritical+0x42>
 800b24a:	2300      	movs	r3, #0
 800b24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	f383 8811 	msr	BASEPRI, r3
}
 800b254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20000024 	.word	0x20000024
	...

0800b270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b270:	f3ef 8009 	mrs	r0, PSP
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <pxCurrentTCBConst>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	f01e 0f10 	tst.w	lr, #16
 800b280:	bf08      	it	eq
 800b282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	6010      	str	r0, [r2, #0]
 800b28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b294:	f380 8811 	msr	BASEPRI, r0
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f7ff f9f2 	bl	800a688 <vTaskSwitchContext>
 800b2a4:	f04f 0000 	mov.w	r0, #0
 800b2a8:	f380 8811 	msr	BASEPRI, r0
 800b2ac:	bc09      	pop	{r0, r3}
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	6808      	ldr	r0, [r1, #0]
 800b2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b6:	f01e 0f10 	tst.w	lr, #16
 800b2ba:	bf08      	it	eq
 800b2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2c0:	f380 8809 	msr	PSP, r0
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	f3af 8000 	nop.w

0800b2d0 <pxCurrentTCBConst>:
 800b2d0:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop

0800b2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
}
 800b2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2f2:	f7ff f911 	bl	800a518 <xTaskIncrementTick>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <xPortSysTickHandler+0x40>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	2300      	movs	r3, #0
 800b306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f383 8811 	msr	BASEPRI, r3
}
 800b30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b320:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <vPortSetupTimerInterrupt+0x34>)
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b326:	4b0b      	ldr	r3, [pc, #44]	; (800b354 <vPortSetupTimerInterrupt+0x38>)
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b32c:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <vPortSetupTimerInterrupt+0x3c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a0a      	ldr	r2, [pc, #40]	; (800b35c <vPortSetupTimerInterrupt+0x40>)
 800b332:	fba2 2303 	umull	r2, r3, r2, r3
 800b336:	099b      	lsrs	r3, r3, #6
 800b338:	4a09      	ldr	r2, [pc, #36]	; (800b360 <vPortSetupTimerInterrupt+0x44>)
 800b33a:	3b01      	subs	r3, #1
 800b33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b33e:	4b04      	ldr	r3, [pc, #16]	; (800b350 <vPortSetupTimerInterrupt+0x34>)
 800b340:	2207      	movs	r2, #7
 800b342:	601a      	str	r2, [r3, #0]
}
 800b344:	bf00      	nop
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	e000e010 	.word	0xe000e010
 800b354:	e000e018 	.word	0xe000e018
 800b358:	20000004 	.word	0x20000004
 800b35c:	10624dd3 	.word	0x10624dd3
 800b360:	e000e014 	.word	0xe000e014

0800b364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b374 <vPortEnableVFP+0x10>
 800b368:	6801      	ldr	r1, [r0, #0]
 800b36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b36e:	6001      	str	r1, [r0, #0]
 800b370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b372:	bf00      	nop
 800b374:	e000ed88 	.word	0xe000ed88

0800b378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b37e:	f3ef 8305 	mrs	r3, IPSR
 800b382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b0f      	cmp	r3, #15
 800b388:	d914      	bls.n	800b3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b38a:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <vPortValidateInterruptPriority+0x70>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4413      	add	r3, r2
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b394:	4b15      	ldr	r3, [pc, #84]	; (800b3ec <vPortValidateInterruptPriority+0x74>)
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	7afa      	ldrb	r2, [r7, #11]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d20a      	bcs.n	800b3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	607b      	str	r3, [r7, #4]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3b4:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <vPortValidateInterruptPriority+0x78>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <vPortValidateInterruptPriority+0x7c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d90a      	bls.n	800b3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	603b      	str	r3, [r7, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	e7fe      	b.n	800b3d8 <vPortValidateInterruptPriority+0x60>
	}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	e000e3f0 	.word	0xe000e3f0
 800b3ec:	200006f4 	.word	0x200006f4
 800b3f0:	e000ed0c 	.word	0xe000ed0c
 800b3f4:	200006f8 	.word	0x200006f8

0800b3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	; 0x28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b404:	f7fe ffde 	bl	800a3c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b408:	4b5b      	ldr	r3, [pc, #364]	; (800b578 <pvPortMalloc+0x180>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b410:	f000 f920 	bl	800b654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b414:	4b59      	ldr	r3, [pc, #356]	; (800b57c <pvPortMalloc+0x184>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4013      	ands	r3, r2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f040 8093 	bne.w	800b548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d01d      	beq.n	800b464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b428:	2208      	movs	r2, #8
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b00      	cmp	r3, #0
 800b438:	d014      	beq.n	800b464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f023 0307 	bic.w	r3, r3, #7
 800b440:	3308      	adds	r3, #8
 800b442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <pvPortMalloc+0x6c>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d06e      	beq.n	800b548 <pvPortMalloc+0x150>
 800b46a:	4b45      	ldr	r3, [pc, #276]	; (800b580 <pvPortMalloc+0x188>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d869      	bhi.n	800b548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b474:	4b43      	ldr	r3, [pc, #268]	; (800b584 <pvPortMalloc+0x18c>)
 800b476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b478:	4b42      	ldr	r3, [pc, #264]	; (800b584 <pvPortMalloc+0x18c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b47e:	e004      	b.n	800b48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	429a      	cmp	r2, r3
 800b492:	d903      	bls.n	800b49c <pvPortMalloc+0xa4>
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1f1      	bne.n	800b480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b49c:	4b36      	ldr	r3, [pc, #216]	; (800b578 <pvPortMalloc+0x180>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d050      	beq.n	800b548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	4413      	add	r3, r2
 800b4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d91f      	bls.n	800b508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	613b      	str	r3, [r7, #16]
}
 800b4ec:	bf00      	nop
 800b4ee:	e7fe      	b.n	800b4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	1ad2      	subs	r2, r2, r3
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b502:	69b8      	ldr	r0, [r7, #24]
 800b504:	f000 f908 	bl	800b718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b508:	4b1d      	ldr	r3, [pc, #116]	; (800b580 <pvPortMalloc+0x188>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	4a1b      	ldr	r2, [pc, #108]	; (800b580 <pvPortMalloc+0x188>)
 800b514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b516:	4b1a      	ldr	r3, [pc, #104]	; (800b580 <pvPortMalloc+0x188>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <pvPortMalloc+0x190>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d203      	bcs.n	800b52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b522:	4b17      	ldr	r3, [pc, #92]	; (800b580 <pvPortMalloc+0x188>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a18      	ldr	r2, [pc, #96]	; (800b588 <pvPortMalloc+0x190>)
 800b528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	4b13      	ldr	r3, [pc, #76]	; (800b57c <pvPortMalloc+0x184>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	431a      	orrs	r2, r3
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <pvPortMalloc+0x194>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	4a11      	ldr	r2, [pc, #68]	; (800b58c <pvPortMalloc+0x194>)
 800b546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b548:	f7fe ff4a 	bl	800a3e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <pvPortMalloc+0x174>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	60fb      	str	r3, [r7, #12]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <pvPortMalloc+0x172>
	return pvReturn;
 800b56c:	69fb      	ldr	r3, [r7, #28]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3728      	adds	r7, #40	; 0x28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	2000f164 	.word	0x2000f164
 800b57c:	2000f178 	.word	0x2000f178
 800b580:	2000f168 	.word	0x2000f168
 800b584:	2000f15c 	.word	0x2000f15c
 800b588:	2000f16c 	.word	0x2000f16c
 800b58c:	2000f170 	.word	0x2000f170

0800b590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d04d      	beq.n	800b63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5a2:	2308      	movs	r3, #8
 800b5a4:	425b      	negs	r3, r3
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	4b24      	ldr	r3, [pc, #144]	; (800b648 <vPortFree+0xb8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <vPortFree+0x44>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <vPortFree+0x62>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <vPortFree+0xb8>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01e      	beq.n	800b63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d11a      	bne.n	800b63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <vPortFree+0xb8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	43db      	mvns	r3, r3
 800b612:	401a      	ands	r2, r3
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b618:	f7fe fed4 	bl	800a3c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <vPortFree+0xbc>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4413      	add	r3, r2
 800b626:	4a09      	ldr	r2, [pc, #36]	; (800b64c <vPortFree+0xbc>)
 800b628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b62a:	6938      	ldr	r0, [r7, #16]
 800b62c:	f000 f874 	bl	800b718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <vPortFree+0xc0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <vPortFree+0xc0>)
 800b638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b63a:	f7fe fed1 	bl	800a3e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b63e:	bf00      	nop
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	2000f178 	.word	0x2000f178
 800b64c:	2000f168 	.word	0x2000f168
 800b650:	2000f174 	.word	0x2000f174

0800b654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b65a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <prvHeapInit+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3307      	adds	r3, #7
 800b672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <prvHeapInit+0xac>)
 800b684:	4413      	add	r3, r2
 800b686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b68c:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <prvHeapInit+0xb0>)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b692:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <prvHeapInit+0xb0>)
 800b694:	2200      	movs	r2, #0
 800b696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0307 	bic.w	r3, r3, #7
 800b6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <prvHeapInit+0xb4>)
 800b6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <prvHeapInit+0xb4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <prvHeapInit+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvHeapInit+0xb4>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <prvHeapInit+0xb8>)
 800b6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <prvHeapInit+0xbc>)
 800b6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <prvHeapInit+0xc0>)
 800b6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	200006fc 	.word	0x200006fc
 800b704:	2000f15c 	.word	0x2000f15c
 800b708:	2000f164 	.word	0x2000f164
 800b70c:	2000f16c 	.word	0x2000f16c
 800b710:	2000f168 	.word	0x2000f168
 800b714:	2000f178 	.word	0x2000f178

0800b718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b720:	4b28      	ldr	r3, [pc, #160]	; (800b7c4 <prvInsertBlockIntoFreeList+0xac>)
 800b722:	60fb      	str	r3, [r7, #12]
 800b724:	e002      	b.n	800b72c <prvInsertBlockIntoFreeList+0x14>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d8f7      	bhi.n	800b726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d108      	bne.n	800b75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	441a      	add	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d118      	bne.n	800b7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d00d      	beq.n	800b796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e008      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d002      	beq.n	800b7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	2000f15c 	.word	0x2000f15c
 800b7c8:	2000f164 	.word	0x2000f164

0800b7cc <memset>:
 800b7cc:	4402      	add	r2, r0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d100      	bne.n	800b7d6 <memset+0xa>
 800b7d4:	4770      	bx	lr
 800b7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7da:	e7f9      	b.n	800b7d0 <memset+0x4>

0800b7dc <_reclaim_reent>:
 800b7dc:	4b29      	ldr	r3, [pc, #164]	; (800b884 <_reclaim_reent+0xa8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4283      	cmp	r3, r0
 800b7e2:	b570      	push	{r4, r5, r6, lr}
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	d04b      	beq.n	800b880 <_reclaim_reent+0xa4>
 800b7e8:	69c3      	ldr	r3, [r0, #28]
 800b7ea:	b143      	cbz	r3, 800b7fe <_reclaim_reent+0x22>
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d144      	bne.n	800b87c <_reclaim_reent+0xa0>
 800b7f2:	69e3      	ldr	r3, [r4, #28]
 800b7f4:	6819      	ldr	r1, [r3, #0]
 800b7f6:	b111      	cbz	r1, 800b7fe <_reclaim_reent+0x22>
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 f87f 	bl	800b8fc <_free_r>
 800b7fe:	6961      	ldr	r1, [r4, #20]
 800b800:	b111      	cbz	r1, 800b808 <_reclaim_reent+0x2c>
 800b802:	4620      	mov	r0, r4
 800b804:	f000 f87a 	bl	800b8fc <_free_r>
 800b808:	69e1      	ldr	r1, [r4, #28]
 800b80a:	b111      	cbz	r1, 800b812 <_reclaim_reent+0x36>
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 f875 	bl	800b8fc <_free_r>
 800b812:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b814:	b111      	cbz	r1, 800b81c <_reclaim_reent+0x40>
 800b816:	4620      	mov	r0, r4
 800b818:	f000 f870 	bl	800b8fc <_free_r>
 800b81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b81e:	b111      	cbz	r1, 800b826 <_reclaim_reent+0x4a>
 800b820:	4620      	mov	r0, r4
 800b822:	f000 f86b 	bl	800b8fc <_free_r>
 800b826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b828:	b111      	cbz	r1, 800b830 <_reclaim_reent+0x54>
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f866 	bl	800b8fc <_free_r>
 800b830:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b832:	b111      	cbz	r1, 800b83a <_reclaim_reent+0x5e>
 800b834:	4620      	mov	r0, r4
 800b836:	f000 f861 	bl	800b8fc <_free_r>
 800b83a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b83c:	b111      	cbz	r1, 800b844 <_reclaim_reent+0x68>
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 f85c 	bl	800b8fc <_free_r>
 800b844:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b846:	b111      	cbz	r1, 800b84e <_reclaim_reent+0x72>
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 f857 	bl	800b8fc <_free_r>
 800b84e:	6a23      	ldr	r3, [r4, #32]
 800b850:	b1b3      	cbz	r3, 800b880 <_reclaim_reent+0xa4>
 800b852:	4620      	mov	r0, r4
 800b854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b858:	4718      	bx	r3
 800b85a:	5949      	ldr	r1, [r1, r5]
 800b85c:	b941      	cbnz	r1, 800b870 <_reclaim_reent+0x94>
 800b85e:	3504      	adds	r5, #4
 800b860:	69e3      	ldr	r3, [r4, #28]
 800b862:	2d80      	cmp	r5, #128	; 0x80
 800b864:	68d9      	ldr	r1, [r3, #12]
 800b866:	d1f8      	bne.n	800b85a <_reclaim_reent+0x7e>
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 f847 	bl	800b8fc <_free_r>
 800b86e:	e7c0      	b.n	800b7f2 <_reclaim_reent+0x16>
 800b870:	680e      	ldr	r6, [r1, #0]
 800b872:	4620      	mov	r0, r4
 800b874:	f000 f842 	bl	800b8fc <_free_r>
 800b878:	4631      	mov	r1, r6
 800b87a:	e7ef      	b.n	800b85c <_reclaim_reent+0x80>
 800b87c:	2500      	movs	r5, #0
 800b87e:	e7ef      	b.n	800b860 <_reclaim_reent+0x84>
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	bf00      	nop
 800b884:	20000074 	.word	0x20000074

0800b888 <__errno>:
 800b888:	4b01      	ldr	r3, [pc, #4]	; (800b890 <__errno+0x8>)
 800b88a:	6818      	ldr	r0, [r3, #0]
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	20000074 	.word	0x20000074

0800b894 <__libc_init_array>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4d0d      	ldr	r5, [pc, #52]	; (800b8cc <__libc_init_array+0x38>)
 800b898:	4c0d      	ldr	r4, [pc, #52]	; (800b8d0 <__libc_init_array+0x3c>)
 800b89a:	1b64      	subs	r4, r4, r5
 800b89c:	10a4      	asrs	r4, r4, #2
 800b89e:	2600      	movs	r6, #0
 800b8a0:	42a6      	cmp	r6, r4
 800b8a2:	d109      	bne.n	800b8b8 <__libc_init_array+0x24>
 800b8a4:	4d0b      	ldr	r5, [pc, #44]	; (800b8d4 <__libc_init_array+0x40>)
 800b8a6:	4c0c      	ldr	r4, [pc, #48]	; (800b8d8 <__libc_init_array+0x44>)
 800b8a8:	f000 ffb8 	bl	800c81c <_init>
 800b8ac:	1b64      	subs	r4, r4, r5
 800b8ae:	10a4      	asrs	r4, r4, #2
 800b8b0:	2600      	movs	r6, #0
 800b8b2:	42a6      	cmp	r6, r4
 800b8b4:	d105      	bne.n	800b8c2 <__libc_init_array+0x2e>
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8bc:	4798      	blx	r3
 800b8be:	3601      	adds	r6, #1
 800b8c0:	e7ee      	b.n	800b8a0 <__libc_init_array+0xc>
 800b8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c6:	4798      	blx	r3
 800b8c8:	3601      	adds	r6, #1
 800b8ca:	e7f2      	b.n	800b8b2 <__libc_init_array+0x1e>
 800b8cc:	0800ce60 	.word	0x0800ce60
 800b8d0:	0800ce60 	.word	0x0800ce60
 800b8d4:	0800ce60 	.word	0x0800ce60
 800b8d8:	0800ce64 	.word	0x0800ce64

0800b8dc <__retarget_lock_acquire_recursive>:
 800b8dc:	4770      	bx	lr

0800b8de <__retarget_lock_release_recursive>:
 800b8de:	4770      	bx	lr

0800b8e0 <memcpy>:
 800b8e0:	440a      	add	r2, r1
 800b8e2:	4291      	cmp	r1, r2
 800b8e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b8e8:	d100      	bne.n	800b8ec <memcpy+0xc>
 800b8ea:	4770      	bx	lr
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8f6:	4291      	cmp	r1, r2
 800b8f8:	d1f9      	bne.n	800b8ee <memcpy+0xe>
 800b8fa:	bd10      	pop	{r4, pc}

0800b8fc <_free_r>:
 800b8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8fe:	2900      	cmp	r1, #0
 800b900:	d044      	beq.n	800b98c <_free_r+0x90>
 800b902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b906:	9001      	str	r0, [sp, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f1a1 0404 	sub.w	r4, r1, #4
 800b90e:	bfb8      	it	lt
 800b910:	18e4      	addlt	r4, r4, r3
 800b912:	f000 f83f 	bl	800b994 <__malloc_lock>
 800b916:	4a1e      	ldr	r2, [pc, #120]	; (800b990 <_free_r+0x94>)
 800b918:	9801      	ldr	r0, [sp, #4]
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	b933      	cbnz	r3, 800b92c <_free_r+0x30>
 800b91e:	6063      	str	r3, [r4, #4]
 800b920:	6014      	str	r4, [r2, #0]
 800b922:	b003      	add	sp, #12
 800b924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b928:	f000 b83a 	b.w	800b9a0 <__malloc_unlock>
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	d908      	bls.n	800b942 <_free_r+0x46>
 800b930:	6825      	ldr	r5, [r4, #0]
 800b932:	1961      	adds	r1, r4, r5
 800b934:	428b      	cmp	r3, r1
 800b936:	bf01      	itttt	eq
 800b938:	6819      	ldreq	r1, [r3, #0]
 800b93a:	685b      	ldreq	r3, [r3, #4]
 800b93c:	1949      	addeq	r1, r1, r5
 800b93e:	6021      	streq	r1, [r4, #0]
 800b940:	e7ed      	b.n	800b91e <_free_r+0x22>
 800b942:	461a      	mov	r2, r3
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	b10b      	cbz	r3, 800b94c <_free_r+0x50>
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d9fa      	bls.n	800b942 <_free_r+0x46>
 800b94c:	6811      	ldr	r1, [r2, #0]
 800b94e:	1855      	adds	r5, r2, r1
 800b950:	42a5      	cmp	r5, r4
 800b952:	d10b      	bne.n	800b96c <_free_r+0x70>
 800b954:	6824      	ldr	r4, [r4, #0]
 800b956:	4421      	add	r1, r4
 800b958:	1854      	adds	r4, r2, r1
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	6011      	str	r1, [r2, #0]
 800b95e:	d1e0      	bne.n	800b922 <_free_r+0x26>
 800b960:	681c      	ldr	r4, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	6053      	str	r3, [r2, #4]
 800b966:	440c      	add	r4, r1
 800b968:	6014      	str	r4, [r2, #0]
 800b96a:	e7da      	b.n	800b922 <_free_r+0x26>
 800b96c:	d902      	bls.n	800b974 <_free_r+0x78>
 800b96e:	230c      	movs	r3, #12
 800b970:	6003      	str	r3, [r0, #0]
 800b972:	e7d6      	b.n	800b922 <_free_r+0x26>
 800b974:	6825      	ldr	r5, [r4, #0]
 800b976:	1961      	adds	r1, r4, r5
 800b978:	428b      	cmp	r3, r1
 800b97a:	bf04      	itt	eq
 800b97c:	6819      	ldreq	r1, [r3, #0]
 800b97e:	685b      	ldreq	r3, [r3, #4]
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	bf04      	itt	eq
 800b984:	1949      	addeq	r1, r1, r5
 800b986:	6021      	streq	r1, [r4, #0]
 800b988:	6054      	str	r4, [r2, #4]
 800b98a:	e7ca      	b.n	800b922 <_free_r+0x26>
 800b98c:	b003      	add	sp, #12
 800b98e:	bd30      	pop	{r4, r5, pc}
 800b990:	2000f2b8 	.word	0x2000f2b8

0800b994 <__malloc_lock>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__malloc_lock+0x8>)
 800b996:	f7ff bfa1 	b.w	800b8dc <__retarget_lock_acquire_recursive>
 800b99a:	bf00      	nop
 800b99c:	2000f2b4 	.word	0x2000f2b4

0800b9a0 <__malloc_unlock>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__malloc_unlock+0x8>)
 800b9a2:	f7ff bf9c 	b.w	800b8de <__retarget_lock_release_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	2000f2b4 	.word	0x2000f2b4

0800b9ac <pow>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	ed2d 8b02 	vpush	{d8}
 800b9b2:	eeb0 8a40 	vmov.f32	s16, s0
 800b9b6:	eef0 8a60 	vmov.f32	s17, s1
 800b9ba:	ec55 4b11 	vmov	r4, r5, d1
 800b9be:	f000 f953 	bl	800bc68 <__ieee754_pow>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	ec57 6b10 	vmov	r6, r7, d0
 800b9ce:	f7f5 f855 	bl	8000a7c <__aeabi_dcmpun>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d13b      	bne.n	800ba4e <pow+0xa2>
 800b9d6:	ec51 0b18 	vmov	r0, r1, d8
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f7f5 f81b 	bl	8000a18 <__aeabi_dcmpeq>
 800b9e2:	b1b8      	cbz	r0, 800ba14 <pow+0x68>
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f5 f814 	bl	8000a18 <__aeabi_dcmpeq>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d146      	bne.n	800ba82 <pow+0xd6>
 800b9f4:	ec45 4b10 	vmov	d0, r4, r5
 800b9f8:	f000 f851 	bl	800ba9e <finite>
 800b9fc:	b338      	cbz	r0, 800ba4e <pow+0xa2>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2300      	movs	r3, #0
 800ba02:	4620      	mov	r0, r4
 800ba04:	4629      	mov	r1, r5
 800ba06:	f7f5 f811 	bl	8000a2c <__aeabi_dcmplt>
 800ba0a:	b300      	cbz	r0, 800ba4e <pow+0xa2>
 800ba0c:	f7ff ff3c 	bl	800b888 <__errno>
 800ba10:	2322      	movs	r3, #34	; 0x22
 800ba12:	e01b      	b.n	800ba4c <pow+0xa0>
 800ba14:	ec47 6b10 	vmov	d0, r6, r7
 800ba18:	f000 f841 	bl	800ba9e <finite>
 800ba1c:	b9e0      	cbnz	r0, 800ba58 <pow+0xac>
 800ba1e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba22:	eef0 0a68 	vmov.f32	s1, s17
 800ba26:	f000 f83a 	bl	800ba9e <finite>
 800ba2a:	b1a8      	cbz	r0, 800ba58 <pow+0xac>
 800ba2c:	ec45 4b10 	vmov	d0, r4, r5
 800ba30:	f000 f835 	bl	800ba9e <finite>
 800ba34:	b180      	cbz	r0, 800ba58 <pow+0xac>
 800ba36:	4632      	mov	r2, r6
 800ba38:	463b      	mov	r3, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f5 f81d 	bl	8000a7c <__aeabi_dcmpun>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0e2      	beq.n	800ba0c <pow+0x60>
 800ba46:	f7ff ff1f 	bl	800b888 <__errno>
 800ba4a:	2321      	movs	r3, #33	; 0x21
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	ecbd 8b02 	vpop	{d8}
 800ba52:	ec47 6b10 	vmov	d0, r6, r7
 800ba56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 ffda 	bl	8000a18 <__aeabi_dcmpeq>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d0f2      	beq.n	800ba4e <pow+0xa2>
 800ba68:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6c:	eef0 0a68 	vmov.f32	s1, s17
 800ba70:	f000 f815 	bl	800ba9e <finite>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d0ea      	beq.n	800ba4e <pow+0xa2>
 800ba78:	ec45 4b10 	vmov	d0, r4, r5
 800ba7c:	f000 f80f 	bl	800ba9e <finite>
 800ba80:	e7c3      	b.n	800ba0a <pow+0x5e>
 800ba82:	4f01      	ldr	r7, [pc, #4]	; (800ba88 <pow+0xdc>)
 800ba84:	2600      	movs	r6, #0
 800ba86:	e7e2      	b.n	800ba4e <pow+0xa2>
 800ba88:	3ff00000 	.word	0x3ff00000

0800ba8c <fabs>:
 800ba8c:	ec51 0b10 	vmov	r0, r1, d0
 800ba90:	ee10 2a10 	vmov	r2, s0
 800ba94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba98:	ec43 2b10 	vmov	d0, r2, r3
 800ba9c:	4770      	bx	lr

0800ba9e <finite>:
 800ba9e:	b082      	sub	sp, #8
 800baa0:	ed8d 0b00 	vstr	d0, [sp]
 800baa4:	9801      	ldr	r0, [sp, #4]
 800baa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800baaa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800baae:	0fc0      	lsrs	r0, r0, #31
 800bab0:	b002      	add	sp, #8
 800bab2:	4770      	bx	lr

0800bab4 <__ieee754_sqrt>:
 800bab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	ec55 4b10 	vmov	r4, r5, d0
 800babc:	4e67      	ldr	r6, [pc, #412]	; (800bc5c <__ieee754_sqrt+0x1a8>)
 800babe:	43ae      	bics	r6, r5
 800bac0:	ee10 0a10 	vmov	r0, s0
 800bac4:	ee10 2a10 	vmov	r2, s0
 800bac8:	4629      	mov	r1, r5
 800baca:	462b      	mov	r3, r5
 800bacc:	d10d      	bne.n	800baea <__ieee754_sqrt+0x36>
 800bace:	f7f4 fd3b 	bl	8000548 <__aeabi_dmul>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 fb7f 	bl	80001dc <__adddf3>
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	ec45 4b10 	vmov	d0, r4, r5
 800bae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baea:	2d00      	cmp	r5, #0
 800baec:	dc0b      	bgt.n	800bb06 <__ieee754_sqrt+0x52>
 800baee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800baf2:	4326      	orrs	r6, r4
 800baf4:	d0f5      	beq.n	800bae2 <__ieee754_sqrt+0x2e>
 800baf6:	b135      	cbz	r5, 800bb06 <__ieee754_sqrt+0x52>
 800baf8:	f7f4 fb6e 	bl	80001d8 <__aeabi_dsub>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	f7f4 fe4c 	bl	800079c <__aeabi_ddiv>
 800bb04:	e7eb      	b.n	800bade <__ieee754_sqrt+0x2a>
 800bb06:	1509      	asrs	r1, r1, #20
 800bb08:	f000 808d 	beq.w	800bc26 <__ieee754_sqrt+0x172>
 800bb0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb18:	07c9      	lsls	r1, r1, #31
 800bb1a:	bf5c      	itt	pl
 800bb1c:	005b      	lslpl	r3, r3, #1
 800bb1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bb22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb26:	bf58      	it	pl
 800bb28:	0052      	lslpl	r2, r2, #1
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb30:	1076      	asrs	r6, r6, #1
 800bb32:	0052      	lsls	r2, r2, #1
 800bb34:	f04f 0e16 	mov.w	lr, #22
 800bb38:	46ac      	mov	ip, r5
 800bb3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb3e:	eb0c 0001 	add.w	r0, ip, r1
 800bb42:	4298      	cmp	r0, r3
 800bb44:	bfde      	ittt	le
 800bb46:	1a1b      	suble	r3, r3, r0
 800bb48:	eb00 0c01 	addle.w	ip, r0, r1
 800bb4c:	186d      	addle	r5, r5, r1
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	f1be 0e01 	subs.w	lr, lr, #1
 800bb54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb60:	d1ed      	bne.n	800bb3e <__ieee754_sqrt+0x8a>
 800bb62:	4674      	mov	r4, lr
 800bb64:	2720      	movs	r7, #32
 800bb66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bb6a:	4563      	cmp	r3, ip
 800bb6c:	eb01 000e 	add.w	r0, r1, lr
 800bb70:	dc02      	bgt.n	800bb78 <__ieee754_sqrt+0xc4>
 800bb72:	d113      	bne.n	800bb9c <__ieee754_sqrt+0xe8>
 800bb74:	4290      	cmp	r0, r2
 800bb76:	d811      	bhi.n	800bb9c <__ieee754_sqrt+0xe8>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	eb00 0e01 	add.w	lr, r0, r1
 800bb7e:	da57      	bge.n	800bc30 <__ieee754_sqrt+0x17c>
 800bb80:	f1be 0f00 	cmp.w	lr, #0
 800bb84:	db54      	blt.n	800bc30 <__ieee754_sqrt+0x17c>
 800bb86:	f10c 0801 	add.w	r8, ip, #1
 800bb8a:	eba3 030c 	sub.w	r3, r3, ip
 800bb8e:	4290      	cmp	r0, r2
 800bb90:	bf88      	it	hi
 800bb92:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800bb96:	1a12      	subs	r2, r2, r0
 800bb98:	440c      	add	r4, r1
 800bb9a:	46c4      	mov	ip, r8
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	3f01      	subs	r7, #1
 800bba0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bba4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bba8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bbac:	d1dd      	bne.n	800bb6a <__ieee754_sqrt+0xb6>
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	d01b      	beq.n	800bbea <__ieee754_sqrt+0x136>
 800bbb2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bc60 <__ieee754_sqrt+0x1ac>
 800bbb6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bc64 <__ieee754_sqrt+0x1b0>
 800bbba:	e9da 0100 	ldrd	r0, r1, [sl]
 800bbbe:	e9db 2300 	ldrd	r2, r3, [fp]
 800bbc2:	f7f4 fb09 	bl	80001d8 <__aeabi_dsub>
 800bbc6:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 ff35 	bl	8000a40 <__aeabi_dcmple>
 800bbd6:	b140      	cbz	r0, 800bbea <__ieee754_sqrt+0x136>
 800bbd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800bbdc:	e9da 0100 	ldrd	r0, r1, [sl]
 800bbe0:	e9db 2300 	ldrd	r2, r3, [fp]
 800bbe4:	d126      	bne.n	800bc34 <__ieee754_sqrt+0x180>
 800bbe6:	3501      	adds	r5, #1
 800bbe8:	463c      	mov	r4, r7
 800bbea:	106a      	asrs	r2, r5, #1
 800bbec:	0863      	lsrs	r3, r4, #1
 800bbee:	07e9      	lsls	r1, r5, #31
 800bbf0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bbf4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bbf8:	bf48      	it	mi
 800bbfa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bbfe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bc02:	461c      	mov	r4, r3
 800bc04:	e76d      	b.n	800bae2 <__ieee754_sqrt+0x2e>
 800bc06:	0ad3      	lsrs	r3, r2, #11
 800bc08:	3815      	subs	r0, #21
 800bc0a:	0552      	lsls	r2, r2, #21
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0fa      	beq.n	800bc06 <__ieee754_sqrt+0x152>
 800bc10:	02dc      	lsls	r4, r3, #11
 800bc12:	d50a      	bpl.n	800bc2a <__ieee754_sqrt+0x176>
 800bc14:	f1c1 0420 	rsb	r4, r1, #32
 800bc18:	fa22 f404 	lsr.w	r4, r2, r4
 800bc1c:	1e4d      	subs	r5, r1, #1
 800bc1e:	408a      	lsls	r2, r1
 800bc20:	4323      	orrs	r3, r4
 800bc22:	1b41      	subs	r1, r0, r5
 800bc24:	e772      	b.n	800bb0c <__ieee754_sqrt+0x58>
 800bc26:	4608      	mov	r0, r1
 800bc28:	e7f0      	b.n	800bc0c <__ieee754_sqrt+0x158>
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	3101      	adds	r1, #1
 800bc2e:	e7ef      	b.n	800bc10 <__ieee754_sqrt+0x15c>
 800bc30:	46e0      	mov	r8, ip
 800bc32:	e7aa      	b.n	800bb8a <__ieee754_sqrt+0xd6>
 800bc34:	f7f4 fad2 	bl	80001dc <__adddf3>
 800bc38:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 fef2 	bl	8000a2c <__aeabi_dcmplt>
 800bc48:	b120      	cbz	r0, 800bc54 <__ieee754_sqrt+0x1a0>
 800bc4a:	1ca0      	adds	r0, r4, #2
 800bc4c:	bf08      	it	eq
 800bc4e:	3501      	addeq	r5, #1
 800bc50:	3402      	adds	r4, #2
 800bc52:	e7ca      	b.n	800bbea <__ieee754_sqrt+0x136>
 800bc54:	3401      	adds	r4, #1
 800bc56:	f024 0401 	bic.w	r4, r4, #1
 800bc5a:	e7c6      	b.n	800bbea <__ieee754_sqrt+0x136>
 800bc5c:	7ff00000 	.word	0x7ff00000
 800bc60:	20000078 	.word	0x20000078
 800bc64:	20000080 	.word	0x20000080

0800bc68 <__ieee754_pow>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	ed2d 8b06 	vpush	{d8-d10}
 800bc70:	b089      	sub	sp, #36	; 0x24
 800bc72:	ed8d 1b00 	vstr	d1, [sp]
 800bc76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bc7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bc7e:	ea58 0102 	orrs.w	r1, r8, r2
 800bc82:	ec57 6b10 	vmov	r6, r7, d0
 800bc86:	d115      	bne.n	800bcb4 <__ieee754_pow+0x4c>
 800bc88:	19b3      	adds	r3, r6, r6
 800bc8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bc8e:	4152      	adcs	r2, r2
 800bc90:	4299      	cmp	r1, r3
 800bc92:	4b89      	ldr	r3, [pc, #548]	; (800beb8 <__ieee754_pow+0x250>)
 800bc94:	4193      	sbcs	r3, r2
 800bc96:	f080 84d1 	bcs.w	800c63c <__ieee754_pow+0x9d4>
 800bc9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc9e:	4630      	mov	r0, r6
 800bca0:	4639      	mov	r1, r7
 800bca2:	f7f4 fa9b 	bl	80001dc <__adddf3>
 800bca6:	ec41 0b10 	vmov	d0, r0, r1
 800bcaa:	b009      	add	sp, #36	; 0x24
 800bcac:	ecbd 8b06 	vpop	{d8-d10}
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	4b81      	ldr	r3, [pc, #516]	; (800bebc <__ieee754_pow+0x254>)
 800bcb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bcba:	429c      	cmp	r4, r3
 800bcbc:	ee10 aa10 	vmov	sl, s0
 800bcc0:	463d      	mov	r5, r7
 800bcc2:	dc06      	bgt.n	800bcd2 <__ieee754_pow+0x6a>
 800bcc4:	d101      	bne.n	800bcca <__ieee754_pow+0x62>
 800bcc6:	2e00      	cmp	r6, #0
 800bcc8:	d1e7      	bne.n	800bc9a <__ieee754_pow+0x32>
 800bcca:	4598      	cmp	r8, r3
 800bccc:	dc01      	bgt.n	800bcd2 <__ieee754_pow+0x6a>
 800bcce:	d10f      	bne.n	800bcf0 <__ieee754_pow+0x88>
 800bcd0:	b172      	cbz	r2, 800bcf0 <__ieee754_pow+0x88>
 800bcd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bcd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bcda:	ea55 050a 	orrs.w	r5, r5, sl
 800bcde:	d1dc      	bne.n	800bc9a <__ieee754_pow+0x32>
 800bce0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bce4:	18db      	adds	r3, r3, r3
 800bce6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bcea:	4152      	adcs	r2, r2
 800bcec:	429d      	cmp	r5, r3
 800bcee:	e7d0      	b.n	800bc92 <__ieee754_pow+0x2a>
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	da3b      	bge.n	800bd6c <__ieee754_pow+0x104>
 800bcf4:	4b72      	ldr	r3, [pc, #456]	; (800bec0 <__ieee754_pow+0x258>)
 800bcf6:	4598      	cmp	r8, r3
 800bcf8:	dc51      	bgt.n	800bd9e <__ieee754_pow+0x136>
 800bcfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bcfe:	4598      	cmp	r8, r3
 800bd00:	f340 84ab 	ble.w	800c65a <__ieee754_pow+0x9f2>
 800bd04:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bd08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd0c:	2b14      	cmp	r3, #20
 800bd0e:	dd0f      	ble.n	800bd30 <__ieee754_pow+0xc8>
 800bd10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bd14:	fa22 f103 	lsr.w	r1, r2, r3
 800bd18:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	f040 849c 	bne.w	800c65a <__ieee754_pow+0x9f2>
 800bd22:	f001 0101 	and.w	r1, r1, #1
 800bd26:	f1c1 0302 	rsb	r3, r1, #2
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	b182      	cbz	r2, 800bd50 <__ieee754_pow+0xe8>
 800bd2e:	e05f      	b.n	800bdf0 <__ieee754_pow+0x188>
 800bd30:	2a00      	cmp	r2, #0
 800bd32:	d15b      	bne.n	800bdec <__ieee754_pow+0x184>
 800bd34:	f1c3 0314 	rsb	r3, r3, #20
 800bd38:	fa48 f103 	asr.w	r1, r8, r3
 800bd3c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd40:	4543      	cmp	r3, r8
 800bd42:	f040 8487 	bne.w	800c654 <__ieee754_pow+0x9ec>
 800bd46:	f001 0101 	and.w	r1, r1, #1
 800bd4a:	f1c1 0302 	rsb	r3, r1, #2
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	4b5c      	ldr	r3, [pc, #368]	; (800bec4 <__ieee754_pow+0x25c>)
 800bd52:	4598      	cmp	r8, r3
 800bd54:	d132      	bne.n	800bdbc <__ieee754_pow+0x154>
 800bd56:	f1b9 0f00 	cmp.w	r9, #0
 800bd5a:	f280 8477 	bge.w	800c64c <__ieee754_pow+0x9e4>
 800bd5e:	4959      	ldr	r1, [pc, #356]	; (800bec4 <__ieee754_pow+0x25c>)
 800bd60:	4632      	mov	r2, r6
 800bd62:	463b      	mov	r3, r7
 800bd64:	2000      	movs	r0, #0
 800bd66:	f7f4 fd19 	bl	800079c <__aeabi_ddiv>
 800bd6a:	e79c      	b.n	800bca6 <__ieee754_pow+0x3e>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	d13d      	bne.n	800bdf0 <__ieee754_pow+0x188>
 800bd74:	4b51      	ldr	r3, [pc, #324]	; (800bebc <__ieee754_pow+0x254>)
 800bd76:	4598      	cmp	r8, r3
 800bd78:	d1ea      	bne.n	800bd50 <__ieee754_pow+0xe8>
 800bd7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bd7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bd82:	ea53 030a 	orrs.w	r3, r3, sl
 800bd86:	f000 8459 	beq.w	800c63c <__ieee754_pow+0x9d4>
 800bd8a:	4b4f      	ldr	r3, [pc, #316]	; (800bec8 <__ieee754_pow+0x260>)
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	dd08      	ble.n	800bda2 <__ieee754_pow+0x13a>
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	f2c0 8456 	blt.w	800c644 <__ieee754_pow+0x9dc>
 800bd98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd9c:	e783      	b.n	800bca6 <__ieee754_pow+0x3e>
 800bd9e:	2302      	movs	r3, #2
 800bda0:	e7e5      	b.n	800bd6e <__ieee754_pow+0x106>
 800bda2:	f1b9 0f00 	cmp.w	r9, #0
 800bda6:	f04f 0000 	mov.w	r0, #0
 800bdaa:	f04f 0100 	mov.w	r1, #0
 800bdae:	f6bf af7a 	bge.w	800bca6 <__ieee754_pow+0x3e>
 800bdb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bdb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bdba:	e774      	b.n	800bca6 <__ieee754_pow+0x3e>
 800bdbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bdc0:	d106      	bne.n	800bdd0 <__ieee754_pow+0x168>
 800bdc2:	4632      	mov	r2, r6
 800bdc4:	463b      	mov	r3, r7
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	4639      	mov	r1, r7
 800bdca:	f7f4 fbbd 	bl	8000548 <__aeabi_dmul>
 800bdce:	e76a      	b.n	800bca6 <__ieee754_pow+0x3e>
 800bdd0:	4b3e      	ldr	r3, [pc, #248]	; (800becc <__ieee754_pow+0x264>)
 800bdd2:	4599      	cmp	r9, r3
 800bdd4:	d10c      	bne.n	800bdf0 <__ieee754_pow+0x188>
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	db0a      	blt.n	800bdf0 <__ieee754_pow+0x188>
 800bdda:	ec47 6b10 	vmov	d0, r6, r7
 800bdde:	b009      	add	sp, #36	; 0x24
 800bde0:	ecbd 8b06 	vpop	{d8-d10}
 800bde4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	f7ff be64 	b.w	800bab4 <__ieee754_sqrt>
 800bdec:	2300      	movs	r3, #0
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	ec47 6b10 	vmov	d0, r6, r7
 800bdf4:	f7ff fe4a 	bl	800ba8c <fabs>
 800bdf8:	ec51 0b10 	vmov	r0, r1, d0
 800bdfc:	f1ba 0f00 	cmp.w	sl, #0
 800be00:	d129      	bne.n	800be56 <__ieee754_pow+0x1ee>
 800be02:	b124      	cbz	r4, 800be0e <__ieee754_pow+0x1a6>
 800be04:	4b2f      	ldr	r3, [pc, #188]	; (800bec4 <__ieee754_pow+0x25c>)
 800be06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d123      	bne.n	800be56 <__ieee754_pow+0x1ee>
 800be0e:	f1b9 0f00 	cmp.w	r9, #0
 800be12:	da05      	bge.n	800be20 <__ieee754_pow+0x1b8>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	2000      	movs	r0, #0
 800be1a:	492a      	ldr	r1, [pc, #168]	; (800bec4 <__ieee754_pow+0x25c>)
 800be1c:	f7f4 fcbe 	bl	800079c <__aeabi_ddiv>
 800be20:	2d00      	cmp	r5, #0
 800be22:	f6bf af40 	bge.w	800bca6 <__ieee754_pow+0x3e>
 800be26:	9b04      	ldr	r3, [sp, #16]
 800be28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800be2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be30:	431c      	orrs	r4, r3
 800be32:	d108      	bne.n	800be46 <__ieee754_pow+0x1de>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4610      	mov	r0, r2
 800be3a:	4619      	mov	r1, r3
 800be3c:	f7f4 f9cc 	bl	80001d8 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	e78f      	b.n	800bd66 <__ieee754_pow+0xfe>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	f47f af2c 	bne.w	800bca6 <__ieee754_pow+0x3e>
 800be4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be52:	4619      	mov	r1, r3
 800be54:	e727      	b.n	800bca6 <__ieee754_pow+0x3e>
 800be56:	0feb      	lsrs	r3, r5, #31
 800be58:	3b01      	subs	r3, #1
 800be5a:	9306      	str	r3, [sp, #24]
 800be5c:	9a06      	ldr	r2, [sp, #24]
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	4313      	orrs	r3, r2
 800be62:	d102      	bne.n	800be6a <__ieee754_pow+0x202>
 800be64:	4632      	mov	r2, r6
 800be66:	463b      	mov	r3, r7
 800be68:	e7e6      	b.n	800be38 <__ieee754_pow+0x1d0>
 800be6a:	4b19      	ldr	r3, [pc, #100]	; (800bed0 <__ieee754_pow+0x268>)
 800be6c:	4598      	cmp	r8, r3
 800be6e:	f340 80fb 	ble.w	800c068 <__ieee754_pow+0x400>
 800be72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800be76:	4598      	cmp	r8, r3
 800be78:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <__ieee754_pow+0x260>)
 800be7a:	dd0c      	ble.n	800be96 <__ieee754_pow+0x22e>
 800be7c:	429c      	cmp	r4, r3
 800be7e:	dc0f      	bgt.n	800bea0 <__ieee754_pow+0x238>
 800be80:	f1b9 0f00 	cmp.w	r9, #0
 800be84:	da0f      	bge.n	800bea6 <__ieee754_pow+0x23e>
 800be86:	2000      	movs	r0, #0
 800be88:	b009      	add	sp, #36	; 0x24
 800be8a:	ecbd 8b06 	vpop	{d8-d10}
 800be8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be92:	f000 bcba 	b.w	800c80a <__math_oflow>
 800be96:	429c      	cmp	r4, r3
 800be98:	dbf2      	blt.n	800be80 <__ieee754_pow+0x218>
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <__ieee754_pow+0x25c>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	dd19      	ble.n	800bed4 <__ieee754_pow+0x26c>
 800bea0:	f1b9 0f00 	cmp.w	r9, #0
 800bea4:	dcef      	bgt.n	800be86 <__ieee754_pow+0x21e>
 800bea6:	2000      	movs	r0, #0
 800bea8:	b009      	add	sp, #36	; 0x24
 800beaa:	ecbd 8b06 	vpop	{d8-d10}
 800beae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb2:	f000 bca1 	b.w	800c7f8 <__math_uflow>
 800beb6:	bf00      	nop
 800beb8:	fff00000 	.word	0xfff00000
 800bebc:	7ff00000 	.word	0x7ff00000
 800bec0:	433fffff 	.word	0x433fffff
 800bec4:	3ff00000 	.word	0x3ff00000
 800bec8:	3fefffff 	.word	0x3fefffff
 800becc:	3fe00000 	.word	0x3fe00000
 800bed0:	41e00000 	.word	0x41e00000
 800bed4:	4b60      	ldr	r3, [pc, #384]	; (800c058 <__ieee754_pow+0x3f0>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	f7f4 f97e 	bl	80001d8 <__aeabi_dsub>
 800bedc:	a354      	add	r3, pc, #336	; (adr r3, 800c030 <__ieee754_pow+0x3c8>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	f7f4 fb2f 	bl	8000548 <__aeabi_dmul>
 800beea:	a353      	add	r3, pc, #332	; (adr r3, 800c038 <__ieee754_pow+0x3d0>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	4606      	mov	r6, r0
 800bef2:	460f      	mov	r7, r1
 800bef4:	4620      	mov	r0, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	f7f4 fb26 	bl	8000548 <__aeabi_dmul>
 800befc:	4b57      	ldr	r3, [pc, #348]	; (800c05c <__ieee754_pow+0x3f4>)
 800befe:	4682      	mov	sl, r0
 800bf00:	468b      	mov	fp, r1
 800bf02:	2200      	movs	r2, #0
 800bf04:	4620      	mov	r0, r4
 800bf06:	4629      	mov	r1, r5
 800bf08:	f7f4 fb1e 	bl	8000548 <__aeabi_dmul>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	a14b      	add	r1, pc, #300	; (adr r1, 800c040 <__ieee754_pow+0x3d8>)
 800bf12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf16:	f7f4 f95f 	bl	80001d8 <__aeabi_dsub>
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	f7f4 fb13 	bl	8000548 <__aeabi_dmul>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	2000      	movs	r0, #0
 800bf28:	494d      	ldr	r1, [pc, #308]	; (800c060 <__ieee754_pow+0x3f8>)
 800bf2a:	f7f4 f955 	bl	80001d8 <__aeabi_dsub>
 800bf2e:	4622      	mov	r2, r4
 800bf30:	4680      	mov	r8, r0
 800bf32:	4689      	mov	r9, r1
 800bf34:	462b      	mov	r3, r5
 800bf36:	4620      	mov	r0, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7f4 fb05 	bl	8000548 <__aeabi_dmul>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4640      	mov	r0, r8
 800bf44:	4649      	mov	r1, r9
 800bf46:	f7f4 faff 	bl	8000548 <__aeabi_dmul>
 800bf4a:	a33f      	add	r3, pc, #252	; (adr r3, 800c048 <__ieee754_pow+0x3e0>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f7f4 fafa 	bl	8000548 <__aeabi_dmul>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4650      	mov	r0, sl
 800bf5a:	4659      	mov	r1, fp
 800bf5c:	f7f4 f93c 	bl	80001d8 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4680      	mov	r8, r0
 800bf66:	4689      	mov	r9, r1
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 f936 	bl	80001dc <__adddf3>
 800bf70:	2000      	movs	r0, #0
 800bf72:	4632      	mov	r2, r6
 800bf74:	463b      	mov	r3, r7
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	f7f4 f92d 	bl	80001d8 <__aeabi_dsub>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 f927 	bl	80001d8 <__aeabi_dsub>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	9a06      	ldr	r2, [sp, #24]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	4313      	orrs	r3, r2
 800bf92:	4682      	mov	sl, r0
 800bf94:	468b      	mov	fp, r1
 800bf96:	f040 81e7 	bne.w	800c368 <__ieee754_pow+0x700>
 800bf9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c050 <__ieee754_pow+0x3e8>
 800bf9e:	eeb0 8a47 	vmov.f32	s16, s14
 800bfa2:	eef0 8a67 	vmov.f32	s17, s15
 800bfa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bfaa:	2600      	movs	r6, #0
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfb4:	f7f4 f910 	bl	80001d8 <__aeabi_dsub>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fac4 	bl	8000548 <__aeabi_dmul>
 800bfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4689      	mov	r9, r1
 800bfc8:	4650      	mov	r0, sl
 800bfca:	4659      	mov	r1, fp
 800bfcc:	f7f4 fabc 	bl	8000548 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	f7f4 f900 	bl	80001dc <__adddf3>
 800bfdc:	4632      	mov	r2, r6
 800bfde:	463b      	mov	r3, r7
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4689      	mov	r9, r1
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 faae 	bl	8000548 <__aeabi_dmul>
 800bfec:	460b      	mov	r3, r1
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	4602      	mov	r2, r0
 800bff4:	4649      	mov	r1, r9
 800bff6:	4640      	mov	r0, r8
 800bff8:	f7f4 f8f0 	bl	80001dc <__adddf3>
 800bffc:	4b19      	ldr	r3, [pc, #100]	; (800c064 <__ieee754_pow+0x3fc>)
 800bffe:	4299      	cmp	r1, r3
 800c000:	ec45 4b19 	vmov	d9, r4, r5
 800c004:	4606      	mov	r6, r0
 800c006:	460f      	mov	r7, r1
 800c008:	468b      	mov	fp, r1
 800c00a:	f340 82f0 	ble.w	800c5ee <__ieee754_pow+0x986>
 800c00e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c016:	4303      	orrs	r3, r0
 800c018:	f000 81e4 	beq.w	800c3e4 <__ieee754_pow+0x77c>
 800c01c:	ec51 0b18 	vmov	r0, r1, d8
 800c020:	2200      	movs	r2, #0
 800c022:	2300      	movs	r3, #0
 800c024:	f7f4 fd02 	bl	8000a2c <__aeabi_dcmplt>
 800c028:	3800      	subs	r0, #0
 800c02a:	bf18      	it	ne
 800c02c:	2001      	movne	r0, #1
 800c02e:	e72b      	b.n	800be88 <__ieee754_pow+0x220>
 800c030:	60000000 	.word	0x60000000
 800c034:	3ff71547 	.word	0x3ff71547
 800c038:	f85ddf44 	.word	0xf85ddf44
 800c03c:	3e54ae0b 	.word	0x3e54ae0b
 800c040:	55555555 	.word	0x55555555
 800c044:	3fd55555 	.word	0x3fd55555
 800c048:	652b82fe 	.word	0x652b82fe
 800c04c:	3ff71547 	.word	0x3ff71547
 800c050:	00000000 	.word	0x00000000
 800c054:	bff00000 	.word	0xbff00000
 800c058:	3ff00000 	.word	0x3ff00000
 800c05c:	3fd00000 	.word	0x3fd00000
 800c060:	3fe00000 	.word	0x3fe00000
 800c064:	408fffff 	.word	0x408fffff
 800c068:	4bd5      	ldr	r3, [pc, #852]	; (800c3c0 <__ieee754_pow+0x758>)
 800c06a:	402b      	ands	r3, r5
 800c06c:	2200      	movs	r2, #0
 800c06e:	b92b      	cbnz	r3, 800c07c <__ieee754_pow+0x414>
 800c070:	4bd4      	ldr	r3, [pc, #848]	; (800c3c4 <__ieee754_pow+0x75c>)
 800c072:	f7f4 fa69 	bl	8000548 <__aeabi_dmul>
 800c076:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c07a:	460c      	mov	r4, r1
 800c07c:	1523      	asrs	r3, r4, #20
 800c07e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c082:	4413      	add	r3, r2
 800c084:	9305      	str	r3, [sp, #20]
 800c086:	4bd0      	ldr	r3, [pc, #832]	; (800c3c8 <__ieee754_pow+0x760>)
 800c088:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c08c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c090:	429c      	cmp	r4, r3
 800c092:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c096:	dd08      	ble.n	800c0aa <__ieee754_pow+0x442>
 800c098:	4bcc      	ldr	r3, [pc, #816]	; (800c3cc <__ieee754_pow+0x764>)
 800c09a:	429c      	cmp	r4, r3
 800c09c:	f340 8162 	ble.w	800c364 <__ieee754_pow+0x6fc>
 800c0a0:	9b05      	ldr	r3, [sp, #20]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c0aa:	2400      	movs	r4, #0
 800c0ac:	00e3      	lsls	r3, r4, #3
 800c0ae:	9307      	str	r3, [sp, #28]
 800c0b0:	4bc7      	ldr	r3, [pc, #796]	; (800c3d0 <__ieee754_pow+0x768>)
 800c0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0b6:	ed93 7b00 	vldr	d7, [r3]
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	ec53 2b17 	vmov	r2, r3, d7
 800c0c0:	eeb0 9a47 	vmov.f32	s18, s14
 800c0c4:	eef0 9a67 	vmov.f32	s19, s15
 800c0c8:	4682      	mov	sl, r0
 800c0ca:	f7f4 f885 	bl	80001d8 <__aeabi_dsub>
 800c0ce:	4652      	mov	r2, sl
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	460f      	mov	r7, r1
 800c0d4:	462b      	mov	r3, r5
 800c0d6:	ec51 0b19 	vmov	r0, r1, d9
 800c0da:	f7f4 f87f 	bl	80001dc <__adddf3>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	49bb      	ldr	r1, [pc, #748]	; (800c3d4 <__ieee754_pow+0x76c>)
 800c0e6:	f7f4 fb59 	bl	800079c <__aeabi_ddiv>
 800c0ea:	ec41 0b1a 	vmov	d10, r0, r1
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 fa27 	bl	8000548 <__aeabi_dmul>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c100:	9302      	str	r3, [sp, #8]
 800c102:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c106:	46ab      	mov	fp, r5
 800c108:	106d      	asrs	r5, r5, #1
 800c10a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c10e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c112:	ec41 0b18 	vmov	d8, r0, r1
 800c116:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c11a:	2200      	movs	r2, #0
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	4614      	mov	r4, r2
 800c122:	461d      	mov	r5, r3
 800c124:	f7f4 fa10 	bl	8000548 <__aeabi_dmul>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 f852 	bl	80001d8 <__aeabi_dsub>
 800c134:	ec53 2b19 	vmov	r2, r3, d9
 800c138:	4606      	mov	r6, r0
 800c13a:	460f      	mov	r7, r1
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f84a 	bl	80001d8 <__aeabi_dsub>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4650      	mov	r0, sl
 800c14a:	4659      	mov	r1, fp
 800c14c:	f7f4 f844 	bl	80001d8 <__aeabi_dsub>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	f7f4 f9f8 	bl	8000548 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f83a 	bl	80001d8 <__aeabi_dsub>
 800c164:	ec53 2b1a 	vmov	r2, r3, d10
 800c168:	f7f4 f9ee 	bl	8000548 <__aeabi_dmul>
 800c16c:	ec53 2b18 	vmov	r2, r3, d8
 800c170:	ec41 0b19 	vmov	d9, r0, r1
 800c174:	ec51 0b18 	vmov	r0, r1, d8
 800c178:	f7f4 f9e6 	bl	8000548 <__aeabi_dmul>
 800c17c:	a37c      	add	r3, pc, #496	; (adr r3, 800c370 <__ieee754_pow+0x708>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	4604      	mov	r4, r0
 800c184:	460d      	mov	r5, r1
 800c186:	f7f4 f9df 	bl	8000548 <__aeabi_dmul>
 800c18a:	a37b      	add	r3, pc, #492	; (adr r3, 800c378 <__ieee754_pow+0x710>)
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f7f4 f824 	bl	80001dc <__adddf3>
 800c194:	4622      	mov	r2, r4
 800c196:	462b      	mov	r3, r5
 800c198:	f7f4 f9d6 	bl	8000548 <__aeabi_dmul>
 800c19c:	a378      	add	r3, pc, #480	; (adr r3, 800c380 <__ieee754_pow+0x718>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7f4 f81b 	bl	80001dc <__adddf3>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	f7f4 f9cd 	bl	8000548 <__aeabi_dmul>
 800c1ae:	a376      	add	r3, pc, #472	; (adr r3, 800c388 <__ieee754_pow+0x720>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	f7f4 f812 	bl	80001dc <__adddf3>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	f7f4 f9c4 	bl	8000548 <__aeabi_dmul>
 800c1c0:	a373      	add	r3, pc, #460	; (adr r3, 800c390 <__ieee754_pow+0x728>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 f809 	bl	80001dc <__adddf3>
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	f7f4 f9bb 	bl	8000548 <__aeabi_dmul>
 800c1d2:	a371      	add	r3, pc, #452	; (adr r3, 800c398 <__ieee754_pow+0x730>)
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f7f4 f800 	bl	80001dc <__adddf3>
 800c1dc:	4622      	mov	r2, r4
 800c1de:	4606      	mov	r6, r0
 800c1e0:	460f      	mov	r7, r1
 800c1e2:	462b      	mov	r3, r5
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 f9ae 	bl	8000548 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	f7f4 f9a8 	bl	8000548 <__aeabi_dmul>
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	460d      	mov	r5, r1
 800c1fe:	464b      	mov	r3, r9
 800c200:	ec51 0b18 	vmov	r0, r1, d8
 800c204:	f7f3 ffea 	bl	80001dc <__adddf3>
 800c208:	ec53 2b19 	vmov	r2, r3, d9
 800c20c:	f7f4 f99c 	bl	8000548 <__aeabi_dmul>
 800c210:	4622      	mov	r2, r4
 800c212:	462b      	mov	r3, r5
 800c214:	f7f3 ffe2 	bl	80001dc <__adddf3>
 800c218:	4642      	mov	r2, r8
 800c21a:	4682      	mov	sl, r0
 800c21c:	468b      	mov	fp, r1
 800c21e:	464b      	mov	r3, r9
 800c220:	4640      	mov	r0, r8
 800c222:	4649      	mov	r1, r9
 800c224:	f7f4 f990 	bl	8000548 <__aeabi_dmul>
 800c228:	4b6b      	ldr	r3, [pc, #428]	; (800c3d8 <__ieee754_pow+0x770>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	f7f3 ffd4 	bl	80001dc <__adddf3>
 800c234:	4652      	mov	r2, sl
 800c236:	465b      	mov	r3, fp
 800c238:	f7f3 ffd0 	bl	80001dc <__adddf3>
 800c23c:	2000      	movs	r0, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	f7f4 f97d 	bl	8000548 <__aeabi_dmul>
 800c24e:	4b62      	ldr	r3, [pc, #392]	; (800c3d8 <__ieee754_pow+0x770>)
 800c250:	4680      	mov	r8, r0
 800c252:	4689      	mov	r9, r1
 800c254:	2200      	movs	r2, #0
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f3 ffbd 	bl	80001d8 <__aeabi_dsub>
 800c25e:	4632      	mov	r2, r6
 800c260:	463b      	mov	r3, r7
 800c262:	f7f3 ffb9 	bl	80001d8 <__aeabi_dsub>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4650      	mov	r0, sl
 800c26c:	4659      	mov	r1, fp
 800c26e:	f7f3 ffb3 	bl	80001d8 <__aeabi_dsub>
 800c272:	ec53 2b18 	vmov	r2, r3, d8
 800c276:	f7f4 f967 	bl	8000548 <__aeabi_dmul>
 800c27a:	4622      	mov	r2, r4
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	462b      	mov	r3, r5
 800c282:	ec51 0b19 	vmov	r0, r1, d9
 800c286:	f7f4 f95f 	bl	8000548 <__aeabi_dmul>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4630      	mov	r0, r6
 800c290:	4639      	mov	r1, r7
 800c292:	f7f3 ffa3 	bl	80001dc <__adddf3>
 800c296:	4606      	mov	r6, r0
 800c298:	460f      	mov	r7, r1
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	f7f3 ff9b 	bl	80001dc <__adddf3>
 800c2a6:	a33e      	add	r3, pc, #248	; (adr r3, 800c3a0 <__ieee754_pow+0x738>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	f7f4 f949 	bl	8000548 <__aeabi_dmul>
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	ec41 0b18 	vmov	d8, r0, r1
 800c2bc:	464b      	mov	r3, r9
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	f7f3 ff89 	bl	80001d8 <__aeabi_dsub>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f3 ff83 	bl	80001d8 <__aeabi_dsub>
 800c2d2:	a335      	add	r3, pc, #212	; (adr r3, 800c3a8 <__ieee754_pow+0x740>)
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f7f4 f936 	bl	8000548 <__aeabi_dmul>
 800c2dc:	a334      	add	r3, pc, #208	; (adr r3, 800c3b0 <__ieee754_pow+0x748>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f4 f92d 	bl	8000548 <__aeabi_dmul>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	4639      	mov	r1, r7
 800c2f6:	f7f3 ff71 	bl	80001dc <__adddf3>
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	4b37      	ldr	r3, [pc, #220]	; (800c3dc <__ieee754_pow+0x774>)
 800c2fe:	4413      	add	r3, r2
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f7f3 ff6a 	bl	80001dc <__adddf3>
 800c308:	4682      	mov	sl, r0
 800c30a:	9805      	ldr	r0, [sp, #20]
 800c30c:	468b      	mov	fp, r1
 800c30e:	f7f4 f8b1 	bl	8000474 <__aeabi_i2d>
 800c312:	9a07      	ldr	r2, [sp, #28]
 800c314:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <__ieee754_pow+0x778>)
 800c316:	4413      	add	r3, r2
 800c318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c31c:	4606      	mov	r6, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	4652      	mov	r2, sl
 800c322:	465b      	mov	r3, fp
 800c324:	ec51 0b18 	vmov	r0, r1, d8
 800c328:	f7f3 ff58 	bl	80001dc <__adddf3>
 800c32c:	4642      	mov	r2, r8
 800c32e:	464b      	mov	r3, r9
 800c330:	f7f3 ff54 	bl	80001dc <__adddf3>
 800c334:	4632      	mov	r2, r6
 800c336:	463b      	mov	r3, r7
 800c338:	f7f3 ff50 	bl	80001dc <__adddf3>
 800c33c:	2000      	movs	r0, #0
 800c33e:	4632      	mov	r2, r6
 800c340:	463b      	mov	r3, r7
 800c342:	4604      	mov	r4, r0
 800c344:	460d      	mov	r5, r1
 800c346:	f7f3 ff47 	bl	80001d8 <__aeabi_dsub>
 800c34a:	4642      	mov	r2, r8
 800c34c:	464b      	mov	r3, r9
 800c34e:	f7f3 ff43 	bl	80001d8 <__aeabi_dsub>
 800c352:	ec53 2b18 	vmov	r2, r3, d8
 800c356:	f7f3 ff3f 	bl	80001d8 <__aeabi_dsub>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4650      	mov	r0, sl
 800c360:	4659      	mov	r1, fp
 800c362:	e610      	b.n	800bf86 <__ieee754_pow+0x31e>
 800c364:	2401      	movs	r4, #1
 800c366:	e6a1      	b.n	800c0ac <__ieee754_pow+0x444>
 800c368:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c3b8 <__ieee754_pow+0x750>
 800c36c:	e617      	b.n	800bf9e <__ieee754_pow+0x336>
 800c36e:	bf00      	nop
 800c370:	4a454eef 	.word	0x4a454eef
 800c374:	3fca7e28 	.word	0x3fca7e28
 800c378:	93c9db65 	.word	0x93c9db65
 800c37c:	3fcd864a 	.word	0x3fcd864a
 800c380:	a91d4101 	.word	0xa91d4101
 800c384:	3fd17460 	.word	0x3fd17460
 800c388:	518f264d 	.word	0x518f264d
 800c38c:	3fd55555 	.word	0x3fd55555
 800c390:	db6fabff 	.word	0xdb6fabff
 800c394:	3fdb6db6 	.word	0x3fdb6db6
 800c398:	33333303 	.word	0x33333303
 800c39c:	3fe33333 	.word	0x3fe33333
 800c3a0:	e0000000 	.word	0xe0000000
 800c3a4:	3feec709 	.word	0x3feec709
 800c3a8:	dc3a03fd 	.word	0xdc3a03fd
 800c3ac:	3feec709 	.word	0x3feec709
 800c3b0:	145b01f5 	.word	0x145b01f5
 800c3b4:	be3e2fe0 	.word	0xbe3e2fe0
 800c3b8:	00000000 	.word	0x00000000
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	7ff00000 	.word	0x7ff00000
 800c3c4:	43400000 	.word	0x43400000
 800c3c8:	0003988e 	.word	0x0003988e
 800c3cc:	000bb679 	.word	0x000bb679
 800c3d0:	0800ce30 	.word	0x0800ce30
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	40080000 	.word	0x40080000
 800c3dc:	0800ce50 	.word	0x0800ce50
 800c3e0:	0800ce40 	.word	0x0800ce40
 800c3e4:	a3b3      	add	r3, pc, #716	; (adr r3, 800c6b4 <__ieee754_pow+0xa4c>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f3 fef5 	bl	80001dc <__adddf3>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	ec41 0b1a 	vmov	d10, r0, r1
 800c3f8:	462b      	mov	r3, r5
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f3 feeb 	bl	80001d8 <__aeabi_dsub>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	ec51 0b1a 	vmov	r0, r1, d10
 800c40a:	f7f4 fb2d 	bl	8000a68 <__aeabi_dcmpgt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	f47f ae04 	bne.w	800c01c <__ieee754_pow+0x3b4>
 800c414:	4aa2      	ldr	r2, [pc, #648]	; (800c6a0 <__ieee754_pow+0xa38>)
 800c416:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c41a:	4293      	cmp	r3, r2
 800c41c:	f340 8107 	ble.w	800c62e <__ieee754_pow+0x9c6>
 800c420:	151b      	asrs	r3, r3, #20
 800c422:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c426:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c42a:	fa4a fa03 	asr.w	sl, sl, r3
 800c42e:	44da      	add	sl, fp
 800c430:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c434:	489b      	ldr	r0, [pc, #620]	; (800c6a4 <__ieee754_pow+0xa3c>)
 800c436:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c43a:	4108      	asrs	r0, r1
 800c43c:	ea00 030a 	and.w	r3, r0, sl
 800c440:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c444:	f1c1 0114 	rsb	r1, r1, #20
 800c448:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c44c:	fa4a fa01 	asr.w	sl, sl, r1
 800c450:	f1bb 0f00 	cmp.w	fp, #0
 800c454:	f04f 0200 	mov.w	r2, #0
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	bfb8      	it	lt
 800c45e:	f1ca 0a00 	rsblt	sl, sl, #0
 800c462:	f7f3 feb9 	bl	80001d8 <__aeabi_dsub>
 800c466:	ec41 0b19 	vmov	d9, r0, r1
 800c46a:	4642      	mov	r2, r8
 800c46c:	464b      	mov	r3, r9
 800c46e:	ec51 0b19 	vmov	r0, r1, d9
 800c472:	f7f3 feb3 	bl	80001dc <__adddf3>
 800c476:	a37a      	add	r3, pc, #488	; (adr r3, 800c660 <__ieee754_pow+0x9f8>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	2000      	movs	r0, #0
 800c47e:	4604      	mov	r4, r0
 800c480:	460d      	mov	r5, r1
 800c482:	f7f4 f861 	bl	8000548 <__aeabi_dmul>
 800c486:	ec53 2b19 	vmov	r2, r3, d9
 800c48a:	4606      	mov	r6, r0
 800c48c:	460f      	mov	r7, r1
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f3 fea1 	bl	80001d8 <__aeabi_dsub>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	f7f3 fe9b 	bl	80001d8 <__aeabi_dsub>
 800c4a2:	a371      	add	r3, pc, #452	; (adr r3, 800c668 <__ieee754_pow+0xa00>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f4 f84e 	bl	8000548 <__aeabi_dmul>
 800c4ac:	a370      	add	r3, pc, #448	; (adr r3, 800c670 <__ieee754_pow+0xa08>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	4689      	mov	r9, r1
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7f4 f845 	bl	8000548 <__aeabi_dmul>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	f7f3 fe89 	bl	80001dc <__adddf3>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f3 fe81 	bl	80001dc <__adddf3>
 800c4da:	4632      	mov	r2, r6
 800c4dc:	463b      	mov	r3, r7
 800c4de:	4680      	mov	r8, r0
 800c4e0:	4689      	mov	r9, r1
 800c4e2:	f7f3 fe79 	bl	80001d8 <__aeabi_dsub>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f3 fe73 	bl	80001d8 <__aeabi_dsub>
 800c4f2:	4642      	mov	r2, r8
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	460f      	mov	r7, r1
 800c4f8:	464b      	mov	r3, r9
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	f7f4 f823 	bl	8000548 <__aeabi_dmul>
 800c502:	a35d      	add	r3, pc, #372	; (adr r3, 800c678 <__ieee754_pow+0xa10>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	f7f4 f81c 	bl	8000548 <__aeabi_dmul>
 800c510:	a35b      	add	r3, pc, #364	; (adr r3, 800c680 <__ieee754_pow+0xa18>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 fe5f 	bl	80001d8 <__aeabi_dsub>
 800c51a:	4622      	mov	r2, r4
 800c51c:	462b      	mov	r3, r5
 800c51e:	f7f4 f813 	bl	8000548 <__aeabi_dmul>
 800c522:	a359      	add	r3, pc, #356	; (adr r3, 800c688 <__ieee754_pow+0xa20>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 fe58 	bl	80001dc <__adddf3>
 800c52c:	4622      	mov	r2, r4
 800c52e:	462b      	mov	r3, r5
 800c530:	f7f4 f80a 	bl	8000548 <__aeabi_dmul>
 800c534:	a356      	add	r3, pc, #344	; (adr r3, 800c690 <__ieee754_pow+0xa28>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f3 fe4d 	bl	80001d8 <__aeabi_dsub>
 800c53e:	4622      	mov	r2, r4
 800c540:	462b      	mov	r3, r5
 800c542:	f7f4 f801 	bl	8000548 <__aeabi_dmul>
 800c546:	a354      	add	r3, pc, #336	; (adr r3, 800c698 <__ieee754_pow+0xa30>)
 800c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54c:	f7f3 fe46 	bl	80001dc <__adddf3>
 800c550:	4622      	mov	r2, r4
 800c552:	462b      	mov	r3, r5
 800c554:	f7f3 fff8 	bl	8000548 <__aeabi_dmul>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4640      	mov	r0, r8
 800c55e:	4649      	mov	r1, r9
 800c560:	f7f3 fe3a 	bl	80001d8 <__aeabi_dsub>
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f3 ffea 	bl	8000548 <__aeabi_dmul>
 800c574:	2200      	movs	r2, #0
 800c576:	ec41 0b19 	vmov	d9, r0, r1
 800c57a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c57e:	4620      	mov	r0, r4
 800c580:	4629      	mov	r1, r5
 800c582:	f7f3 fe29 	bl	80001d8 <__aeabi_dsub>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	ec51 0b19 	vmov	r0, r1, d9
 800c58e:	f7f4 f905 	bl	800079c <__aeabi_ddiv>
 800c592:	4632      	mov	r2, r6
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	463b      	mov	r3, r7
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f3 ffd3 	bl	8000548 <__aeabi_dmul>
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	f7f3 fe19 	bl	80001dc <__adddf3>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f7f3 fe11 	bl	80001d8 <__aeabi_dsub>
 800c5b6:	4642      	mov	r2, r8
 800c5b8:	464b      	mov	r3, r9
 800c5ba:	f7f3 fe0d 	bl	80001d8 <__aeabi_dsub>
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	4939      	ldr	r1, [pc, #228]	; (800c6a8 <__ieee754_pow+0xa40>)
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f7f3 fe07 	bl	80001d8 <__aeabi_dsub>
 800c5ca:	ec41 0b10 	vmov	d0, r0, r1
 800c5ce:	ee10 3a90 	vmov	r3, s1
 800c5d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5da:	da2b      	bge.n	800c634 <__ieee754_pow+0x9cc>
 800c5dc:	4650      	mov	r0, sl
 800c5de:	f000 f86f 	bl	800c6c0 <scalbn>
 800c5e2:	ec51 0b10 	vmov	r0, r1, d0
 800c5e6:	ec53 2b18 	vmov	r2, r3, d8
 800c5ea:	f7ff bbee 	b.w	800bdca <__ieee754_pow+0x162>
 800c5ee:	4b2f      	ldr	r3, [pc, #188]	; (800c6ac <__ieee754_pow+0xa44>)
 800c5f0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c5f4:	429e      	cmp	r6, r3
 800c5f6:	f77f af0d 	ble.w	800c414 <__ieee754_pow+0x7ac>
 800c5fa:	4b2d      	ldr	r3, [pc, #180]	; (800c6b0 <__ieee754_pow+0xa48>)
 800c5fc:	440b      	add	r3, r1
 800c5fe:	4303      	orrs	r3, r0
 800c600:	d009      	beq.n	800c616 <__ieee754_pow+0x9ae>
 800c602:	ec51 0b18 	vmov	r0, r1, d8
 800c606:	2200      	movs	r2, #0
 800c608:	2300      	movs	r3, #0
 800c60a:	f7f4 fa0f 	bl	8000a2c <__aeabi_dcmplt>
 800c60e:	3800      	subs	r0, #0
 800c610:	bf18      	it	ne
 800c612:	2001      	movne	r0, #1
 800c614:	e448      	b.n	800bea8 <__ieee754_pow+0x240>
 800c616:	4622      	mov	r2, r4
 800c618:	462b      	mov	r3, r5
 800c61a:	f7f3 fddd 	bl	80001d8 <__aeabi_dsub>
 800c61e:	4642      	mov	r2, r8
 800c620:	464b      	mov	r3, r9
 800c622:	f7f4 fa17 	bl	8000a54 <__aeabi_dcmpge>
 800c626:	2800      	cmp	r0, #0
 800c628:	f43f aef4 	beq.w	800c414 <__ieee754_pow+0x7ac>
 800c62c:	e7e9      	b.n	800c602 <__ieee754_pow+0x99a>
 800c62e:	f04f 0a00 	mov.w	sl, #0
 800c632:	e71a      	b.n	800c46a <__ieee754_pow+0x802>
 800c634:	ec51 0b10 	vmov	r0, r1, d0
 800c638:	4619      	mov	r1, r3
 800c63a:	e7d4      	b.n	800c5e6 <__ieee754_pow+0x97e>
 800c63c:	491a      	ldr	r1, [pc, #104]	; (800c6a8 <__ieee754_pow+0xa40>)
 800c63e:	2000      	movs	r0, #0
 800c640:	f7ff bb31 	b.w	800bca6 <__ieee754_pow+0x3e>
 800c644:	2000      	movs	r0, #0
 800c646:	2100      	movs	r1, #0
 800c648:	f7ff bb2d 	b.w	800bca6 <__ieee754_pow+0x3e>
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7ff bb29 	b.w	800bca6 <__ieee754_pow+0x3e>
 800c654:	9204      	str	r2, [sp, #16]
 800c656:	f7ff bb7b 	b.w	800bd50 <__ieee754_pow+0xe8>
 800c65a:	2300      	movs	r3, #0
 800c65c:	f7ff bb65 	b.w	800bd2a <__ieee754_pow+0xc2>
 800c660:	00000000 	.word	0x00000000
 800c664:	3fe62e43 	.word	0x3fe62e43
 800c668:	fefa39ef 	.word	0xfefa39ef
 800c66c:	3fe62e42 	.word	0x3fe62e42
 800c670:	0ca86c39 	.word	0x0ca86c39
 800c674:	be205c61 	.word	0xbe205c61
 800c678:	72bea4d0 	.word	0x72bea4d0
 800c67c:	3e663769 	.word	0x3e663769
 800c680:	c5d26bf1 	.word	0xc5d26bf1
 800c684:	3ebbbd41 	.word	0x3ebbbd41
 800c688:	af25de2c 	.word	0xaf25de2c
 800c68c:	3f11566a 	.word	0x3f11566a
 800c690:	16bebd93 	.word	0x16bebd93
 800c694:	3f66c16c 	.word	0x3f66c16c
 800c698:	5555553e 	.word	0x5555553e
 800c69c:	3fc55555 	.word	0x3fc55555
 800c6a0:	3fe00000 	.word	0x3fe00000
 800c6a4:	fff00000 	.word	0xfff00000
 800c6a8:	3ff00000 	.word	0x3ff00000
 800c6ac:	4090cbff 	.word	0x4090cbff
 800c6b0:	3f6f3400 	.word	0x3f6f3400
 800c6b4:	652b82fe 	.word	0x652b82fe
 800c6b8:	3c971547 	.word	0x3c971547
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <scalbn>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	ec55 4b10 	vmov	r4, r5, d0
 800c6c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	b999      	cbnz	r1, 800c6f8 <scalbn+0x38>
 800c6d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6d4:	4323      	orrs	r3, r4
 800c6d6:	d03f      	beq.n	800c758 <scalbn+0x98>
 800c6d8:	4b35      	ldr	r3, [pc, #212]	; (800c7b0 <scalbn+0xf0>)
 800c6da:	4629      	mov	r1, r5
 800c6dc:	ee10 0a10 	vmov	r0, s0
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f7f3 ff31 	bl	8000548 <__aeabi_dmul>
 800c6e6:	4b33      	ldr	r3, [pc, #204]	; (800c7b4 <scalbn+0xf4>)
 800c6e8:	429e      	cmp	r6, r3
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	da10      	bge.n	800c712 <scalbn+0x52>
 800c6f0:	a327      	add	r3, pc, #156	; (adr r3, 800c790 <scalbn+0xd0>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	e01f      	b.n	800c738 <scalbn+0x78>
 800c6f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c6fc:	4291      	cmp	r1, r2
 800c6fe:	d10c      	bne.n	800c71a <scalbn+0x5a>
 800c700:	ee10 2a10 	vmov	r2, s0
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fd68 	bl	80001dc <__adddf3>
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	e022      	b.n	800c758 <scalbn+0x98>
 800c712:	460b      	mov	r3, r1
 800c714:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c718:	3936      	subs	r1, #54	; 0x36
 800c71a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c71e:	4296      	cmp	r6, r2
 800c720:	dd0d      	ble.n	800c73e <scalbn+0x7e>
 800c722:	2d00      	cmp	r5, #0
 800c724:	a11c      	add	r1, pc, #112	; (adr r1, 800c798 <scalbn+0xd8>)
 800c726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c72a:	da02      	bge.n	800c732 <scalbn+0x72>
 800c72c:	a11c      	add	r1, pc, #112	; (adr r1, 800c7a0 <scalbn+0xe0>)
 800c72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c732:	a319      	add	r3, pc, #100	; (adr r3, 800c798 <scalbn+0xd8>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 ff06 	bl	8000548 <__aeabi_dmul>
 800c73c:	e7e6      	b.n	800c70c <scalbn+0x4c>
 800c73e:	1872      	adds	r2, r6, r1
 800c740:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c744:	428a      	cmp	r2, r1
 800c746:	dcec      	bgt.n	800c722 <scalbn+0x62>
 800c748:	2a00      	cmp	r2, #0
 800c74a:	dd08      	ble.n	800c75e <scalbn+0x9e>
 800c74c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c750:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c758:	ec45 4b10 	vmov	d0, r4, r5
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
 800c75e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c762:	da08      	bge.n	800c776 <scalbn+0xb6>
 800c764:	2d00      	cmp	r5, #0
 800c766:	a10a      	add	r1, pc, #40	; (adr r1, 800c790 <scalbn+0xd0>)
 800c768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c76c:	dac0      	bge.n	800c6f0 <scalbn+0x30>
 800c76e:	a10e      	add	r1, pc, #56	; (adr r1, 800c7a8 <scalbn+0xe8>)
 800c770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c774:	e7bc      	b.n	800c6f0 <scalbn+0x30>
 800c776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c77a:	3236      	adds	r2, #54	; 0x36
 800c77c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c784:	4620      	mov	r0, r4
 800c786:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <scalbn+0xf8>)
 800c788:	2200      	movs	r2, #0
 800c78a:	e7d5      	b.n	800c738 <scalbn+0x78>
 800c78c:	f3af 8000 	nop.w
 800c790:	c2f8f359 	.word	0xc2f8f359
 800c794:	01a56e1f 	.word	0x01a56e1f
 800c798:	8800759c 	.word	0x8800759c
 800c79c:	7e37e43c 	.word	0x7e37e43c
 800c7a0:	8800759c 	.word	0x8800759c
 800c7a4:	fe37e43c 	.word	0xfe37e43c
 800c7a8:	c2f8f359 	.word	0xc2f8f359
 800c7ac:	81a56e1f 	.word	0x81a56e1f
 800c7b0:	43500000 	.word	0x43500000
 800c7b4:	ffff3cb0 	.word	0xffff3cb0
 800c7b8:	3c900000 	.word	0x3c900000

0800c7bc <with_errno>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	4616      	mov	r6, r2
 800c7c4:	f7ff f860 	bl	800b888 <__errno>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	6006      	str	r6, [r0, #0]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}

0800c7d0 <xflow>:
 800c7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7d2:	4614      	mov	r4, r2
 800c7d4:	461d      	mov	r5, r3
 800c7d6:	b108      	cbz	r0, 800c7dc <xflow+0xc>
 800c7d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7dc:	e9cd 2300 	strd	r2, r3, [sp]
 800c7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7f3 feae 	bl	8000548 <__aeabi_dmul>
 800c7ec:	2222      	movs	r2, #34	; 0x22
 800c7ee:	b003      	add	sp, #12
 800c7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7f4:	f7ff bfe2 	b.w	800c7bc <with_errno>

0800c7f8 <__math_uflow>:
 800c7f8:	b508      	push	{r3, lr}
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c800:	f7ff ffe6 	bl	800c7d0 <xflow>
 800c804:	ec41 0b10 	vmov	d0, r0, r1
 800c808:	bd08      	pop	{r3, pc}

0800c80a <__math_oflow>:
 800c80a:	b508      	push	{r3, lr}
 800c80c:	2200      	movs	r2, #0
 800c80e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c812:	f7ff ffdd 	bl	800c7d0 <xflow>
 800c816:	ec41 0b10 	vmov	d0, r0, r1
 800c81a:	bd08      	pop	{r3, pc}

0800c81c <_init>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	bf00      	nop
 800c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c822:	bc08      	pop	{r3}
 800c824:	469e      	mov	lr, r3
 800c826:	4770      	bx	lr

0800c828 <_fini>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr
