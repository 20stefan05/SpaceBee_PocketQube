
full_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000661c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080067b0  080067b0  000167b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d8  080068d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080068d8  080068d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068d8  080068d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  20000070  08006950  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200012a4  08006950  000212a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011731  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a3  00000000  00000000  00031814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000348b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcb  00000000  00000000  00035850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f2b  00000000  00000000  0003641b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013572  00000000  00000000  00058346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6303  00000000  00000000  0006b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004558  00000000  00000000  00131bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00136114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006794 	.word	0x08006794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006794 	.word	0x08006794

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <read_callibration_data>:
double Temp = 0;

#define atmPress 101325 //Pa

// starts reading the sensor data
void read_callibration_data (void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000bf0:	23aa      	movs	r3, #170	; 0xaa
 8000bf2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, HAL_MAX_DELAY);
 8000bf4:	8afa      	ldrh	r2, [r7, #22]
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2316      	movs	r3, #22
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	463b      	mov	r3, r7
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	21ee      	movs	r1, #238	; 0xee
 8000c08:	4836      	ldr	r0, [pc, #216]	; (8000ce4 <read_callibration_data+0x10c>)
 8000c0a:	f001 fcab 	bl	8002564 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000c0e:	783b      	ldrb	r3, [r7, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <read_callibration_data+0x110>)
 8000c1e:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <read_callibration_data+0x114>)
 8000c30:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000c32:	793b      	ldrb	r3, [r7, #4]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <read_callibration_data+0x118>)
 8000c42:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <read_callibration_data+0x11c>)
 8000c56:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000c58:	7a3b      	ldrb	r3, [r7, #8]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	7a7b      	ldrb	r3, [r7, #9]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <read_callibration_data+0x120>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000c6c:	7abb      	ldrb	r3, [r7, #10]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <read_callibration_data+0x124>)
 8000c7e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <read_callibration_data+0x128>)
 8000c90:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <read_callibration_data+0x12c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ca4:	7c3b      	ldrb	r3, [r7, #16]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	7c7b      	ldrb	r3, [r7, #17]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <read_callibration_data+0x130>)
 8000cb4:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000cb6:	7cbb      	ldrb	r3, [r7, #18]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	7cfb      	ldrb	r3, [r7, #19]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <read_callibration_data+0x134>)
 8000cc6:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000cc8:	7d3b      	ldrb	r3, [r7, #20]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	7d7b      	ldrb	r3, [r7, #21]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <read_callibration_data+0x138>)
 8000cd8:	801a      	strh	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000380 	.word	0x20000380
 8000ce8:	2000008c 	.word	0x2000008c
 8000cec:	2000008e 	.word	0x2000008e
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	20000092 	.word	0x20000092
 8000cf8:	20000094 	.word	0x20000094
 8000cfc:	20000096 	.word	0x20000096
 8000d00:	20000098 	.word	0x20000098
 8000d04:	2000009a 	.word	0x2000009a
 8000d08:	2000009c 	.word	0x2000009c
 8000d0c:	2000009e 	.word	0x2000009e
 8000d10:	200000a0 	.word	0x200000a0

08000d14 <Get_UTemp>:


// Get uncompensated Temp
void Get_UTemp (BMP180_t *Datastruct){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x2E;
 8000d1c:	232e      	movs	r3, #46	; 0x2e
 8000d1e:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp_RAW[2] = {0};
 8000d20:	2300      	movs	r3, #0
 8000d22:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	f107 030f 	add.w	r3, r7, #15
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	22f4      	movs	r2, #244	; 0xf4
 8000d38:	21ee      	movs	r1, #238	; 0xee
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <Get_UTemp+0x6c>)
 8000d3c:	f001 fafe 	bl	800233c <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8000d40:	2005      	movs	r0, #5
 8000d42:	f000 ffb9 	bl	8001cb8 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	22f6      	movs	r2, #246	; 0xf6
 8000d5a:	21ee      	movs	r1, #238	; 0xee
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <Get_UTemp+0x6c>)
 8000d5e:	f001 fc01 	bl	8002564 <HAL_I2C_Mem_Read>
	Datastruct->Temperature_RAW = ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	801a      	strh	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000380 	.word	0x20000380

08000d84 <BMP180_Get_Temp>:

// Updates the temperature
void BMP180_Get_Temp (BMP180_t *Datastruct){
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	Get_UTemp(Datastruct);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffc1 	bl	8000d14 <Get_UTemp>
	UT = Datastruct->Temperature_RAW;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <BMP180_Get_Temp+0x108>)
 8000d9a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <BMP180_Get_Temp+0x108>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <BMP180_Get_Temp+0x10c>)
 8000da2:	8812      	ldrh	r2, [r2, #0]
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb64 	bl	8000474 <__aeabi_i2d>
 8000dac:	4604      	mov	r4, r0
 8000dae:	460d      	mov	r5, r1
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <BMP180_Get_Temp+0x110>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb5d 	bl	8000474 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <BMP180_Get_Temp+0x114>)
 8000dc0:	f7ff fcec 	bl	800079c <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	f7ff fbbc 	bl	8000548 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fe66 	bl	8000aa8 <__aeabi_d2iz>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a2f      	ldr	r2, [pc, #188]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000de0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <BMP180_Get_Temp+0x11c>)
 8000de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb43 	bl	8000474 <__aeabi_i2d>
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <BMP180_Get_Temp+0x120>)
 8000df4:	f7ff fba8 	bl	8000548 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	461d      	mov	r5, r3
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <BMP180_Get_Temp+0x124>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb30 	bl	8000474 <__aeabi_i2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4620      	mov	r0, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	f7ff fcbe 	bl	800079c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fe3e 	bl	8000aa8 <__aeabi_d2iz>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <BMP180_Get_Temp+0x128>)
 8000e30:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <BMP180_Get_Temp+0x118>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <BMP180_Get_Temp+0x128>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <BMP180_Get_Temp+0x12c>)
 8000e3e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <BMP180_Get_Temp+0x12c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3308      	adds	r3, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb14 	bl	8000474 <__aeabi_i2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <BMP180_Get_Temp+0x130>)
 8000e52:	f7ff fca3 	bl	800079c <__aeabi_ddiv>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4917      	ldr	r1, [pc, #92]	; (8000eb8 <BMP180_Get_Temp+0x134>)
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
	Datastruct->Temperature = Temp / 10.0;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <BMP180_Get_Temp+0x134>)
 8000e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <BMP180_Get_Temp+0x138>)
 8000e6c:	f7ff fc96 	bl	800079c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fe5e 	bl	8000b38 <__aeabi_d2f>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	20000096 	.word	0x20000096
 8000e94:	20000094 	.word	0x20000094
 8000e98:	40e00000 	.word	0x40e00000
 8000e9c:	200000ac 	.word	0x200000ac
 8000ea0:	2000009e 	.word	0x2000009e
 8000ea4:	40a00000 	.word	0x40a00000
 8000ea8:	200000a0 	.word	0x200000a0
 8000eac:	200000b0 	.word	0x200000b0
 8000eb0:	200000bc 	.word	0x200000bc
 8000eb4:	40300000 	.word	0x40300000
 8000eb8:	200000d8 	.word	0x200000d8
 8000ebc:	40240000 	.word	0x40240000

08000ec0 <Get_UPress>:

// Get uncompensated Pressure
// oss = oversampling something, currently commented out
void Get_UPress (BMP180_t *Datastruct, int oss){   // oversampling setting 0,1,2,3
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	uint8_t datatowrite = 0x34+(oss<<6);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	019b      	lsls	r3, r3, #6
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3334      	adds	r3, #52	; 0x34
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <Get_UPress+0x80>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	22f4      	movs	r2, #244	; 0xf4
 8000ef6:	21ee      	movs	r1, #238	; 0xee
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <Get_UPress+0x84>)
 8000efa:	f001 fa1f 	bl	800233c <HAL_I2C_Mem_Write>
//			break;
//		case (3):
//			HAL_Delay (26);
//			break;
//	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2303      	movs	r3, #3
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	22f6      	movs	r2, #246	; 0xf6
 8000f12:	21ee      	movs	r1, #238	; 0xee
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <Get_UPress+0x84>)
 8000f16:	f001 fb25 	bl	8002564 <HAL_I2C_Mem_Read>
	Datastruct->Pressure_RAW = (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8000f1a:	7b3b      	ldrb	r3, [r7, #12]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	4413      	add	r3, r2
 8000f24:	7bba      	ldrb	r2, [r7, #14]
 8000f26:	441a      	add	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f1c3 0308 	rsb	r3, r3, #8
 8000f2e:	fa42 f303 	asr.w	r3, r2, r3
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	080067b0 	.word	0x080067b0
 8000f44:	20000380 	.word	0x20000380

08000f48 <BMP180_Get_Press>:

// Updates the pressure
void BMP180_Get_Press (BMP180_t *Datastruct, int oss){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	Get_UPress(Datastruct, oss);
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffb3 	bl	8000ec0 <Get_UPress>
	UP = Datastruct->Pressure_RAW;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4baa      	ldr	r3, [pc, #680]	; (800120c <BMP180_Get_Press+0x2c4>)
 8000f62:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000f64:	4baa      	ldr	r3, [pc, #680]	; (8001210 <BMP180_Get_Press+0x2c8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4aaa      	ldr	r2, [pc, #680]	; (8001214 <BMP180_Get_Press+0x2cc>)
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa80 	bl	8000474 <__aeabi_i2d>
 8000f74:	4604      	mov	r4, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	4ba7      	ldr	r3, [pc, #668]	; (8001218 <BMP180_Get_Press+0x2d0>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa79 	bl	8000474 <__aeabi_i2d>
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4ba5      	ldr	r3, [pc, #660]	; (800121c <BMP180_Get_Press+0x2d4>)
 8000f88:	f7ff fc08 	bl	800079c <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4620      	mov	r0, r4
 8000f92:	4629      	mov	r1, r5
 8000f94:	f7ff fad8 	bl	8000548 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fd82 	bl	8000aa8 <__aeabi_d2iz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000fa8:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <BMP180_Get_Press+0x2dc>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa5f 	bl	8000474 <__aeabi_i2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <BMP180_Get_Press+0x2e0>)
 8000fbc:	f7ff fac4 	bl	8000548 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4614      	mov	r4, r2
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	4b98      	ldr	r3, [pc, #608]	; (800122c <BMP180_Get_Press+0x2e4>)
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b93      	ldr	r3, [pc, #588]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa4c 	bl	8000474 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff fbda 	bl	800079c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd5a 	bl	8000aa8 <__aeabi_d2iz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a8e      	ldr	r2, [pc, #568]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8000ff8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ffa:	4b89      	ldr	r3, [pc, #548]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b8c      	ldr	r3, [pc, #560]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a8b      	ldr	r2, [pc, #556]	; (8001234 <BMP180_Get_Press+0x2ec>)
 8001006:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001008:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <BMP180_Get_Press+0x2ec>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001010:	4a89      	ldr	r2, [pc, #548]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001012:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001014:	4b89      	ldr	r3, [pc, #548]	; (800123c <BMP180_Get_Press+0x2f4>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa2a 	bl	8000474 <__aeabi_i2d>
 8001020:	4604      	mov	r4, r0
 8001022:	460d      	mov	r5, r1
 8001024:	4b84      	ldr	r3, [pc, #528]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a83      	ldr	r2, [pc, #524]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa1f 	bl	8000474 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <BMP180_Get_Press+0x2f8>)
 800103c:	f7ff fbae 	bl	800079c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <BMP180_Get_Press+0x2e0>)
 800105a:	f7ff fb9f 	bl	800079c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fd1f 	bl	8000aa8 <__aeabi_d2iz>
 800106a:	4603      	mov	r3, r0
 800106c:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <BMP180_Get_Press+0x2d8>)
 800106e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <BMP180_Get_Press+0x2fc>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	461a      	mov	r2, r3
 8001078:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9f7 	bl	8000474 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <BMP180_Get_Press+0x2e0>)
 800108c:	f7ff fb86 	bl	800079c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd06 	bl	8000aa8 <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	4a64      	ldr	r2, [pc, #400]	; (8001230 <BMP180_Get_Press+0x2e8>)
 80010a0:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <BMP180_Get_Press+0x2d8>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b62      	ldr	r3, [pc, #392]	; (8001230 <BMP180_Get_Press+0x2e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <BMP180_Get_Press+0x300>)
 80010ae:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BMP180_Get_Press+0x304>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	4b63      	ldr	r3, [pc, #396]	; (8001248 <BMP180_Get_Press+0x300>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	441a      	add	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	3302      	adds	r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da00      	bge.n	80010cc <BMP180_Get_Press+0x184>
 80010ca:	3303      	adds	r3, #3
 80010cc:	109b      	asrs	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b5f      	ldr	r3, [pc, #380]	; (8001250 <BMP180_Get_Press+0x308>)
 80010d2:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80010d4:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <BMP180_Get_Press+0x30c>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <BMP180_Get_Press+0x2f0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9c5 	bl	8000474 <__aeabi_i2d>
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <BMP180_Get_Press+0x310>)
 80010f0:	f7ff fb54 	bl	800079c <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fcd4 	bl	8000aa8 <__aeabi_d2iz>
 8001100:	4603      	mov	r3, r0
 8001102:	4a47      	ldr	r2, [pc, #284]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8001104:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <BMP180_Get_Press+0x314>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9b1 	bl	8000474 <__aeabi_i2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <BMP180_Get_Press+0x2f0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a47      	ldr	r2, [pc, #284]	; (8001238 <BMP180_Get_Press+0x2f0>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9a6 	bl	8000474 <__aeabi_i2d>
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b44      	ldr	r3, [pc, #272]	; (8001240 <BMP180_Get_Press+0x2f8>)
 800112e:	f7ff fb35 	bl	800079c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <BMP180_Get_Press+0x318>)
 800114c:	f7ff fb26 	bl	800079c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fca6 	bl	8000aa8 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	4a34      	ldr	r2, [pc, #208]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001160:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <BMP180_Get_Press+0x2d8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <BMP180_Get_Press+0x2e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	3302      	adds	r3, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f980 	bl	8000474 <__aeabi_i2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <BMP180_Get_Press+0x31c>)
 800117a:	f7ff fb0f 	bl	800079c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc8f 	bl	8000aa8 <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <BMP180_Get_Press+0x300>)
 800118e:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <BMP180_Get_Press+0x320>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <BMP180_Get_Press+0x300>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f956 	bl	8000454 <__aeabi_ui2d>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <BMP180_Get_Press+0x2d4>)
 80011ae:	f7ff faf5 	bl	800079c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc9d 	bl	8000af8 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <BMP180_Get_Press+0x324>)
 80011c2:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <BMP180_Get_Press+0x2c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <BMP180_Get_Press+0x308>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	fa41 f202 	asr.w	r2, r1, r2
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <BMP180_Get_Press+0x328>)
 80011e0:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <BMP180_Get_Press+0x328>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db46      	blt.n	8001278 <BMP180_Get_Press+0x330>
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <BMP180_Get_Press+0x328>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	005a      	lsls	r2, r3, #1
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <BMP180_Get_Press+0x324>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f92b 	bl	8000454 <__aeabi_ui2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	491c      	ldr	r1, [pc, #112]	; (8001274 <BMP180_Get_Press+0x32c>)
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
 8001208:	e045      	b.n	8001296 <BMP180_Get_Press+0x34e>
 800120a:	bf00      	nop
 800120c:	200000a8 	.word	0x200000a8
 8001210:	200000a4 	.word	0x200000a4
 8001214:	20000096 	.word	0x20000096
 8001218:	20000094 	.word	0x20000094
 800121c:	40e00000 	.word	0x40e00000
 8001220:	200000ac 	.word	0x200000ac
 8001224:	2000009e 	.word	0x2000009e
 8001228:	40a00000 	.word	0x40a00000
 800122c:	200000a0 	.word	0x200000a0
 8001230:	200000b0 	.word	0x200000b0
 8001234:	200000bc 	.word	0x200000bc
 8001238:	200000c4 	.word	0x200000c4
 800123c:	2000009a 	.word	0x2000009a
 8001240:	40b00000 	.word	0x40b00000
 8001244:	2000008e 	.word	0x2000008e
 8001248:	200000b4 	.word	0x200000b4
 800124c:	2000008c 	.word	0x2000008c
 8001250:	200000b8 	.word	0x200000b8
 8001254:	20000090 	.word	0x20000090
 8001258:	40c00000 	.word	0x40c00000
 800125c:	20000098 	.word	0x20000098
 8001260:	40f00000 	.word	0x40f00000
 8001264:	40100000 	.word	0x40100000
 8001268:	20000092 	.word	0x20000092
 800126c:	200000c0 	.word	0x200000c0
 8001270:	200000c8 	.word	0x200000c8
 8001274:	200000d0 	.word	0x200000d0
	else Press = (B7/B4)*2;
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <BMP180_Get_Press+0x458>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <BMP180_Get_Press+0x45c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8e4 	bl	8000454 <__aeabi_ui2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4945      	ldr	r1, [pc, #276]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <BMP180_Get_Press+0x464>)
 80012a2:	f7ff fa7b 	bl	800079c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <BMP180_Get_Press+0x460>)
 80012b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <BMP180_Get_Press+0x464>)
 80012ba:	f7ff fa6f 	bl	800079c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fbe9 	bl	8000aa8 <__aeabi_d2iz>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <BMP180_Get_Press+0x468>)
 80012da:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <BMP180_Get_Press+0x468>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f640 32de 	movw	r2, #3038	; 0xbde
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8c3 	bl	8000474 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <BMP180_Get_Press+0x46c>)
 80012f4:	f7ff fa52 	bl	800079c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbd2 	bl	8000aa8 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <BMP180_Get_Press+0x468>)
 8001308:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <BMP180_Get_Press+0x460>)
 800130c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001310:	a321      	add	r3, pc, #132	; (adr r3, 8001398 <BMP180_Get_Press+0x450>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f917 	bl	8000548 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <BMP180_Get_Press+0x46c>)
 8001328:	f7ff fa38 	bl	800079c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fbb8 	bl	8000aa8 <__aeabi_d2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <BMP180_Get_Press+0x470>)
 800133c:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <BMP180_Get_Press+0x468>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <BMP180_Get_Press+0x470>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f891 	bl	8000474 <__aeabi_i2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <BMP180_Get_Press+0x474>)
 8001358:	f7ff fa20 	bl	800079c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7fe ff37 	bl	80001dc <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <BMP180_Get_Press+0x460>)
 8001374:	e9c1 2300 	strd	r2, r3, [r1]

	Datastruct->Pressure = Press;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <BMP180_Get_Press+0x460>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fbd9 	bl	8000b38 <__aeabi_d2f>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	c0bcbd00 	.word	0xc0bcbd00
 80013a0:	200000c8 	.word	0x200000c8
 80013a4:	200000c0 	.word	0x200000c0
 80013a8:	200000d0 	.word	0x200000d0
 80013ac:	40700000 	.word	0x40700000
 80013b0:	200000ac 	.word	0x200000ac
 80013b4:	40f00000 	.word	0x40f00000
 80013b8:	200000b0 	.word	0x200000b0
 80013bc:	40300000 	.word	0x40300000

080013c0 <BMP180_Get_Alt>:

// Updates the altitude
void BMP180_Get_Alt (BMP180_t *Datastruct, int oss){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	BMP180_Get_Press (Datastruct, oss);
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fdbb 	bl	8000f48 <BMP180_Get_Press>
	Datastruct->Altitude = 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <BMP180_Get_Alt+0x90>)
 80013d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d8:	a317      	add	r3, pc, #92	; (adr r3, 8001438 <BMP180_Get_Alt+0x78>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f9dd 	bl	800079c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b17 	vmov	d7, r2, r3
 80013ea:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001440 <BMP180_Get_Alt+0x80>
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f004 fa93 	bl	8005920 <pow>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <BMP180_Get_Alt+0x94>)
 8001404:	f7fe fee8 	bl	80001d8 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	a30d      	add	r3, pc, #52	; (adr r3, 8001448 <BMP180_Get_Alt+0x88>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f897 	bl	8000548 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb89 	bl	8000b38 <__aeabi_d2f>
 8001426:	4602      	mov	r2, r0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	611a      	str	r2, [r3, #16]
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	40f8bcd0 	.word	0x40f8bcd0
 8001440:	ccd745e4 	.word	0xccd745e4
 8001444:	3fc85b95 	.word	0x3fc85b95
 8001448:	00000000 	.word	0x00000000
 800144c:	40e5a540 	.word	0x40e5a540
 8001450:	200000d0 	.word	0x200000d0
 8001454:	3ff00000 	.word	0x3ff00000

08001458 <BMP180_Init>:

// Starts reading the data from the sensor
void BMP180_Init (void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	read_callibration_data();
 800145c:	f7ff fbbc 	bl	8000bd8 <read_callibration_data>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <BMP180_Read_All>:

// Updates all 3 (Temperature, Altitude, Pressure)
void BMP180_Read_All (BMP180_t *Datastruct, int oss){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	BMP180_Get_Temp(Datastruct);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc88 	bl	8000d84 <BMP180_Get_Temp>
	BMP180_Get_Alt(Datastruct, oss); //GetAlt calls GetPress
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <BMP180_Get_Alt>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <BUZZER_Toggle>:

void BUZZER_TurnOff(void){
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, OFF);
}

void BUZZER_Toggle(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN);
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f000 fe9e 	bl	80021d0 <HAL_GPIO_TogglePin>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <LED_TurnOn>:
#define LED_GPIO_PIN GPIO_PIN_3 // LED GPIO PIN = PB3
#define ON SET
#define OFF RESET


void LED_TurnOn(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, ON);
 800149c:	2201      	movs	r2, #1
 800149e:	2108      	movs	r1, #8
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <LED_TurnOn+0x14>)
 80014a2:	f000 fe7d 	bl	80021a0 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	48000400 	.word	0x48000400

080014b0 <LED_Toggle>:

void LED_TurnOff(void){
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, OFF);
}

void LED_Toggle(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_GPIO_PIN);
 80014b4:	2108      	movs	r1, #8
 80014b6:	4802      	ldr	r0, [pc, #8]	; (80014c0 <LED_Toggle+0x10>)
 80014b8:	f000 fe8a 	bl	80021d0 <HAL_GPIO_TogglePin>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	48000400 	.word	0x48000400

080014c4 <MPU6050_Init>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2275      	movs	r2, #117	; 0x75
 80014da:	21d0      	movs	r1, #208	; 0xd0
 80014dc:	4822      	ldr	r0, [pc, #136]	; (8001568 <MPU6050_Init+0xa4>)
 80014de:	f001 f841 	bl	8002564 <HAL_I2C_Mem_Read>

    if(check == 104){ // 0x68 will be returned by the sensor if everything goes well
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b68      	cmp	r3, #104	; 0x68
 80014e6:	d139      	bne.n	800155c <MPU6050_Init+0x98>
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	226b      	movs	r2, #107	; 0x6b
 80014fc:	21d0      	movs	r1, #208	; 0xd0
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <MPU6050_Init+0xa4>)
 8001500:	f000 ff1c 	bl	800233c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001504:	2307      	movs	r3, #7
 8001506:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	2219      	movs	r2, #25
 8001518:	21d0      	movs	r1, #208	; 0xd0
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <MPU6050_Init+0xa4>)
 800151c:	f000 ff0e 	bl	800233c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001520:	2300      	movs	r3, #0
 8001522:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	221c      	movs	r2, #28
 8001534:	21d0      	movs	r1, #208	; 0xd0
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <MPU6050_Init+0xa4>)
 8001538:	f000 ff00 	bl	800233c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800153c:	2300      	movs	r3, #0
 800153e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(MPU6050_I2C, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2301      	movs	r3, #1
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	1dbb      	adds	r3, r7, #6
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	221b      	movs	r2, #27
 8001550:	21d0      	movs	r1, #208	; 0xd0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MPU6050_Init+0xa4>)
 8001554:	f000 fef2 	bl	800233c <HAL_I2C_Mem_Write>
        return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e000      	b.n	800155e <MPU6050_Init+0x9a>
    }
    return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000380 	.word	0x20000380
 800156c:	00000000 	.word	0x00000000

08001570 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(MPU6050_t *DataStruct){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af04      	add	r7, sp, #16
 8001576:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(MPU6050_I2C, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2306      	movs	r3, #6
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	223b      	movs	r2, #59	; 0x3b
 800158a:	21d0      	movs	r1, #208	; 0xd0
 800158c:	482a      	ldr	r0, [pc, #168]	; (8001638 <MPU6050_Read_Accel+0xc8>)
 800158e:	f000 ffe9 	bl	8002564 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001592:	7a3b      	ldrb	r3, [r7, #8]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7a7b      	ldrb	r3, [r7, #9]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80015a4:	7abb      	ldrb	r3, [r7, #10]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff50 	bl	8000474 <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MPU6050_Read_Accel+0xcc>)
 80015da:	f7ff f8df 	bl	800079c <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff40 	bl	8000474 <__aeabi_i2d>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <MPU6050_Read_Accel+0xcc>)
 80015fa:	f7ff f8cf 	bl	800079c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff30 	bl	8000474 <__aeabi_i2d>
 8001614:	a306      	add	r3, pc, #24	; (adr r3, 8001630 <MPU6050_Read_Accel+0xc0>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f8bf 	bl	800079c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	00000000 	.word	0x00000000
 8001634:	40cc2900 	.word	0x40cc2900
 8001638:	20000380 	.word	0x20000380
 800163c:	40d00000 	.word	0x40d00000

08001640 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <vApplicationGetIdleTaskMemory+0x2c>)
 8001650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <vApplicationGetIdleTaskMemory+0x30>)
 8001656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200000e0 	.word	0x200000e0
 8001670:	20000180 	.word	0x20000180

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b09e      	sub	sp, #120	; 0x78
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167a:	f000 faa8 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167e:	f000 f873 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001682:	f000 f905 	bl	8001890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001686:	f000 f8c5 	bl	8001814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Initialize BMP180 and MPU6050 objects
  BMP180_Init();
 800168a:	f7ff fee5 	bl	8001458 <BMP180_Init>
  int answer = MPU6050_Init(); //if MPU6050_Init returns 0, everything is fine
 800168e:	f7ff ff19 	bl	80014c4 <MPU6050_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	677b      	str	r3, [r7, #116]	; 0x74

  //Define the state
  if(answer == 0){
 8001696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <main+0x30>
	  current_state = SAFE;
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <main+0xd0>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e002      	b.n	80016aa <main+0x36>
  } else {
	  current_state = SAFE;
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <main+0xd0>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BMP180_info */
  osThreadDef(BMP180_info, BMP180_all, osPriorityNormal, 0, 128);
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <main+0xd4>)
 80016ac:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016b0:	461d      	mov	r5, r3
 80016b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BMP180_infoHandle = osThreadCreate(osThread(BMP180_info), NULL);
 80016be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fd42 	bl	800414e <osThreadCreate>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <main+0xd8>)
 80016ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of MPU6050_info */
  osThreadDef(MPU6050_info, MPU6050_all, osPriorityNormal, 0, 128);
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <main+0xdc>)
 80016d2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016d6:	461d      	mov	r5, r3
 80016d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050_infoHandle = osThreadCreate(osThread(MPU6050_info), NULL);
 80016e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fd2f 	bl	800414e <osThreadCreate>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <main+0xe0>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of BUZZER_intermit */
  osThreadDef(BUZZER_intermit, BUZZER_blink, osPriorityNormal, 0, 128);
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <main+0xe4>)
 80016f8:	f107 0420 	add.w	r4, r7, #32
 80016fc:	461d      	mov	r5, r3
 80016fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BUZZER_intermitHandle = osThreadCreate(osThread(BUZZER_intermit), NULL);
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fd1c 	bl	800414e <osThreadCreate>
 8001716:	4603      	mov	r3, r0
 8001718:	4a10      	ldr	r2, [pc, #64]	; (800175c <main+0xe8>)
 800171a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_intermit */
  osThreadDef(LED_intermit, LED_blink, osPriorityNormal, 0, 128);
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <main+0xec>)
 800171e:	1d3c      	adds	r4, r7, #4
 8001720:	461d      	mov	r5, r3
 8001722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_intermitHandle = osThreadCreate(osThread(LED_intermit), NULL);
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fd0b 	bl	800414e <osThreadCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <main+0xf0>)
 800173c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800173e:	f002 fcff 	bl	8004140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001742:	e7fe      	b.n	8001742 <main+0xce>
 8001744:	20000450 	.word	0x20000450
 8001748:	080067c0 	.word	0x080067c0
 800174c:	200003d4 	.word	0x200003d4
 8001750:	080067ec 	.word	0x080067ec
 8001754:	200003d8 	.word	0x200003d8
 8001758:	08006818 	.word	0x08006818
 800175c:	200003dc 	.word	0x200003dc
 8001760:	08006844 	.word	0x08006844
 8001764:	200003e0 	.word	0x200003e0

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2244      	movs	r2, #68	; 0x44
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fff0 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800178a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800178e:	f001 fb71 	bl	8002e74 <HAL_PWREx_ControlVoltageScaling>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001798:	f000 f934 	bl	8001a04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800179c:	f001 fb4c 	bl	8002e38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <SystemClock_Config+0xa8>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <SystemClock_Config+0xa8>)
 80017a8:	f023 0318 	bic.w	r3, r3, #24
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017b0:	2314      	movs	r3, #20
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017c0:	2360      	movs	r3, #96	; 0x60
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fba7 	bl	8002f20 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80017d8:	f000 f914 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 ffa7 	bl	8003748 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001800:	f000 f900 	bl	8001a04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001804:	f002 fb82 	bl	8003f0c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001808:	bf00      	nop
 800180a:	3758      	adds	r7, #88	; 0x58
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_I2C1_Init+0x74>)
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <MX_I2C1_Init+0x78>)
 800181c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_I2C1_Init+0x74>)
 8001820:	f640 6214 	movw	r2, #3604	; 0xe14
 8001824:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_I2C1_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_I2C1_Init+0x74>)
 800182e:	2201      	movs	r2, #1
 8001830:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_I2C1_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_I2C1_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_I2C1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_I2C1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_I2C1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_I2C1_Init+0x74>)
 8001852:	f000 fcd7 	bl	8002204 <HAL_I2C_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f8d2 	bl	8001a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	4809      	ldr	r0, [pc, #36]	; (8001888 <MX_I2C1_Init+0x74>)
 8001864:	f001 fa50 	bl	8002d08 <HAL_I2CEx_ConfigAnalogFilter>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800186e:	f000 f8c9 	bl	8001a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_I2C1_Init+0x74>)
 8001876:	f001 fa92 	bl	8002d9e <HAL_I2CEx_ConfigDigitalFilter>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001880:	f000 f8c0 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000380 	.word	0x20000380
 800188c:	40005400 	.word	0x40005400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_GPIO_Init+0xbc>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <MX_GPIO_Init+0xbc>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_GPIO_Init+0xbc>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_GPIO_Init+0xbc>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <MX_GPIO_Init+0xbc>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_GPIO_Init+0xbc>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_GPIO_Init+0xbc>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <MX_GPIO_Init+0xbc>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_GPIO_Init+0xbc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_GPIO_Port, GPIO_Output_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f000 fc52 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OutputB3_GPIO_Port, GPIO_OutputB3_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2108      	movs	r1, #8
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_GPIO_Init+0xc0>)
 8001902:	f000 fc4d 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Output_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_Pin;
 8001906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fad3 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OutputB3_Pin */
  GPIO_InitStruct.Pin = GPIO_OutputB3_Pin;
 8001926:	2308      	movs	r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_OutputB3_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4619      	mov	r1, r3
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_GPIO_Init+0xc0>)
 800193e:	f000 fac5 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400

08001954 <BMP180_all>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BMP180_all */
void BMP180_all(void const * argument)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(current_state == SAFE){
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <BMP180_all+0x28>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <BMP180_all+0x16>
		vTaskSuspend(NULL);
 8001964:	2000      	movs	r0, #0
 8001966:	f002 fee5 	bl	8004734 <vTaskSuspend>
	}
  /* Infinite loop */
  for(;;)
  {
	BMP180_Read_All(&BMP180, 0);
 800196a:	2100      	movs	r1, #0
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <BMP180_all+0x2c>)
 800196e:	f7ff fd79 	bl	8001464 <BMP180_Read_All>
    osDelay(50);
 8001972:	2032      	movs	r0, #50	; 0x32
 8001974:	f002 fc37 	bl	80041e6 <osDelay>
	BMP180_Read_All(&BMP180, 0);
 8001978:	e7f7      	b.n	800196a <BMP180_all+0x16>
 800197a:	bf00      	nop
 800197c:	20000450 	.word	0x20000450
 8001980:	200003e4 	.word	0x200003e4

08001984 <MPU6050_all>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU6050_all */
void MPU6050_all(void const * argument)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU6050_all */
	if(current_state == SAFE){
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MPU6050_all+0x24>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d102      	bne.n	800199a <MPU6050_all+0x16>
		vTaskSuspend(NULL);
 8001994:	2000      	movs	r0, #0
 8001996:	f002 fecd 	bl	8004734 <vTaskSuspend>
	}
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_Accel(&MPU6050);
 800199a:	4804      	ldr	r0, [pc, #16]	; (80019ac <MPU6050_all+0x28>)
 800199c:	f7ff fde8 	bl	8001570 <MPU6050_Read_Accel>
    osDelay(50);
 80019a0:	2032      	movs	r0, #50	; 0x32
 80019a2:	f002 fc20 	bl	80041e6 <osDelay>
	MPU6050_Read_Accel(&MPU6050);
 80019a6:	e7f8      	b.n	800199a <MPU6050_all+0x16>
 80019a8:	20000450 	.word	0x20000450
 80019ac:	200003f8 	.word	0x200003f8

080019b0 <BUZZER_blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BUZZER_blink */
void BUZZER_blink(void const * argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BUZZER_blink */
  /* Infinite loop */
  for(;;)
  {
	if(current_state == SAFE){
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <BUZZER_blink+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d1fb      	bne.n	80019b8 <BUZZER_blink+0x8>
		BUZZER_Toggle();
 80019c0:	f7ff fd60 	bl	8001484 <BUZZER_Toggle>
		osDelay(500);
 80019c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c8:	f002 fc0d 	bl	80041e6 <osDelay>
	if(current_state == SAFE){
 80019cc:	e7f4      	b.n	80019b8 <BUZZER_blink+0x8>
 80019ce:	bf00      	nop
 80019d0:	20000450 	.word	0x20000450

080019d4 <LED_blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_blink */
void LED_blink(void const * argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_blink */
  /* Infinite loop */
  for(;;)
  {
	if(current_state == SAFE){
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <LED_blink+0x2c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <LED_blink+0x1e>
		LED_Toggle();
 80019e4:	f7ff fd64 	bl	80014b0 <LED_Toggle>
		osDelay(500);
 80019e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ec:	f002 fbfb 	bl	80041e6 <osDelay>
 80019f0:	e7f4      	b.n	80019dc <LED_blink+0x8>
	} else if(current_state == NOMINAL){
 80019f2:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <LED_blink+0x2c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <LED_blink+0x8>
		LED_TurnOn();
 80019fa:	f7ff fd4d 	bl	8001498 <LED_TurnOn>
	if(current_state == SAFE){
 80019fe:	e7ed      	b.n	80019dc <LED_blink+0x8>
 8001a00:	20000450 	.word	0x20000450

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	; 0x60
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	210f      	movs	r1, #15
 8001a4a:	f06f 0001 	mvn.w	r0, #1
 8001a4e:	f000 fa14 	bl	8001e7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2254      	movs	r2, #84	; 0x54
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fe6b 	bl	800575c <memset>
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_I2C_MspInit+0xa4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d135      	bne.n	8001afc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 f83f 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff ffac 	bl	8001a04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <HAL_I2C_MspInit+0xac>)
 8001ae0:	f000 f9f4 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3778      	adds	r7, #120	; 0x78
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f89a 	bl	8001c78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b44:	f003 f990 	bl	8004e68 <xTaskGetSchedulerState>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b4e:	f003 fbcb 	bl	80052e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b80:	f7ff ffea 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	; (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	; (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f003 fe3b 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bae:	f7ff fd61 	bl	8001674 <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bc0:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 8001bc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bc8:	200012a4 	.word	0x200012a4

08001bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC1_IRQHandler>

08001bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f943 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f80e 	bl	8001c00 <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	e001      	b.n	8001bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf0:	f7ff ff0e 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_InitTick+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d023      	beq.n	8001c5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_InitTick+0x70>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_InitTick+0x6c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f941 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d809      	bhi.n	8001c50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f919 	bl	8001e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_InitTick+0x74>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e007      	b.n	8001c60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e004      	b.n	8001c60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e001      	b.n	8001c60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000454 	.word	0x20000454

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000454 	.word	0x20000454

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff47 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff5c 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffb0 	bl	8001e20 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e148      	b.n	800216e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 813a 	beq.w	8002168 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_GPIO_Init+0x40>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d130      	bne.n	8001f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d017      	beq.n	8001faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8094 	beq.w	8002168 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_GPIO_Init+0x2c0>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	4a51      	ldr	r2, [pc, #324]	; (800218c <HAL_GPIO_Init+0x2c0>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6613      	str	r3, [r2, #96]	; 0x60
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_GPIO_Init+0x2c0>)
 800204e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002058:	4a4d      	ldr	r2, [pc, #308]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1d4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a43      	ldr	r2, [pc, #268]	; (8002194 <HAL_GPIO_Init+0x2c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1d0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a42      	ldr	r2, [pc, #264]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1cc>
 8002094:	2302      	movs	r3, #2
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1d6>
 8002098:	2307      	movs	r3, #7
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1d6>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1d6>
 80020a0:	2300      	movs	r3, #0
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b2:	4937      	ldr	r1, [pc, #220]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e4:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800210e:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002162:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aeaf 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	48000400 	.word	0x48000400
 8002198:	48000800 	.word	0x48000800
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43d9      	mvns	r1, r3
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	400b      	ands	r3, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08d      	b.n	8002332 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fc18 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	e006      	b.n	800228c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800228a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d108      	bne.n	80022a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	e007      	b.n	80022b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	817b      	strh	r3, [r7, #10]
 800234e:	460b      	mov	r3, r1
 8002350:	813b      	strh	r3, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	f040 80f9 	bne.w	8002556 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_I2C_Mem_Write+0x34>
 800236a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0ed      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_I2C_Mem_Write+0x4e>
 8002386:	2302      	movs	r3, #2
 8002388:	e0e6      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002392:	f7ff fc85 	bl	8001ca0 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2319      	movs	r3, #25
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fac3 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d1      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2221      	movs	r2, #33	; 0x21
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023dc:	88f8      	ldrh	r0, [r7, #6]
 80023de:	893a      	ldrh	r2, [r7, #8]
 80023e0:	8979      	ldrh	r1, [r7, #10]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4603      	mov	r3, r0
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9d3 	bl	8002798 <I2C_RequestMemoryWrite>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0a9      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d90e      	bls.n	800242c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	b2da      	uxtb	r2, r3
 800241a:	8979      	ldrh	r1, [r7, #10]
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fc3d 	bl	8002ca4 <I2C_TransferConfig>
 800242a:	e00f      	b.n	800244c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fc2c 	bl	8002ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fabc 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e07b      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d034      	beq.n	8002504 <HAL_I2C_Mem_Write+0x1c8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d130      	bne.n	8002504 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa3f 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04d      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d90e      	bls.n	80024e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fbe1 	bl	8002ca4 <I2C_TransferConfig>
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fbd0 	bl	8002ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d19e      	bne.n	800244c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 faa2 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01a      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_I2C_Mem_Write+0x224>)
 8002536:	400b      	ands	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80fd 	bne.w	8002786 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_I2C_Mem_Read+0x34>
 8002592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0f1      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x4e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0ea      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ba:	f7ff fb71 	bl	8001ca0 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f9af 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d5      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2222      	movs	r2, #34	; 0x22
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002604:	88f8      	ldrh	r0, [r7, #6]
 8002606:	893a      	ldrh	r2, [r7, #8]
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4603      	mov	r3, r0
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f913 	bl	8002840 <I2C_RequestMemoryRead>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0ad      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <HAL_I2C_Mem_Read+0x22c>)
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fb29 	bl	8002ca4 <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_I2C_Mem_Read+0x22c>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb18 	bl	8002ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2200      	movs	r2, #0
 800267c:	2104      	movs	r1, #4
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f956 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07c      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d034      	beq.n	8002734 <HAL_I2C_Mem_Read+0x1d0>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d130      	bne.n	8002734 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f927 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e04d      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d90e      	bls.n	8002714 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	22ff      	movs	r2, #255	; 0xff
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fac9 	bl	8002ca4 <I2C_TransferConfig>
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	2300      	movs	r3, #0
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fab8 	bl	8002ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d19a      	bne.n	8002674 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f98a 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01a      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2220      	movs	r2, #32
 8002758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_I2C_Mem_Read+0x230>)
 8002766:	400b      	ands	r3, r1
 8002768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	80002400 	.word	0x80002400
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	4b20      	ldr	r3, [pc, #128]	; (800283c <I2C_RequestMemoryWrite+0xa4>)
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fa6f 	bl	8002ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f8ff 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02c      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
 80027ea:	e015      	b.n	8002818 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	69b9      	ldr	r1, [r7, #24]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f8e5 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e012      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800280e:	893b      	ldrh	r3, [r7, #8]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2200      	movs	r2, #0
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f884 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	80002000 	.word	0x80002000

08002840 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <I2C_RequestMemoryRead+0xa4>)
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fa1c 	bl	8002ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f8ac 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e02c      	b.n	80028da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002886:	893b      	ldrh	r3, [r7, #8]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
 8002890:	e015      	b.n	80028be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f892 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e012      	b.n	80028da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f831 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	80002000 	.word	0x80002000

080028e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d103      	bne.n	8002906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	619a      	str	r2, [r3, #24]
  }
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002940:	e031      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d02d      	beq.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f9a9 	bl	8001ca0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d122      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d113      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d0be      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029da:	e033      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f87f 	bl	8002ae4 <I2C_IsErrorOccurred>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e031      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d025      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7ff f952 	bl	8001ca0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11a      	bne.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d013      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1c4      	bne.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	e02f      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f838 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f90f 	bl	8001ca0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d1c8      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d068      	beq.n	8002be2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b18:	e049      	b.n	8002bae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d045      	beq.n	8002bae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7ff f8bd 	bl	8001ca0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_IsErrorOccurred+0x54>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13a      	bne.n	8002bae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5a:	d121      	bne.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b62:	d01d      	beq.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d01a      	beq.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b7a:	f7ff f891 	bl	8001ca0 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	e00e      	b.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7ff f88d 	bl	8001ca0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b19      	cmp	r3, #25
 8002b8e:	d907      	bls.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b9e:	e006      	b.n	8002bae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d1e9      	bne.n	8002b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d003      	beq.n	8002bc4 <I2C_IsErrorOccurred+0xe0>
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0aa      	beq.n	8002b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01c      	beq.n	8002c92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fe45 	bl	80028e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <I2C_IsErrorOccurred+0x1bc>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	fe00e800 	.word	0xfe00e800

08002ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbc:	7a7b      	ldrb	r3, [r7, #9]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	0d5b      	lsrs	r3, r3, #21
 8002cde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <I2C_TransferConfig+0x60>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	ea02 0103 	and.w	r1, r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	03ff63ff 	.word	0x03ff63ff

08002d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d138      	bne.n	8002d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e032      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d139      	bne.n	8002e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e033      	b.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	; 0x24
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40007000 	.word	0x40007000

08002e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e82:	d130      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d038      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2232      	movs	r2, #50	; 0x32
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	e002      	b.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	d110      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e00f      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d007      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f000 bc02 	b.w	8003738 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f34:	4b96      	ldr	r3, [pc, #600]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3e:	4b94      	ldr	r3, [pc, #592]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80e4 	beq.w	800311e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4c>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	f040 808b 	bne.w	800307a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 8087 	bne.w	800307a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x64>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e3d9      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4b81      	ldr	r3, [pc, #516]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_RCC_OscConfig+0x7e>
 8002f94:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	e005      	b.n	8002faa <HAL_RCC_OscConfig+0x8a>
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d223      	bcs.n	8002ff6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fd54 	bl	8003a60 <RCC_SetFlashLatencyFromMSIRange>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e3ba      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc2:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b70      	ldr	r3, [pc, #448]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	496d      	ldr	r1, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	4968      	ldr	r1, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	e025      	b.n	8003042 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff6:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4960      	ldr	r1, [pc, #384]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003014:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	495b      	ldr	r1, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fd14 	bl	8003a60 <RCC_SetFlashLatencyFromMSIRange>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e37a      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003042:	f000 fc81 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	4950      	ldr	r1, [pc, #320]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_RCC_OscConfig+0x278>)
 8003060:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003062:	4b4e      	ldr	r3, [pc, #312]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fdca 	bl	8001c00 <HAL_InitTick>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d052      	beq.n	800311c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	e35e      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d032      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003082:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a42      	ldr	r2, [pc, #264]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800308e:	f7fe fe07 	bl	8001ca0 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003096:	f7fe fe03 	bl	8001ca0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e347      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a35      	ldr	r2, [pc, #212]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030ba:	f043 0308 	orr.w	r3, r3, #8
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4930      	ldr	r1, [pc, #192]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	492b      	ldr	r1, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e01a      	b.n	800311e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fdd4 	bl	8001ca0 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fc:	f7fe fdd0 	bl	8001ca0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e314      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1dc>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d073      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d005      	beq.n	800313c <HAL_RCC_OscConfig+0x21c>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d10e      	bne.n	8003154 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d063      	beq.n	8003210 <HAL_RCC_OscConfig+0x2f0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d15f      	bne.n	8003210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e2f1      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x24c>
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e025      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d114      	bne.n	80031a0 <HAL_RCC_OscConfig+0x280>
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a02      	ldr	r2, [pc, #8]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 8003190:	40021000 	.word	0x40021000
 8003194:	08006868 	.word	0x08006868
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004
 80031a0:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a9f      	ldr	r2, [pc, #636]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b9d      	ldr	r3, [pc, #628]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a9c      	ldr	r2, [pc, #624]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd6e 	bl	8001ca0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd6a 	bl	8001ca0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e2ae      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2a8>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fd5a 	bl	8001ca0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fd56 	bl	8001ca0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e29a      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2d0>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d060      	beq.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x310>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d119      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d116      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	4b7c      	ldr	r3, [pc, #496]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x328>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e277      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4973      	ldr	r1, [pc, #460]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325c:	e040      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d023      	beq.n	80032ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003266:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6e      	ldr	r2, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fd15 	bl	8001ca0 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fd11 	bl	8001ca0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e255      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b65      	ldr	r3, [pc, #404]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b62      	ldr	r3, [pc, #392]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	495f      	ldr	r1, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	e018      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fcf1 	bl	8001ca0 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fced 	bl	8001ca0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e231      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03c      	beq.n	8003366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f4:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fccc 	bl	8001ca0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fcc8 	bl	8001ca0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e20c      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCC_OscConfig+0x3ec>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe fcaf 	bl	8001ca0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fcab 	bl	8001ca0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1ef      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ef      	bne.n	8003346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80a6 	beq.w	80034c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6593      	str	r3, [r2, #88]	; 0x58
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCC_OscConfig+0x508>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d118      	bne.n	80033de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ac:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_RCC_OscConfig+0x508>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_RCC_OscConfig+0x508>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fc72 	bl	8001ca0 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fc6e 	bl	8001ca0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1b2      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_RCC_OscConfig+0x508>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4d8>
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f6:	e029      	b.n	800344c <HAL_RCC_OscConfig+0x52c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d115      	bne.n	800342c <HAL_RCC_OscConfig+0x50c>
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_RCC_OscConfig+0x504>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x52c>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
 800342c:	4b9a      	ldr	r3, [pc, #616]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a99      	ldr	r2, [pc, #612]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343c:	4b96      	ldr	r3, [pc, #600]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a95      	ldr	r2, [pc, #596]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fe fc24 	bl	8001ca0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe fc20 	bl	8001ca0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e162      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ed      	beq.n	800345c <HAL_RCC_OscConfig+0x53c>
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe fc0d 	bl	8001ca0 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fc09 	bl	8001ca0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e14b      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a0:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ed      	bne.n	800348a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b78      	ldr	r3, [pc, #480]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a77      	ldr	r2, [pc, #476]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d03c      	beq.n	8003546 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d4:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80034d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034da:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fbdc 	bl	8001ca0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ec:	f7fe fbd8 	bl	8001ca0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e11c      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fe:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ef      	beq.n	80034ec <HAL_RCC_OscConfig+0x5cc>
 800350c:	e01b      	b.n	8003546 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800350e:	4b62      	ldr	r3, [pc, #392]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003514:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fbbf 	bl	8001ca0 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fe fbbb 	bl	8001ca0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0ff      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003538:	4b57      	ldr	r3, [pc, #348]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 800353a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80f3 	beq.w	8003736 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b02      	cmp	r3, #2
 8003556:	f040 80c9 	bne.w	80036ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0203 	and.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	429a      	cmp	r2, r3
 800356c:	d12c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	3b01      	subs	r3, #1
 800357a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d123      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d11b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d113      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	3b01      	subs	r3, #1
 80035ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d06b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d062      	beq.n	8003694 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035ce:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0ac      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ea:	f7fe fb59 	bl	8001ca0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fb55 	bl	8001ca0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e099      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCC_OscConfig+0x77c>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003620:	3a01      	subs	r2, #1
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800362a:	0212      	lsls	r2, r2, #8
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003632:	0852      	lsrs	r2, r2, #1
 8003634:	3a01      	subs	r2, #1
 8003636:	0552      	lsls	r2, r2, #21
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800363e:	0852      	lsrs	r2, r2, #1
 8003640:	3a01      	subs	r2, #1
 8003642:	0652      	lsls	r2, r2, #25
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800364a:	06d2      	lsls	r2, r2, #27
 800364c:	430a      	orrs	r2, r1
 800364e:	4912      	ldr	r1, [pc, #72]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003650:	4313      	orrs	r3, r2
 8003652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800366c:	f7fe fb18 	bl	8001ca0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fb14 	bl	8001ca0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e058      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_OscConfig+0x778>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003692:	e050      	b.n	8003736 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04f      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
 8003698:	40021000 	.word	0x40021000
 800369c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d144      	bne.n	8003736 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c4:	f7fe faec 	bl	8001ca0 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fae8 	bl	8001ca0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e02c      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x7ac>
 80036ea:	e024      	b.n	8003736 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d01f      	beq.n	8003732 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 80036f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe facf 	bl	8001ca0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe facb 	bl	8001ca0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e00f      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	4905      	ldr	r1, [pc, #20]	; (8003740 <HAL_RCC_OscConfig+0x820>)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800372c:	4013      	ands	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e001      	b.n	8003736 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	feeefffc 	.word	0xfeeefffc

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0e7      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b75      	ldr	r3, [pc, #468]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d910      	bls.n	800378c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 0207 	bic.w	r2, r3, #7
 8003772:	4970      	ldr	r1, [pc, #448]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0cf      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b63      	ldr	r3, [pc, #396]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4960      	ldr	r1, [pc, #384]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04c      	beq.n	8003860 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d121      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0a6      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e09a      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037fe:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e08e      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e086      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0203 	bic.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4943      	ldr	r1, [pc, #268]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fe fa36 	bl	8001ca0 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fe fa32 	bl	8001ca0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e06e      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 020c 	and.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	429a      	cmp	r2, r3
 800385e:	d1eb      	bne.n	8003838 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	429a      	cmp	r2, r3
 800387a:	d208      	bcs.n	800388e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	492b      	ldr	r1, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d210      	bcs.n	80038be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 0207 	bic.w	r2, r3, #7
 80038a4:	4923      	ldr	r1, [pc, #140]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e036      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ca:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4918      	ldr	r1, [pc, #96]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4910      	ldr	r1, [pc, #64]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038fc:	f000 f824 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	490b      	ldr	r1, [pc, #44]	; (800393c <HAL_RCC_ClockConfig+0x1f4>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 800391a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1fc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe f96d 	bl	8001c00 <HAL_InitTick>
 8003926:	4603      	mov	r3, r0
 8003928:	72fb      	strb	r3, [r7, #11]

  return status;
 800392a:	7afb      	ldrb	r3, [r7, #11]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08006868 	.word	0x08006868
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d121      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11e      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e004      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80039ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d134      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0xa6>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d003      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0xac>
 80039ec:	e005      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	e005      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80039f6:	617b      	str	r3, [r7, #20]
      break;
 80039f8:	e002      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	617b      	str	r3, [r7, #20]
      break;
 80039fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	fb03 f202 	mul.w	r2, r3, r2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	0e5b      	lsrs	r3, r3, #25
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	3301      	adds	r3, #1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a40:	69bb      	ldr	r3, [r7, #24]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	08006878 	.word	0x08006878
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a6c:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a78:	f7ff f9ee 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003a7c:	6178      	str	r0, [r7, #20]
 8003a7e:	e014      	b.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a98:	f7ff f9de 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab0:	d10b      	bne.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d919      	bls.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2ba0      	cmp	r3, #160	; 0xa0
 8003abc:	d902      	bls.n	8003ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003abe:	2302      	movs	r3, #2
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e013      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e010      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d902      	bls.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e00a      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d102      	bne.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003adc:	2302      	movs	r3, #2
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e004      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d101      	bne.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae8:	2301      	movs	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 0207 	bic.w	r2, r3, #7
 8003af4:	4909      	ldr	r1, [pc, #36]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40022000 	.word	0x40022000

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b28:	2300      	movs	r3, #0
 8003b2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d031      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b44:	d01a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b4a:	d814      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b54:	d10f      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b56:	4b5d      	ldr	r3, [pc, #372]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b62:	e00c      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f9de 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	74fb      	strb	r3, [r7, #19]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	494e      	ldr	r1, [pc, #312]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 809e 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bb2:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd4:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf0:	f7fe f856 	bl	8001ca0 <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fe f852 	bl	8001ca0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0a:	e005      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ef      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d15a      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d019      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c66:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d016      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f812 	bl	8001ca0 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fe f80e 	bl	8001ca0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d902      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	74fb      	strb	r3, [r7, #19]
            break;
 8003c96:	e006      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ec      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	4904      	ldr	r1, [pc, #16]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4b8a      	ldr	r3, [pc, #552]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a89      	ldr	r2, [pc, #548]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf6:	4b84      	ldr	r3, [pc, #528]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 0203 	bic.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4980      	ldr	r1, [pc, #512]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d18:	4b7b      	ldr	r3, [pc, #492]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	4978      	ldr	r1, [pc, #480]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d3a:	4b73      	ldr	r3, [pc, #460]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	496f      	ldr	r1, [pc, #444]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	4967      	ldr	r1, [pc, #412]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d7e:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	495e      	ldr	r1, [pc, #376]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4956      	ldr	r1, [pc, #344]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc2:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d028      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de4:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4945      	ldr	r1, [pc, #276]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
 8003e10:	e011      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e1a:	d10c      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f882 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d028      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	492d      	ldr	r1, [pc, #180]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6c:	60d3      	str	r3, [r2, #12]
 8003e6e:	e011      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f853 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01c      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f830 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003efc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000

08003f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3a:	4b74      	ldr	r3, [pc, #464]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f46:	4b71      	ldr	r3, [pc, #452]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d10d      	bne.n	8003f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
       ||
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f5e:	4b6b      	ldr	r3, [pc, #428]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d047      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e044      	b.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d018      	beq.n	8003fb2 <RCCEx_PLLSAI1_Config+0x86>
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d825      	bhi.n	8003fd0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <RCCEx_PLLSAI1_Config+0x62>
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d009      	beq.n	8003fa0 <RCCEx_PLLSAI1_Config+0x74>
 8003f8c:	e020      	b.n	8003fd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f8e:	4b5f      	ldr	r3, [pc, #380]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11d      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9e:	e01a      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d116      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb0:	e013      	b.n	8003fda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fb2:	4b56      	ldr	r3, [pc, #344]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fce:	e006      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd4:	e004      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fe6:	4b49      	ldr	r3, [pc, #292]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	4943      	ldr	r1, [pc, #268]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d17c      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004008:	4b40      	ldr	r3, [pc, #256]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3f      	ldr	r2, [pc, #252]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 800400e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fd fe44 	bl	8001ca0 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800401a:	e009      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800401c:	f7fd fe40 	bl	8001ca0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d902      	bls.n	8004030 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	73fb      	strb	r3, [r7, #15]
        break;
 800402e:	e005      	b.n	800403c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004030:	4b36      	ldr	r3, [pc, #216]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ef      	bne.n	800401c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d15f      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d110      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	0211      	lsls	r1, r2, #8
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	06d2      	lsls	r2, r2, #27
 8004060:	430a      	orrs	r2, r1
 8004062:	492a      	ldr	r1, [pc, #168]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
 8004068:	e027      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d112      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004070:	4b26      	ldr	r3, [pc, #152]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	0211      	lsls	r1, r2, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6912      	ldr	r2, [r2, #16]
 8004086:	0852      	lsrs	r2, r2, #1
 8004088:	3a01      	subs	r2, #1
 800408a:	0552      	lsls	r2, r2, #21
 800408c:	430a      	orrs	r2, r1
 800408e:	491f      	ldr	r1, [pc, #124]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
 8004094:	e011      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800409e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	0211      	lsls	r1, r2, #8
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6952      	ldr	r2, [r2, #20]
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0652      	lsls	r2, r2, #25
 80040b2:	430a      	orrs	r2, r1
 80040b4:	4915      	ldr	r1, [pc, #84]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd fdeb 	bl	8001ca0 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040cc:	e009      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ce:	f7fd fde7 	bl	8001ca0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d902      	bls.n	80040e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	73fb      	strb	r3, [r7, #15]
          break;
 80040e0:	e005      	b.n	80040ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000

08004110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800411e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004122:	2b84      	cmp	r3, #132	; 0x84
 8004124:	d005      	beq.n	8004132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	3303      	adds	r3, #3
 8004130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004144:	f000 fb88 	bl	8004858 <vTaskStartScheduler>
  
  return osOK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	bd80      	pop	{r7, pc}

0800414e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800414e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004150:	b089      	sub	sp, #36	; 0x24
 8004152:	af04      	add	r7, sp, #16
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <osThreadCreate+0x54>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685c      	ldr	r4, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691e      	ldr	r6, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ffc8 	bl	8004110 <makeFreeRtosPriority>
 8004180:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800418a:	9202      	str	r2, [sp, #8]
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	9100      	str	r1, [sp, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4632      	mov	r2, r6
 8004194:	4629      	mov	r1, r5
 8004196:	4620      	mov	r0, r4
 8004198:	f000 f8ed 	bl	8004376 <xTaskCreateStatic>
 800419c:	4603      	mov	r3, r0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e01c      	b.n	80041dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685c      	ldr	r4, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ffaa 	bl	8004110 <makeFreeRtosPriority>
 80041bc:	4602      	mov	r2, r0
 80041be:	f107 030c 	add.w	r3, r7, #12
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	9200      	str	r2, [sp, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	4632      	mov	r2, r6
 80041ca:	4629      	mov	r1, r5
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 f92f 	bl	8004430 <xTaskCreate>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <osDelay+0x16>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	e000      	b.n	80041fe <osDelay+0x18>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fa64 	bl	80046cc <vTaskDelay>
  
  return osOK;
 8004204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f103 0208 	add.w	r2, r3, #8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f103 0208 	add.w	r2, r3, #8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 0208 	add.w	r2, r3, #8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d103      	bne.n	80042d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e00c      	b.n	80042ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3308      	adds	r3, #8
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e002      	b.n	80042de <vListInsert+0x2e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d2f6      	bcs.n	80042d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6852      	ldr	r2, [r2, #4]
 8004342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d103      	bne.n	8004356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08e      	sub	sp, #56	; 0x38
 800437a:	af04      	add	r7, sp, #16
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <xTaskCreateStatic+0x46>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	61fb      	str	r3, [r7, #28]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043bc:	23a0      	movs	r3, #160	; 0xa0
 80043be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2ba0      	cmp	r3, #160	; 0xa0
 80043c4:	d00a      	beq.n	80043dc <xTaskCreateStatic+0x66>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61bb      	str	r3, [r7, #24]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01e      	beq.n	8004422 <xTaskCreateStatic+0xac>
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01b      	beq.n	8004422 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043fc:	2300      	movs	r3, #0
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f851 	bl	80044bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800441c:	f000 f8ec 	bl	80045f8 <prvAddNewTaskToReadyList>
 8004420:	e001      	b.n	8004426 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004426:	697b      	ldr	r3, [r7, #20]
	}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4618      	mov	r0, r3
 8004446:	f000 ff9f 	bl	8005388 <pvPortMalloc>
 800444a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004452:	20a0      	movs	r0, #160	; 0xa0
 8004454:	f000 ff98 	bl	8005388 <pvPortMalloc>
 8004458:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
 8004466:	e005      	b.n	8004474 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f001 f859 	bl	8005520 <vPortFree>
 800446e:	e001      	b.n	8004474 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d017      	beq.n	80044aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	2300      	movs	r3, #0
 8004486:	9303      	str	r3, [sp, #12]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	9302      	str	r3, [sp, #8]
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f80f 	bl	80044bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800449e:	69f8      	ldr	r0, [r7, #28]
 80044a0:	f000 f8aa 	bl	80045f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a4:	2301      	movs	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e002      	b.n	80044b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b0:	69bb      	ldr	r3, [r7, #24]
	}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d4:	3b01      	subs	r3, #1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <prvInitialiseNewTask+0x48>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	617b      	str	r3, [r7, #20]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01f      	beq.n	800454a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	e012      	b.n	8004536 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	7819      	ldrb	r1, [r3, #0]
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	3334      	adds	r3, #52	; 0x34
 8004520:	460a      	mov	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d006      	beq.n	800453e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d9e9      	bls.n	8004510 <prvInitialiseNewTask+0x54>
 800453c:	e000      	b.n	8004540 <prvInitialiseNewTask+0x84>
			{
				break;
 800453e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004548:	e003      	b.n	8004552 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	2b06      	cmp	r3, #6
 8004556:	d901      	bls.n	800455c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004558:	2306      	movs	r3, #6
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fe6b 	bl	800424e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	3318      	adds	r3, #24
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fe66 	bl	800424e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	f1c3 0207 	rsb	r2, r3, #7
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	2200      	movs	r2, #0
 800459c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	334c      	adds	r3, #76	; 0x4c
 80045ac:	224c      	movs	r2, #76	; 0x4c
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f8d3 	bl	800575c <memset>
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <prvInitialiseNewTask+0x130>)
 80045ba:	651a      	str	r2, [r3, #80]	; 0x50
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <prvInitialiseNewTask+0x134>)
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	4a0b      	ldr	r2, [pc, #44]	; (80045f4 <prvInitialiseNewTask+0x138>)
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	69b8      	ldr	r0, [r7, #24]
 80045ce:	f000 fccf 	bl	8004f70 <pxPortInitialiseStack>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20001164 	.word	0x20001164
 80045f0:	200011cc 	.word	0x200011cc
 80045f4:	20001234 	.word	0x20001234

080045f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004600:	f000 fde0 	bl	80051c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004604:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800460c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004616:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004624:	f000 fb5e 	bl	8004ce4 <prvInitialiseTaskLists>
 8004628:	e00d      	b.n	8004646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	429a      	cmp	r2, r3
 800463e:	d802      	bhi.n	8004646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 800464e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7ff fdf5 	bl	8004268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800467e:	f000 fdd1 	bl	8005224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d207      	bcs.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <prvAddNewTaskToReadyList+0xd0>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000558 	.word	0x20000558
 80046b4:	20000458 	.word	0x20000458
 80046b8:	20000564 	.word	0x20000564
 80046bc:	20000574 	.word	0x20000574
 80046c0:	20000560 	.word	0x20000560
 80046c4:	2000045c 	.word	0x2000045c
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <vTaskDelay+0x60>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <vTaskDelay+0x30>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046fc:	f000 f916 	bl	800492c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbce 	bl	8004ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004708:	f000 f91e 	bl	8004948 <xTaskResumeAll>
 800470c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <vTaskDelay+0x64>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000580 	.word	0x20000580
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800473c:	f000 fd42 	bl	80051c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <vTaskSuspend+0x18>
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <vTaskSuspend+0x104>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	e000      	b.n	800474e <vTaskSuspend+0x1a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fde4 	bl	8004322 <uxListRemove>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d115      	bne.n	800478c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4935      	ldr	r1, [pc, #212]	; (800483c <vTaskSuspend+0x108>)
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <vTaskSuspend+0x58>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43da      	mvns	r2, r3
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <vTaskSuspend+0x10c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	4a2d      	ldr	r2, [pc, #180]	; (8004840 <vTaskSuspend+0x10c>)
 800478a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3318      	adds	r3, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fdc2 	bl	8004322 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4827      	ldr	r0, [pc, #156]	; (8004844 <vTaskSuspend+0x110>)
 80047a6:	f7ff fd5f 	bl	8004268 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d103      	bne.n	80047be <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80047be:	f000 fd31 	bl	8005224 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <vTaskSuspend+0x114>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80047ca:	f000 fcfb 	bl	80051c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80047ce:	f000 fb2b 	bl	8004e28 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80047d2:	f000 fd27 	bl	8005224 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <vTaskSuspend+0x104>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d127      	bne.n	8004830 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <vTaskSuspend+0x114>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d017      	beq.n	8004818 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <vTaskSuspend+0x118>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <vTaskSuspend+0xd2>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60bb      	str	r3, [r7, #8]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <vTaskSuspend+0x11c>)
 8004808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004816:	e00b      	b.n	8004830 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vTaskSuspend+0x110>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <vTaskSuspend+0x120>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d103      	bne.n	800482c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <vTaskSuspend+0x104>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
	}
 800482a:	e001      	b.n	8004830 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800482c:	f000 f9e0 	bl	8004bf0 <vTaskSwitchContext>
	}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000458 	.word	0x20000458
 800483c:	2000045c 	.word	0x2000045c
 8004840:	20000560 	.word	0x20000560
 8004844:	20000544 	.word	0x20000544
 8004848:	20000564 	.word	0x20000564
 800484c:	20000580 	.word	0x20000580
 8004850:	e000ed04 	.word	0xe000ed04
 8004854:	20000558 	.word	0x20000558

08004858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004866:	463a      	mov	r2, r7
 8004868:	1d39      	adds	r1, r7, #4
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fee6 	bl	8001640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	9202      	str	r2, [sp, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	2300      	movs	r3, #0
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2300      	movs	r3, #0
 8004884:	460a      	mov	r2, r1
 8004886:	4921      	ldr	r1, [pc, #132]	; (800490c <vTaskStartScheduler+0xb4>)
 8004888:	4821      	ldr	r0, [pc, #132]	; (8004910 <vTaskStartScheduler+0xb8>)
 800488a:	f7ff fd74 	bl	8004376 <xTaskCreateStatic>
 800488e:	4603      	mov	r3, r0
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <vTaskStartScheduler+0xbc>)
 8004892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004894:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <vTaskStartScheduler+0xbc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e001      	b.n	80048a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11b      	bne.n	80048e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	613b      	str	r3, [r7, #16]
}
 80048be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <vTaskStartScheduler+0xc0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	334c      	adds	r3, #76	; 0x4c
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <vTaskStartScheduler+0xc4>)
 80048c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <vTaskStartScheduler+0xc8>)
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <vTaskStartScheduler+0xcc>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <vTaskStartScheduler+0xd0>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048de:	f000 fbcf 	bl	8005080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e2:	e00e      	b.n	8004902 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d10a      	bne.n	8004902 <vTaskStartScheduler+0xaa>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	60fb      	str	r3, [r7, #12]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <vTaskStartScheduler+0xa8>
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08006860 	.word	0x08006860
 8004910:	08004cb5 	.word	0x08004cb5
 8004914:	2000057c 	.word	0x2000057c
 8004918:	20000458 	.word	0x20000458
 800491c:	2000005c 	.word	0x2000005c
 8004920:	20000578 	.word	0x20000578
 8004924:	20000564 	.word	0x20000564
 8004928:	2000055c 	.word	0x2000055c

0800492c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <vTaskSuspendAll+0x18>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	4a03      	ldr	r2, [pc, #12]	; (8004944 <vTaskSuspendAll+0x18>)
 8004938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000580 	.word	0x20000580

08004948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <xTaskResumeAll+0x114>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <xTaskResumeAll+0x2c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	603b      	str	r3, [r7, #0]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004974:	f000 fc26 	bl	80051c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004978:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <xTaskResumeAll+0x114>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3b01      	subs	r3, #1
 800497e:	4a37      	ldr	r2, [pc, #220]	; (8004a5c <xTaskResumeAll+0x114>)
 8004980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <xTaskResumeAll+0x114>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d161      	bne.n	8004a4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <xTaskResumeAll+0x118>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05d      	beq.n	8004a4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004992:	e02e      	b.n	80049f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <xTaskResumeAll+0x11c>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3318      	adds	r3, #24
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fcbe 	bl	8004322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fcb9 	bl	8004322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <xTaskResumeAll+0x120>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <xTaskResumeAll+0x120>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <xTaskResumeAll+0x124>)
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7ff fc45 	bl	8004268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <xTaskResumeAll+0x128>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d302      	bcc.n	80049f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <xTaskResumeAll+0x12c>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <xTaskResumeAll+0x11c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1cc      	bne.n	8004994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a00:	f000 fa12 	bl	8004e28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <xTaskResumeAll+0x130>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a10:	f000 f836 	bl	8004a80 <xTaskIncrementTick>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <xTaskResumeAll+0x12c>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f1      	bne.n	8004a10 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <xTaskResumeAll+0x130>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <xTaskResumeAll+0x12c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <xTaskResumeAll+0x134>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a4e:	f000 fbe9 	bl	8005224 <vPortExitCritical>

	return xAlreadyYielded;
 8004a52:	68bb      	ldr	r3, [r7, #8]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000580 	.word	0x20000580
 8004a60:	20000558 	.word	0x20000558
 8004a64:	20000518 	.word	0x20000518
 8004a68:	20000560 	.word	0x20000560
 8004a6c:	2000045c 	.word	0x2000045c
 8004a70:	20000458 	.word	0x20000458
 8004a74:	2000056c 	.word	0x2000056c
 8004a78:	20000568 	.word	0x20000568
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <xTaskIncrementTick+0x144>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 808e 	bne.w	8004bb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <xTaskIncrementTick+0x148>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	; (8004bc8 <xTaskIncrementTick+0x148>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d120      	bne.n	8004aea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa8:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xTaskIncrementTick+0x46>
 8004ac8:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3e      	ldr	r2, [pc, #248]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4a3e      	ldr	r2, [pc, #248]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	f000 f99f 	bl	8004e28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d348      	bcc.n	8004b86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afe:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	601a      	str	r2, [r3, #0]
					break;
 8004b06:	e03e      	b.n	8004b86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d203      	bcs.n	8004b28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b26:	e02e      	b.n	8004b86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fbf8 	bl	8004322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fbef 	bl	8004322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	2201      	movs	r2, #1
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004b64:	441a      	add	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7ff fb7b 	bl	8004268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d3b9      	bcc.n	8004af4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b84:	e7b6      	b.n	8004af4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	4914      	ldr	r1, [pc, #80]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d901      	bls.n	8004ba2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <xTaskIncrementTick+0x168>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004baa:	2301      	movs	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e004      	b.n	8004bba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <xTaskIncrementTick+0x16c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <xTaskIncrementTick+0x16c>)
 8004bb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bba:	697b      	ldr	r3, [r7, #20]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000580 	.word	0x20000580
 8004bc8:	2000055c 	.word	0x2000055c
 8004bcc:	20000510 	.word	0x20000510
 8004bd0:	20000514 	.word	0x20000514
 8004bd4:	20000570 	.word	0x20000570
 8004bd8:	20000578 	.word	0x20000578
 8004bdc:	20000560 	.word	0x20000560
 8004be0:	2000045c 	.word	0x2000045c
 8004be4:	20000458 	.word	0x20000458
 8004be8:	2000056c 	.word	0x2000056c
 8004bec:	20000568 	.word	0x20000568

08004bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <vTaskSwitchContext+0xac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <vTaskSwitchContext+0xb0>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c04:	e044      	b.n	8004c90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <vTaskSwitchContext+0xb0>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <vTaskSwitchContext+0xb4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	f1c3 031f 	rsb	r3, r3, #31
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	4921      	ldr	r1, [pc, #132]	; (8004ca8 <vTaskSwitchContext+0xb8>)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	607b      	str	r3, [r7, #4]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <vTaskSwitchContext+0x5a>
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <vTaskSwitchContext+0xb8>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d104      	bne.n	8004c7c <vTaskSwitchContext+0x8c>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <vTaskSwitchContext+0xbc>)
 8004c84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <vTaskSwitchContext+0xbc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	334c      	adds	r3, #76	; 0x4c
 8004c8c:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <vTaskSwitchContext+0xc0>)
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000580 	.word	0x20000580
 8004ca0:	2000056c 	.word	0x2000056c
 8004ca4:	20000560 	.word	0x20000560
 8004ca8:	2000045c 	.word	0x2000045c
 8004cac:	20000458 	.word	0x20000458
 8004cb0:	2000005c 	.word	0x2000005c

08004cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cbc:	f000 f852 	bl	8004d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <prvIdleTask+0x28>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d9f9      	bls.n	8004cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <prvIdleTask+0x2c>)
 8004cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cd8:	e7f0      	b.n	8004cbc <prvIdleTask+0x8>
 8004cda:	bf00      	nop
 8004cdc:	2000045c 	.word	0x2000045c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	e00c      	b.n	8004d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <prvInitialiseTaskLists+0x60>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fa85 	bl	800420e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3301      	adds	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b06      	cmp	r3, #6
 8004d0e:	d9ef      	bls.n	8004cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d10:	480d      	ldr	r0, [pc, #52]	; (8004d48 <prvInitialiseTaskLists+0x64>)
 8004d12:	f7ff fa7c 	bl	800420e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d16:	480d      	ldr	r0, [pc, #52]	; (8004d4c <prvInitialiseTaskLists+0x68>)
 8004d18:	f7ff fa79 	bl	800420e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d1c:	480c      	ldr	r0, [pc, #48]	; (8004d50 <prvInitialiseTaskLists+0x6c>)
 8004d1e:	f7ff fa76 	bl	800420e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d22:	480c      	ldr	r0, [pc, #48]	; (8004d54 <prvInitialiseTaskLists+0x70>)
 8004d24:	f7ff fa73 	bl	800420e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d28:	480b      	ldr	r0, [pc, #44]	; (8004d58 <prvInitialiseTaskLists+0x74>)
 8004d2a:	f7ff fa70 	bl	800420e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <prvInitialiseTaskLists+0x78>)
 8004d30:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <prvInitialiseTaskLists+0x64>)
 8004d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvInitialiseTaskLists+0x7c>)
 8004d36:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <prvInitialiseTaskLists+0x68>)
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	2000045c 	.word	0x2000045c
 8004d48:	200004e8 	.word	0x200004e8
 8004d4c:	200004fc 	.word	0x200004fc
 8004d50:	20000518 	.word	0x20000518
 8004d54:	2000052c 	.word	0x2000052c
 8004d58:	20000544 	.word	0x20000544
 8004d5c:	20000510 	.word	0x20000510
 8004d60:	20000514 	.word	0x20000514

08004d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6a:	e019      	b.n	8004da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d6c:	f000 fa2a 	bl	80051c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <prvCheckTasksWaitingTermination+0x50>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fad0 	bl	8004322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <prvCheckTasksWaitingTermination+0x54>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <prvCheckTasksWaitingTermination+0x54>)
 8004d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <prvCheckTasksWaitingTermination+0x58>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <prvCheckTasksWaitingTermination+0x58>)
 8004d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d96:	f000 fa45 	bl	8005224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f810 	bl	8004dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <prvCheckTasksWaitingTermination+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e1      	bne.n	8004d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	2000052c 	.word	0x2000052c
 8004db8:	20000558 	.word	0x20000558
 8004dbc:	20000540 	.word	0x20000540

08004dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	334c      	adds	r3, #76	; 0x4c
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fccd 	bl	800576c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fb9d 	bl	8005520 <vPortFree>
				vPortFree( pxTCB );
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fb9a 	bl	8005520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dec:	e018      	b.n	8004e20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d103      	bne.n	8004e00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fb91 	bl	8005520 <vPortFree>
	}
 8004dfe:	e00f      	b.n	8004e20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d00a      	beq.n	8004e20 <prvDeleteTCB+0x60>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60fb      	str	r3, [r7, #12]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <prvDeleteTCB+0x5e>
	}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <prvResetNextTaskUnblockTime+0x38>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <prvResetNextTaskUnblockTime+0x3c>)
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e40:	e008      	b.n	8004e54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <prvResetNextTaskUnblockTime+0x38>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <prvResetNextTaskUnblockTime+0x3c>)
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20000510 	.word	0x20000510
 8004e64:	20000578 	.word	0x20000578

08004e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <xTaskGetSchedulerState+0x34>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e76:	2301      	movs	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e008      	b.n	8004e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <xTaskGetSchedulerState+0x38>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e84:	2302      	movs	r3, #2
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	e001      	b.n	8004e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e8e:	687b      	ldr	r3, [r7, #4]
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	20000564 	.word	0x20000564
 8004ea0:	20000580 	.word	0x20000580

08004ea4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fa31 	bl	8004322 <uxListRemove>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	2201      	movs	r2, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004edc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d10a      	bne.n	8004efc <prvAddCurrentTaskToDelayedList+0x58>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	481a      	ldr	r0, [pc, #104]	; (8004f60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ef6:	f7ff f9b7 	bl	8004268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004efa:	e026      	b.n	8004f4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f04:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d209      	bcs.n	8004f28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7ff f9c5 	bl	80042b0 <vListInsert>
}
 8004f26:	e010      	b.n	8004f4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f7ff f9bb 	bl	80042b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d202      	bcs.n	8004f4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6013      	str	r3, [r2, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2000055c 	.word	0x2000055c
 8004f58:	20000458 	.word	0x20000458
 8004f5c:	20000560 	.word	0x20000560
 8004f60:	20000544 	.word	0x20000544
 8004f64:	20000514 	.word	0x20000514
 8004f68:	20000510 	.word	0x20000510
 8004f6c:	20000578 	.word	0x20000578

08004f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3b04      	subs	r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b04      	subs	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <pxPortInitialiseStack+0x64>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b14      	subs	r3, #20
 8004faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3b04      	subs	r3, #4
 8004fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f06f 0202 	mvn.w	r2, #2
 8004fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3b20      	subs	r3, #32
 8004fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	08004fd9 	.word	0x08004fd9

08004fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <prvTaskExitError+0x54>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fea:	d00a      	beq.n	8005002 <prvTaskExitError+0x2a>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	60fb      	str	r3, [r7, #12]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <prvTaskExitError+0x28>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60bb      	str	r3, [r7, #8]
}
 8005014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005016:	bf00      	nop
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0fc      	beq.n	8005018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	2000000c 	.word	0x2000000c

08005030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <pxCurrentTCBConst2>)
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	f380 8809 	msr	PSP, r0
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8811 	msr	BASEPRI, r0
 800504a:	4770      	bx	lr
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst2>:
 8005050:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005058:	4808      	ldr	r0, [pc, #32]	; (800507c <prvPortStartFirstTask+0x24>)
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f380 8808 	msr	MSP, r0
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8814 	msr	CONTROL, r0
 800506a:	b662      	cpsie	i
 800506c:	b661      	cpsie	f
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	df00      	svc	0
 8005078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800507a:	bf00      	nop
 800507c:	e000ed08 	.word	0xe000ed08

08005080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005086:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <xPortStartScheduler+0x120>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a46      	ldr	r2, [pc, #280]	; (80051a4 <xPortStartScheduler+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10a      	bne.n	80050a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050a6:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <xPortStartScheduler+0x120>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <xPortStartScheduler+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10a      	bne.n	80050c6 <xPortStartScheduler+0x46>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <xPortStartScheduler+0x12c>)
 80050c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <xPortStartScheduler+0x130>)
 80050ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <xPortStartScheduler+0x134>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050f4:	e009      	b.n	800510a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050f6:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <xPortStartScheduler+0x134>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <xPortStartScheduler+0x134>)
 80050fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d0ef      	beq.n	80050f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <xPortStartScheduler+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1c3 0307 	rsb	r3, r3, #7
 800511e:	2b04      	cmp	r3, #4
 8005120:	d00a      	beq.n	8005138 <xPortStartScheduler+0xb8>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005138:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <xPortStartScheduler+0x134>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <xPortStartScheduler+0x134>)
 8005140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xPortStartScheduler+0x134>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <xPortStartScheduler+0x134>)
 800514c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <xPortStartScheduler+0x138>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <xPortStartScheduler+0x138>)
 800515c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <xPortStartScheduler+0x138>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <xPortStartScheduler+0x138>)
 8005168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800516c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800516e:	f000 f8dd 	bl	800532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <xPortStartScheduler+0x13c>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005178:	f000 f8fc 	bl	8005374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <xPortStartScheduler+0x140>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <xPortStartScheduler+0x140>)
 8005182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005188:	f7ff ff66 	bl	8005058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800518c:	f7ff fd30 	bl	8004bf0 <vTaskSwitchContext>
	prvTaskExitError();
 8005190:	f7ff ff22 	bl	8004fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	410fc271 	.word	0x410fc271
 80051a8:	410fc270 	.word	0x410fc270
 80051ac:	e000e400 	.word	0xe000e400
 80051b0:	20000584 	.word	0x20000584
 80051b4:	20000588 	.word	0x20000588
 80051b8:	e000ed20 	.word	0xe000ed20
 80051bc:	2000000c 	.word	0x2000000c
 80051c0:	e000ef34 	.word	0xe000ef34

080051c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	607b      	str	r3, [r7, #4]
}
 80051dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <vPortEnterCritical+0x58>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <vPortEnterCritical+0x58>)
 80051e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <vPortEnterCritical+0x58>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10f      	bne.n	8005210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <vPortEnterCritical+0x5c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <vPortEnterCritical+0x4c>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	603b      	str	r3, [r7, #0]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vPortEnterCritical+0x4a>
	}
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <vPortExitCritical+0x50>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <vPortExitCritical+0x24>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <vPortExitCritical+0x50>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3b01      	subs	r3, #1
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <vPortExitCritical+0x50>)
 8005250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <vPortExitCritical+0x50>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <vPortExitCritical+0x42>
 800525a:	2300      	movs	r3, #0
 800525c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c
	...

08005280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005280:	f3ef 8009 	mrs	r0, PSP
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <pxCurrentTCBConst>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f01e 0f10 	tst.w	lr, #16
 8005290:	bf08      	it	eq
 8005292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052a4:	f380 8811 	msr	BASEPRI, r0
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f7ff fc9e 	bl	8004bf0 <vTaskSwitchContext>
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f380 8811 	msr	BASEPRI, r0
 80052bc:	bc09      	pop	{r0, r3}
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6808      	ldr	r0, [r1, #0]
 80052c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c6:	f01e 0f10 	tst.w	lr, #16
 80052ca:	bf08      	it	eq
 80052cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052d0:	f380 8809 	msr	PSP, r0
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst>:
 80052e0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005302:	f7ff fbbd 	bl	8004a80 <xTaskIncrementTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <xPortSysTickHandler+0x40>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <vPortSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <vPortSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <vPortSetupTimerInterrupt+0x40>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <vPortSetupTimerInterrupt+0x44>)
 800534a:	3b01      	subs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000000 	.word	0x20000000
 800536c:	10624dd3 	.word	0x10624dd3
 8005370:	e000e014 	.word	0xe000e014

08005374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005384 <vPortEnableVFP+0x10>
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800537e:	6001      	str	r1, [r0, #0]
 8005380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005382:	bf00      	nop
 8005384:	e000ed88 	.word	0xe000ed88

08005388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005394:	f7ff faca 	bl	800492c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <pvPortMalloc+0x180>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053a0:	f000 f920 	bl	80055e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <pvPortMalloc+0x184>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 8093 	bne.w	80054d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01d      	beq.n	80053f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053b8:	2208      	movs	r2, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	3308      	adds	r3, #8
 80053d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <pvPortMalloc+0x6c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06e      	beq.n	80054d8 <pvPortMalloc+0x150>
 80053fa:	4b45      	ldr	r3, [pc, #276]	; (8005510 <pvPortMalloc+0x188>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d869      	bhi.n	80054d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005404:	4b43      	ldr	r3, [pc, #268]	; (8005514 <pvPortMalloc+0x18c>)
 8005406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <pvPortMalloc+0x18c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540e:	e004      	b.n	800541a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <pvPortMalloc+0xa4>
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f1      	bne.n	8005410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <pvPortMalloc+0x180>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	d050      	beq.n	80054d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2208      	movs	r2, #8
 800543c:	4413      	add	r3, r2
 800543e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	2308      	movs	r3, #8
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	429a      	cmp	r2, r3
 8005456:	d91f      	bls.n	8005498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <pvPortMalloc+0xf8>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	613b      	str	r3, [r7, #16]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 f908 	bl	80056a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <pvPortMalloc+0x188>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <pvPortMalloc+0x188>)
 80054a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <pvPortMalloc+0x188>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <pvPortMalloc+0x190>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <pvPortMalloc+0x190>)
 80054b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <pvPortMalloc+0x184>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <pvPortMalloc+0x194>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <pvPortMalloc+0x194>)
 80054d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054d8:	f7ff fa36 	bl	8004948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <pvPortMalloc+0x174>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <pvPortMalloc+0x172>
	return pvReturn;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000114c 	.word	0x2000114c
 800550c:	20001160 	.word	0x20001160
 8005510:	20001150 	.word	0x20001150
 8005514:	20001144 	.word	0x20001144
 8005518:	20001154 	.word	0x20001154
 800551c:	20001158 	.word	0x20001158

08005520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04d      	beq.n	80055ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005532:	2308      	movs	r3, #8
 8005534:	425b      	negs	r3, r3
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <vPortFree+0xb8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vPortFree+0x44>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60fb      	str	r3, [r7, #12]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <vPortFree+0x62>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60bb      	str	r3, [r7, #8]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <vPortFree+0xb8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11a      	bne.n	80055ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <vPortFree+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a8:	f7ff f9c0 	bl	800492c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <vPortFree+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <vPortFree+0xbc>)
 80055b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f000 f874 	bl	80056a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vPortFree+0xc0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vPortFree+0xc0>)
 80055c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055ca:	f7ff f9bd 	bl	8004948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20001160 	.word	0x20001160
 80055dc:	20001150 	.word	0x20001150
 80055e0:	2000115c 	.word	0x2000115c

080055e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80055ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <prvHeapInit+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3307      	adds	r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvHeapInit+0xac>)
 8005614:	4413      	add	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <prvHeapInit+0xb0>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <prvHeapInit+0xb0>)
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvHeapInit+0xb4>)
 8005644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <prvHeapInit+0xb4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvHeapInit+0xb4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <prvHeapInit+0xb8>)
 8005672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <prvHeapInit+0xbc>)
 800567a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvHeapInit+0xc0>)
 800567e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	2000058c 	.word	0x2000058c
 8005694:	20001144 	.word	0x20001144
 8005698:	2000114c 	.word	0x2000114c
 800569c:	20001154 	.word	0x20001154
 80056a0:	20001150 	.word	0x20001150
 80056a4:	20001160 	.word	0x20001160

080056a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <prvInsertBlockIntoFreeList+0xac>)
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e002      	b.n	80056bc <prvInsertBlockIntoFreeList+0x14>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d8f7      	bhi.n	80056b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d108      	bne.n	80056ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d118      	bne.n	8005730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d00d      	beq.n	8005726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e008      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e003      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20001144 	.word	0x20001144
 8005758:	2000114c 	.word	0x2000114c

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <_reclaim_reent>:
 800576c:	4b29      	ldr	r3, [pc, #164]	; (8005814 <_reclaim_reent+0xa8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4283      	cmp	r3, r0
 8005772:	b570      	push	{r4, r5, r6, lr}
 8005774:	4604      	mov	r4, r0
 8005776:	d04b      	beq.n	8005810 <_reclaim_reent+0xa4>
 8005778:	69c3      	ldr	r3, [r0, #28]
 800577a:	b143      	cbz	r3, 800578e <_reclaim_reent+0x22>
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d144      	bne.n	800580c <_reclaim_reent+0xa0>
 8005782:	69e3      	ldr	r3, [r4, #28]
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	b111      	cbz	r1, 800578e <_reclaim_reent+0x22>
 8005788:	4620      	mov	r0, r4
 800578a:	f000 f871 	bl	8005870 <_free_r>
 800578e:	6961      	ldr	r1, [r4, #20]
 8005790:	b111      	cbz	r1, 8005798 <_reclaim_reent+0x2c>
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f86c 	bl	8005870 <_free_r>
 8005798:	69e1      	ldr	r1, [r4, #28]
 800579a:	b111      	cbz	r1, 80057a2 <_reclaim_reent+0x36>
 800579c:	4620      	mov	r0, r4
 800579e:	f000 f867 	bl	8005870 <_free_r>
 80057a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057a4:	b111      	cbz	r1, 80057ac <_reclaim_reent+0x40>
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 f862 	bl	8005870 <_free_r>
 80057ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ae:	b111      	cbz	r1, 80057b6 <_reclaim_reent+0x4a>
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 f85d 	bl	8005870 <_free_r>
 80057b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057b8:	b111      	cbz	r1, 80057c0 <_reclaim_reent+0x54>
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 f858 	bl	8005870 <_free_r>
 80057c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057c2:	b111      	cbz	r1, 80057ca <_reclaim_reent+0x5e>
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 f853 	bl	8005870 <_free_r>
 80057ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80057cc:	b111      	cbz	r1, 80057d4 <_reclaim_reent+0x68>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f84e 	bl	8005870 <_free_r>
 80057d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057d6:	b111      	cbz	r1, 80057de <_reclaim_reent+0x72>
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f849 	bl	8005870 <_free_r>
 80057de:	6a23      	ldr	r3, [r4, #32]
 80057e0:	b1b3      	cbz	r3, 8005810 <_reclaim_reent+0xa4>
 80057e2:	4620      	mov	r0, r4
 80057e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057e8:	4718      	bx	r3
 80057ea:	5949      	ldr	r1, [r1, r5]
 80057ec:	b941      	cbnz	r1, 8005800 <_reclaim_reent+0x94>
 80057ee:	3504      	adds	r5, #4
 80057f0:	69e3      	ldr	r3, [r4, #28]
 80057f2:	2d80      	cmp	r5, #128	; 0x80
 80057f4:	68d9      	ldr	r1, [r3, #12]
 80057f6:	d1f8      	bne.n	80057ea <_reclaim_reent+0x7e>
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 f839 	bl	8005870 <_free_r>
 80057fe:	e7c0      	b.n	8005782 <_reclaim_reent+0x16>
 8005800:	680e      	ldr	r6, [r1, #0]
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f834 	bl	8005870 <_free_r>
 8005808:	4631      	mov	r1, r6
 800580a:	e7ef      	b.n	80057ec <_reclaim_reent+0x80>
 800580c:	2500      	movs	r5, #0
 800580e:	e7ef      	b.n	80057f0 <_reclaim_reent+0x84>
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	bf00      	nop
 8005814:	2000005c 	.word	0x2000005c

08005818 <__errno>:
 8005818:	4b01      	ldr	r3, [pc, #4]	; (8005820 <__errno+0x8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2000005c 	.word	0x2000005c

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	4d0d      	ldr	r5, [pc, #52]	; (800585c <__libc_init_array+0x38>)
 8005828:	4c0d      	ldr	r4, [pc, #52]	; (8005860 <__libc_init_array+0x3c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	2600      	movs	r6, #0
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	4d0b      	ldr	r5, [pc, #44]	; (8005864 <__libc_init_array+0x40>)
 8005836:	4c0c      	ldr	r4, [pc, #48]	; (8005868 <__libc_init_array+0x44>)
 8005838:	f000 ffac 	bl	8006794 <_init>
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	2600      	movs	r6, #0
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	080068d8 	.word	0x080068d8
 8005860:	080068d8 	.word	0x080068d8
 8005864:	080068d8 	.word	0x080068d8
 8005868:	080068dc 	.word	0x080068dc

0800586c <__retarget_lock_acquire_recursive>:
 800586c:	4770      	bx	lr

0800586e <__retarget_lock_release_recursive>:
 800586e:	4770      	bx	lr

08005870 <_free_r>:
 8005870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005872:	2900      	cmp	r1, #0
 8005874:	d044      	beq.n	8005900 <_free_r+0x90>
 8005876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587a:	9001      	str	r0, [sp, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f1a1 0404 	sub.w	r4, r1, #4
 8005882:	bfb8      	it	lt
 8005884:	18e4      	addlt	r4, r4, r3
 8005886:	f000 f83f 	bl	8005908 <__malloc_lock>
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <_free_r+0x94>)
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	b933      	cbnz	r3, 80058a0 <_free_r+0x30>
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	6014      	str	r4, [r2, #0]
 8005896:	b003      	add	sp, #12
 8005898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800589c:	f000 b83a 	b.w	8005914 <__malloc_unlock>
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	d908      	bls.n	80058b6 <_free_r+0x46>
 80058a4:	6825      	ldr	r5, [r4, #0]
 80058a6:	1961      	adds	r1, r4, r5
 80058a8:	428b      	cmp	r3, r1
 80058aa:	bf01      	itttt	eq
 80058ac:	6819      	ldreq	r1, [r3, #0]
 80058ae:	685b      	ldreq	r3, [r3, #4]
 80058b0:	1949      	addeq	r1, r1, r5
 80058b2:	6021      	streq	r1, [r4, #0]
 80058b4:	e7ed      	b.n	8005892 <_free_r+0x22>
 80058b6:	461a      	mov	r2, r3
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b10b      	cbz	r3, 80058c0 <_free_r+0x50>
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d9fa      	bls.n	80058b6 <_free_r+0x46>
 80058c0:	6811      	ldr	r1, [r2, #0]
 80058c2:	1855      	adds	r5, r2, r1
 80058c4:	42a5      	cmp	r5, r4
 80058c6:	d10b      	bne.n	80058e0 <_free_r+0x70>
 80058c8:	6824      	ldr	r4, [r4, #0]
 80058ca:	4421      	add	r1, r4
 80058cc:	1854      	adds	r4, r2, r1
 80058ce:	42a3      	cmp	r3, r4
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	d1e0      	bne.n	8005896 <_free_r+0x26>
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	6053      	str	r3, [r2, #4]
 80058da:	440c      	add	r4, r1
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	e7da      	b.n	8005896 <_free_r+0x26>
 80058e0:	d902      	bls.n	80058e8 <_free_r+0x78>
 80058e2:	230c      	movs	r3, #12
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	e7d6      	b.n	8005896 <_free_r+0x26>
 80058e8:	6825      	ldr	r5, [r4, #0]
 80058ea:	1961      	adds	r1, r4, r5
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf04      	itt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	bf04      	itt	eq
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	6054      	str	r4, [r2, #4]
 80058fe:	e7ca      	b.n	8005896 <_free_r+0x26>
 8005900:	b003      	add	sp, #12
 8005902:	bd30      	pop	{r4, r5, pc}
 8005904:	200012a0 	.word	0x200012a0

08005908 <__malloc_lock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_lock+0x8>)
 800590a:	f7ff bfaf 	b.w	800586c <__retarget_lock_acquire_recursive>
 800590e:	bf00      	nop
 8005910:	2000129c 	.word	0x2000129c

08005914 <__malloc_unlock>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__malloc_unlock+0x8>)
 8005916:	f7ff bfaa 	b.w	800586e <__retarget_lock_release_recursive>
 800591a:	bf00      	nop
 800591c:	2000129c 	.word	0x2000129c

08005920 <pow>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	ed2d 8b02 	vpush	{d8}
 8005926:	eeb0 8a40 	vmov.f32	s16, s0
 800592a:	eef0 8a60 	vmov.f32	s17, s1
 800592e:	ec55 4b11 	vmov	r4, r5, d1
 8005932:	f000 f955 	bl	8005be0 <__ieee754_pow>
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	ec57 6b10 	vmov	r6, r7, d0
 8005942:	f7fb f89b 	bl	8000a7c <__aeabi_dcmpun>
 8005946:	2800      	cmp	r0, #0
 8005948:	d13b      	bne.n	80059c2 <pow+0xa2>
 800594a:	ec51 0b18 	vmov	r0, r1, d8
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	f7fb f861 	bl	8000a18 <__aeabi_dcmpeq>
 8005956:	b1b8      	cbz	r0, 8005988 <pow+0x68>
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fb f85a 	bl	8000a18 <__aeabi_dcmpeq>
 8005964:	2800      	cmp	r0, #0
 8005966:	d146      	bne.n	80059f6 <pow+0xd6>
 8005968:	ec45 4b10 	vmov	d0, r4, r5
 800596c:	f000 f851 	bl	8005a12 <finite>
 8005970:	b338      	cbz	r0, 80059c2 <pow+0xa2>
 8005972:	2200      	movs	r2, #0
 8005974:	2300      	movs	r3, #0
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	f7fb f857 	bl	8000a2c <__aeabi_dcmplt>
 800597e:	b300      	cbz	r0, 80059c2 <pow+0xa2>
 8005980:	f7ff ff4a 	bl	8005818 <__errno>
 8005984:	2322      	movs	r3, #34	; 0x22
 8005986:	e01b      	b.n	80059c0 <pow+0xa0>
 8005988:	ec47 6b10 	vmov	d0, r6, r7
 800598c:	f000 f841 	bl	8005a12 <finite>
 8005990:	b9e0      	cbnz	r0, 80059cc <pow+0xac>
 8005992:	eeb0 0a48 	vmov.f32	s0, s16
 8005996:	eef0 0a68 	vmov.f32	s1, s17
 800599a:	f000 f83a 	bl	8005a12 <finite>
 800599e:	b1a8      	cbz	r0, 80059cc <pow+0xac>
 80059a0:	ec45 4b10 	vmov	d0, r4, r5
 80059a4:	f000 f835 	bl	8005a12 <finite>
 80059a8:	b180      	cbz	r0, 80059cc <pow+0xac>
 80059aa:	4632      	mov	r2, r6
 80059ac:	463b      	mov	r3, r7
 80059ae:	4630      	mov	r0, r6
 80059b0:	4639      	mov	r1, r7
 80059b2:	f7fb f863 	bl	8000a7c <__aeabi_dcmpun>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d0e2      	beq.n	8005980 <pow+0x60>
 80059ba:	f7ff ff2d 	bl	8005818 <__errno>
 80059be:	2321      	movs	r3, #33	; 0x21
 80059c0:	6003      	str	r3, [r0, #0]
 80059c2:	ecbd 8b02 	vpop	{d8}
 80059c6:	ec47 6b10 	vmov	d0, r6, r7
 80059ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059cc:	2200      	movs	r2, #0
 80059ce:	2300      	movs	r3, #0
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f820 	bl	8000a18 <__aeabi_dcmpeq>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d0f2      	beq.n	80059c2 <pow+0xa2>
 80059dc:	eeb0 0a48 	vmov.f32	s0, s16
 80059e0:	eef0 0a68 	vmov.f32	s1, s17
 80059e4:	f000 f815 	bl	8005a12 <finite>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d0ea      	beq.n	80059c2 <pow+0xa2>
 80059ec:	ec45 4b10 	vmov	d0, r4, r5
 80059f0:	f000 f80f 	bl	8005a12 <finite>
 80059f4:	e7c3      	b.n	800597e <pow+0x5e>
 80059f6:	4f01      	ldr	r7, [pc, #4]	; (80059fc <pow+0xdc>)
 80059f8:	2600      	movs	r6, #0
 80059fa:	e7e2      	b.n	80059c2 <pow+0xa2>
 80059fc:	3ff00000 	.word	0x3ff00000

08005a00 <fabs>:
 8005a00:	ec51 0b10 	vmov	r0, r1, d0
 8005a04:	ee10 2a10 	vmov	r2, s0
 8005a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a0c:	ec43 2b10 	vmov	d0, r2, r3
 8005a10:	4770      	bx	lr

08005a12 <finite>:
 8005a12:	b082      	sub	sp, #8
 8005a14:	ed8d 0b00 	vstr	d0, [sp]
 8005a18:	9801      	ldr	r0, [sp, #4]
 8005a1a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005a22:	0fc0      	lsrs	r0, r0, #31
 8005a24:	b002      	add	sp, #8
 8005a26:	4770      	bx	lr

08005a28 <__ieee754_sqrt>:
 8005a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	ec55 4b10 	vmov	r4, r5, d0
 8005a30:	4e67      	ldr	r6, [pc, #412]	; (8005bd0 <__ieee754_sqrt+0x1a8>)
 8005a32:	43ae      	bics	r6, r5
 8005a34:	ee10 0a10 	vmov	r0, s0
 8005a38:	ee10 2a10 	vmov	r2, s0
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	462b      	mov	r3, r5
 8005a40:	d10d      	bne.n	8005a5e <__ieee754_sqrt+0x36>
 8005a42:	f7fa fd81 	bl	8000548 <__aeabi_dmul>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa fbc5 	bl	80001dc <__adddf3>
 8005a52:	4604      	mov	r4, r0
 8005a54:	460d      	mov	r5, r1
 8005a56:	ec45 4b10 	vmov	d0, r4, r5
 8005a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5e:	2d00      	cmp	r5, #0
 8005a60:	dc0b      	bgt.n	8005a7a <__ieee754_sqrt+0x52>
 8005a62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a66:	4326      	orrs	r6, r4
 8005a68:	d0f5      	beq.n	8005a56 <__ieee754_sqrt+0x2e>
 8005a6a:	b135      	cbz	r5, 8005a7a <__ieee754_sqrt+0x52>
 8005a6c:	f7fa fbb4 	bl	80001d8 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	f7fa fe92 	bl	800079c <__aeabi_ddiv>
 8005a78:	e7eb      	b.n	8005a52 <__ieee754_sqrt+0x2a>
 8005a7a:	1509      	asrs	r1, r1, #20
 8005a7c:	f000 808d 	beq.w	8005b9a <__ieee754_sqrt+0x172>
 8005a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a84:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a8c:	07c9      	lsls	r1, r1, #31
 8005a8e:	bf5c      	itt	pl
 8005a90:	005b      	lslpl	r3, r3, #1
 8005a92:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005a96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a9a:	bf58      	it	pl
 8005a9c:	0052      	lslpl	r2, r2, #1
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005aa4:	1076      	asrs	r6, r6, #1
 8005aa6:	0052      	lsls	r2, r2, #1
 8005aa8:	f04f 0e16 	mov.w	lr, #22
 8005aac:	46ac      	mov	ip, r5
 8005aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ab2:	eb0c 0001 	add.w	r0, ip, r1
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	bfde      	ittt	le
 8005aba:	1a1b      	suble	r3, r3, r0
 8005abc:	eb00 0c01 	addle.w	ip, r0, r1
 8005ac0:	186d      	addle	r5, r5, r1
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f1be 0e01 	subs.w	lr, lr, #1
 8005ac8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005acc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005ad0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005ad4:	d1ed      	bne.n	8005ab2 <__ieee754_sqrt+0x8a>
 8005ad6:	4674      	mov	r4, lr
 8005ad8:	2720      	movs	r7, #32
 8005ada:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ade:	4563      	cmp	r3, ip
 8005ae0:	eb01 000e 	add.w	r0, r1, lr
 8005ae4:	dc02      	bgt.n	8005aec <__ieee754_sqrt+0xc4>
 8005ae6:	d113      	bne.n	8005b10 <__ieee754_sqrt+0xe8>
 8005ae8:	4290      	cmp	r0, r2
 8005aea:	d811      	bhi.n	8005b10 <__ieee754_sqrt+0xe8>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	eb00 0e01 	add.w	lr, r0, r1
 8005af2:	da57      	bge.n	8005ba4 <__ieee754_sqrt+0x17c>
 8005af4:	f1be 0f00 	cmp.w	lr, #0
 8005af8:	db54      	blt.n	8005ba4 <__ieee754_sqrt+0x17c>
 8005afa:	f10c 0801 	add.w	r8, ip, #1
 8005afe:	eba3 030c 	sub.w	r3, r3, ip
 8005b02:	4290      	cmp	r0, r2
 8005b04:	bf88      	it	hi
 8005b06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b0a:	1a12      	subs	r2, r2, r0
 8005b0c:	440c      	add	r4, r1
 8005b0e:	46c4      	mov	ip, r8
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	3f01      	subs	r7, #1
 8005b14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005b18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005b1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b20:	d1dd      	bne.n	8005ade <__ieee754_sqrt+0xb6>
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d01b      	beq.n	8005b5e <__ieee754_sqrt+0x136>
 8005b26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005bd4 <__ieee754_sqrt+0x1ac>
 8005b2a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005bd8 <__ieee754_sqrt+0x1b0>
 8005b2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b32:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b36:	f7fa fb4f 	bl	80001d8 <__aeabi_dsub>
 8005b3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa ff7b 	bl	8000a40 <__aeabi_dcmple>
 8005b4a:	b140      	cbz	r0, 8005b5e <__ieee754_sqrt+0x136>
 8005b4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b50:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b54:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b58:	d126      	bne.n	8005ba8 <__ieee754_sqrt+0x180>
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	463c      	mov	r4, r7
 8005b5e:	106a      	asrs	r2, r5, #1
 8005b60:	0863      	lsrs	r3, r4, #1
 8005b62:	07e9      	lsls	r1, r5, #31
 8005b64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005b68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005b6c:	bf48      	it	mi
 8005b6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005b76:	461c      	mov	r4, r3
 8005b78:	e76d      	b.n	8005a56 <__ieee754_sqrt+0x2e>
 8005b7a:	0ad3      	lsrs	r3, r2, #11
 8005b7c:	3815      	subs	r0, #21
 8005b7e:	0552      	lsls	r2, r2, #21
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0fa      	beq.n	8005b7a <__ieee754_sqrt+0x152>
 8005b84:	02dc      	lsls	r4, r3, #11
 8005b86:	d50a      	bpl.n	8005b9e <__ieee754_sqrt+0x176>
 8005b88:	f1c1 0420 	rsb	r4, r1, #32
 8005b8c:	fa22 f404 	lsr.w	r4, r2, r4
 8005b90:	1e4d      	subs	r5, r1, #1
 8005b92:	408a      	lsls	r2, r1
 8005b94:	4323      	orrs	r3, r4
 8005b96:	1b41      	subs	r1, r0, r5
 8005b98:	e772      	b.n	8005a80 <__ieee754_sqrt+0x58>
 8005b9a:	4608      	mov	r0, r1
 8005b9c:	e7f0      	b.n	8005b80 <__ieee754_sqrt+0x158>
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	3101      	adds	r1, #1
 8005ba2:	e7ef      	b.n	8005b84 <__ieee754_sqrt+0x15c>
 8005ba4:	46e0      	mov	r8, ip
 8005ba6:	e7aa      	b.n	8005afe <__ieee754_sqrt+0xd6>
 8005ba8:	f7fa fb18 	bl	80001dc <__adddf3>
 8005bac:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	f7fa ff38 	bl	8000a2c <__aeabi_dcmplt>
 8005bbc:	b120      	cbz	r0, 8005bc8 <__ieee754_sqrt+0x1a0>
 8005bbe:	1ca0      	adds	r0, r4, #2
 8005bc0:	bf08      	it	eq
 8005bc2:	3501      	addeq	r5, #1
 8005bc4:	3402      	adds	r4, #2
 8005bc6:	e7ca      	b.n	8005b5e <__ieee754_sqrt+0x136>
 8005bc8:	3401      	adds	r4, #1
 8005bca:	f024 0401 	bic.w	r4, r4, #1
 8005bce:	e7c6      	b.n	8005b5e <__ieee754_sqrt+0x136>
 8005bd0:	7ff00000 	.word	0x7ff00000
 8005bd4:	20000060 	.word	0x20000060
 8005bd8:	20000068 	.word	0x20000068
 8005bdc:	00000000 	.word	0x00000000

08005be0 <__ieee754_pow>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	ed2d 8b06 	vpush	{d8-d10}
 8005be8:	b089      	sub	sp, #36	; 0x24
 8005bea:	ed8d 1b00 	vstr	d1, [sp]
 8005bee:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005bf2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005bf6:	ea58 0102 	orrs.w	r1, r8, r2
 8005bfa:	ec57 6b10 	vmov	r6, r7, d0
 8005bfe:	d115      	bne.n	8005c2c <__ieee754_pow+0x4c>
 8005c00:	19b3      	adds	r3, r6, r6
 8005c02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005c06:	4152      	adcs	r2, r2
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	4b89      	ldr	r3, [pc, #548]	; (8005e30 <__ieee754_pow+0x250>)
 8005c0c:	4193      	sbcs	r3, r2
 8005c0e:	f080 84d1 	bcs.w	80065b4 <__ieee754_pow+0x9d4>
 8005c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c16:	4630      	mov	r0, r6
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f7fa fadf 	bl	80001dc <__adddf3>
 8005c1e:	ec41 0b10 	vmov	d0, r0, r1
 8005c22:	b009      	add	sp, #36	; 0x24
 8005c24:	ecbd 8b06 	vpop	{d8-d10}
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <__ieee754_pow+0x254>)
 8005c2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005c32:	429c      	cmp	r4, r3
 8005c34:	ee10 aa10 	vmov	sl, s0
 8005c38:	463d      	mov	r5, r7
 8005c3a:	dc06      	bgt.n	8005c4a <__ieee754_pow+0x6a>
 8005c3c:	d101      	bne.n	8005c42 <__ieee754_pow+0x62>
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d1e7      	bne.n	8005c12 <__ieee754_pow+0x32>
 8005c42:	4598      	cmp	r8, r3
 8005c44:	dc01      	bgt.n	8005c4a <__ieee754_pow+0x6a>
 8005c46:	d10f      	bne.n	8005c68 <__ieee754_pow+0x88>
 8005c48:	b172      	cbz	r2, 8005c68 <__ieee754_pow+0x88>
 8005c4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005c4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005c52:	ea55 050a 	orrs.w	r5, r5, sl
 8005c56:	d1dc      	bne.n	8005c12 <__ieee754_pow+0x32>
 8005c58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005c5c:	18db      	adds	r3, r3, r3
 8005c5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005c62:	4152      	adcs	r2, r2
 8005c64:	429d      	cmp	r5, r3
 8005c66:	e7d0      	b.n	8005c0a <__ieee754_pow+0x2a>
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	da3b      	bge.n	8005ce4 <__ieee754_pow+0x104>
 8005c6c:	4b72      	ldr	r3, [pc, #456]	; (8005e38 <__ieee754_pow+0x258>)
 8005c6e:	4598      	cmp	r8, r3
 8005c70:	dc51      	bgt.n	8005d16 <__ieee754_pow+0x136>
 8005c72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005c76:	4598      	cmp	r8, r3
 8005c78:	f340 84ab 	ble.w	80065d2 <__ieee754_pow+0x9f2>
 8005c7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c84:	2b14      	cmp	r3, #20
 8005c86:	dd0f      	ble.n	8005ca8 <__ieee754_pow+0xc8>
 8005c88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005c8c:	fa22 f103 	lsr.w	r1, r2, r3
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	4293      	cmp	r3, r2
 8005c96:	f040 849c 	bne.w	80065d2 <__ieee754_pow+0x9f2>
 8005c9a:	f001 0101 	and.w	r1, r1, #1
 8005c9e:	f1c1 0302 	rsb	r3, r1, #2
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	b182      	cbz	r2, 8005cc8 <__ieee754_pow+0xe8>
 8005ca6:	e05f      	b.n	8005d68 <__ieee754_pow+0x188>
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	d15b      	bne.n	8005d64 <__ieee754_pow+0x184>
 8005cac:	f1c3 0314 	rsb	r3, r3, #20
 8005cb0:	fa48 f103 	asr.w	r1, r8, r3
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	f040 8487 	bne.w	80065cc <__ieee754_pow+0x9ec>
 8005cbe:	f001 0101 	and.w	r1, r1, #1
 8005cc2:	f1c1 0302 	rsb	r3, r1, #2
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	4b5c      	ldr	r3, [pc, #368]	; (8005e3c <__ieee754_pow+0x25c>)
 8005cca:	4598      	cmp	r8, r3
 8005ccc:	d132      	bne.n	8005d34 <__ieee754_pow+0x154>
 8005cce:	f1b9 0f00 	cmp.w	r9, #0
 8005cd2:	f280 8477 	bge.w	80065c4 <__ieee754_pow+0x9e4>
 8005cd6:	4959      	ldr	r1, [pc, #356]	; (8005e3c <__ieee754_pow+0x25c>)
 8005cd8:	4632      	mov	r2, r6
 8005cda:	463b      	mov	r3, r7
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f7fa fd5d 	bl	800079c <__aeabi_ddiv>
 8005ce2:	e79c      	b.n	8005c1e <__ieee754_pow+0x3e>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9304      	str	r3, [sp, #16]
 8005ce8:	2a00      	cmp	r2, #0
 8005cea:	d13d      	bne.n	8005d68 <__ieee754_pow+0x188>
 8005cec:	4b51      	ldr	r3, [pc, #324]	; (8005e34 <__ieee754_pow+0x254>)
 8005cee:	4598      	cmp	r8, r3
 8005cf0:	d1ea      	bne.n	8005cc8 <__ieee754_pow+0xe8>
 8005cf2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005cf6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005cfa:	ea53 030a 	orrs.w	r3, r3, sl
 8005cfe:	f000 8459 	beq.w	80065b4 <__ieee754_pow+0x9d4>
 8005d02:	4b4f      	ldr	r3, [pc, #316]	; (8005e40 <__ieee754_pow+0x260>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	dd08      	ble.n	8005d1a <__ieee754_pow+0x13a>
 8005d08:	f1b9 0f00 	cmp.w	r9, #0
 8005d0c:	f2c0 8456 	blt.w	80065bc <__ieee754_pow+0x9dc>
 8005d10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d14:	e783      	b.n	8005c1e <__ieee754_pow+0x3e>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e7e5      	b.n	8005ce6 <__ieee754_pow+0x106>
 8005d1a:	f1b9 0f00 	cmp.w	r9, #0
 8005d1e:	f04f 0000 	mov.w	r0, #0
 8005d22:	f04f 0100 	mov.w	r1, #0
 8005d26:	f6bf af7a 	bge.w	8005c1e <__ieee754_pow+0x3e>
 8005d2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005d2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d32:	e774      	b.n	8005c1e <__ieee754_pow+0x3e>
 8005d34:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005d38:	d106      	bne.n	8005d48 <__ieee754_pow+0x168>
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4630      	mov	r0, r6
 8005d40:	4639      	mov	r1, r7
 8005d42:	f7fa fc01 	bl	8000548 <__aeabi_dmul>
 8005d46:	e76a      	b.n	8005c1e <__ieee754_pow+0x3e>
 8005d48:	4b3e      	ldr	r3, [pc, #248]	; (8005e44 <__ieee754_pow+0x264>)
 8005d4a:	4599      	cmp	r9, r3
 8005d4c:	d10c      	bne.n	8005d68 <__ieee754_pow+0x188>
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	db0a      	blt.n	8005d68 <__ieee754_pow+0x188>
 8005d52:	ec47 6b10 	vmov	d0, r6, r7
 8005d56:	b009      	add	sp, #36	; 0x24
 8005d58:	ecbd 8b06 	vpop	{d8-d10}
 8005d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	f7ff be62 	b.w	8005a28 <__ieee754_sqrt>
 8005d64:	2300      	movs	r3, #0
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	ec47 6b10 	vmov	d0, r6, r7
 8005d6c:	f7ff fe48 	bl	8005a00 <fabs>
 8005d70:	ec51 0b10 	vmov	r0, r1, d0
 8005d74:	f1ba 0f00 	cmp.w	sl, #0
 8005d78:	d129      	bne.n	8005dce <__ieee754_pow+0x1ee>
 8005d7a:	b124      	cbz	r4, 8005d86 <__ieee754_pow+0x1a6>
 8005d7c:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <__ieee754_pow+0x25c>)
 8005d7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d123      	bne.n	8005dce <__ieee754_pow+0x1ee>
 8005d86:	f1b9 0f00 	cmp.w	r9, #0
 8005d8a:	da05      	bge.n	8005d98 <__ieee754_pow+0x1b8>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	2000      	movs	r0, #0
 8005d92:	492a      	ldr	r1, [pc, #168]	; (8005e3c <__ieee754_pow+0x25c>)
 8005d94:	f7fa fd02 	bl	800079c <__aeabi_ddiv>
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	f6bf af40 	bge.w	8005c1e <__ieee754_pow+0x3e>
 8005d9e:	9b04      	ldr	r3, [sp, #16]
 8005da0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005da4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005da8:	431c      	orrs	r4, r3
 8005daa:	d108      	bne.n	8005dbe <__ieee754_pow+0x1de>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	f7fa fa10 	bl	80001d8 <__aeabi_dsub>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	e78f      	b.n	8005cde <__ieee754_pow+0xfe>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f47f af2c 	bne.w	8005c1e <__ieee754_pow+0x3e>
 8005dc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dca:	4619      	mov	r1, r3
 8005dcc:	e727      	b.n	8005c1e <__ieee754_pow+0x3e>
 8005dce:	0feb      	lsrs	r3, r5, #31
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	9a06      	ldr	r2, [sp, #24]
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d102      	bne.n	8005de2 <__ieee754_pow+0x202>
 8005ddc:	4632      	mov	r2, r6
 8005dde:	463b      	mov	r3, r7
 8005de0:	e7e6      	b.n	8005db0 <__ieee754_pow+0x1d0>
 8005de2:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <__ieee754_pow+0x268>)
 8005de4:	4598      	cmp	r8, r3
 8005de6:	f340 80fb 	ble.w	8005fe0 <__ieee754_pow+0x400>
 8005dea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005dee:	4598      	cmp	r8, r3
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <__ieee754_pow+0x260>)
 8005df2:	dd0c      	ble.n	8005e0e <__ieee754_pow+0x22e>
 8005df4:	429c      	cmp	r4, r3
 8005df6:	dc0f      	bgt.n	8005e18 <__ieee754_pow+0x238>
 8005df8:	f1b9 0f00 	cmp.w	r9, #0
 8005dfc:	da0f      	bge.n	8005e1e <__ieee754_pow+0x23e>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	b009      	add	sp, #36	; 0x24
 8005e02:	ecbd 8b06 	vpop	{d8-d10}
 8005e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f000 bcba 	b.w	8006782 <__math_oflow>
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	dbf2      	blt.n	8005df8 <__ieee754_pow+0x218>
 8005e12:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <__ieee754_pow+0x25c>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	dd19      	ble.n	8005e4c <__ieee754_pow+0x26c>
 8005e18:	f1b9 0f00 	cmp.w	r9, #0
 8005e1c:	dcef      	bgt.n	8005dfe <__ieee754_pow+0x21e>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	b009      	add	sp, #36	; 0x24
 8005e22:	ecbd 8b06 	vpop	{d8-d10}
 8005e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f000 bca1 	b.w	8006770 <__math_uflow>
 8005e2e:	bf00      	nop
 8005e30:	fff00000 	.word	0xfff00000
 8005e34:	7ff00000 	.word	0x7ff00000
 8005e38:	433fffff 	.word	0x433fffff
 8005e3c:	3ff00000 	.word	0x3ff00000
 8005e40:	3fefffff 	.word	0x3fefffff
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	41e00000 	.word	0x41e00000
 8005e4c:	4b60      	ldr	r3, [pc, #384]	; (8005fd0 <__ieee754_pow+0x3f0>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f7fa f9c2 	bl	80001d8 <__aeabi_dsub>
 8005e54:	a354      	add	r3, pc, #336	; (adr r3, 8005fa8 <__ieee754_pow+0x3c8>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	f7fa fb73 	bl	8000548 <__aeabi_dmul>
 8005e62:	a353      	add	r3, pc, #332	; (adr r3, 8005fb0 <__ieee754_pow+0x3d0>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	4606      	mov	r6, r0
 8005e6a:	460f      	mov	r7, r1
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fb6a 	bl	8000548 <__aeabi_dmul>
 8005e74:	4b57      	ldr	r3, [pc, #348]	; (8005fd4 <__ieee754_pow+0x3f4>)
 8005e76:	4682      	mov	sl, r0
 8005e78:	468b      	mov	fp, r1
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fb62 	bl	8000548 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	a14b      	add	r1, pc, #300	; (adr r1, 8005fb8 <__ieee754_pow+0x3d8>)
 8005e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e8e:	f7fa f9a3 	bl	80001d8 <__aeabi_dsub>
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	f7fa fb57 	bl	8000548 <__aeabi_dmul>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	494d      	ldr	r1, [pc, #308]	; (8005fd8 <__ieee754_pow+0x3f8>)
 8005ea2:	f7fa f999 	bl	80001d8 <__aeabi_dsub>
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	4689      	mov	r9, r1
 8005eac:	462b      	mov	r3, r5
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7fa fb49 	bl	8000548 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f7fa fb43 	bl	8000548 <__aeabi_dmul>
 8005ec2:	a33f      	add	r3, pc, #252	; (adr r3, 8005fc0 <__ieee754_pow+0x3e0>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa fb3e 	bl	8000548 <__aeabi_dmul>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	4659      	mov	r1, fp
 8005ed4:	f7fa f980 	bl	80001d8 <__aeabi_dsub>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa f97a 	bl	80001dc <__adddf3>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	4632      	mov	r2, r6
 8005eec:	463b      	mov	r3, r7
 8005eee:	4604      	mov	r4, r0
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	f7fa f971 	bl	80001d8 <__aeabi_dsub>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa f96b 	bl	80001d8 <__aeabi_dsub>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	9a06      	ldr	r2, [sp, #24]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	4682      	mov	sl, r0
 8005f0c:	468b      	mov	fp, r1
 8005f0e:	f040 81e7 	bne.w	80062e0 <__ieee754_pow+0x700>
 8005f12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005fc8 <__ieee754_pow+0x3e8>
 8005f16:	eeb0 8a47 	vmov.f32	s16, s14
 8005f1a:	eef0 8a67 	vmov.f32	s17, s15
 8005f1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f22:	2600      	movs	r6, #0
 8005f24:	4632      	mov	r2, r6
 8005f26:	463b      	mov	r3, r7
 8005f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f2c:	f7fa f954 	bl	80001d8 <__aeabi_dsub>
 8005f30:	4622      	mov	r2, r4
 8005f32:	462b      	mov	r3, r5
 8005f34:	f7fa fb08 	bl	8000548 <__aeabi_dmul>
 8005f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	4689      	mov	r9, r1
 8005f40:	4650      	mov	r0, sl
 8005f42:	4659      	mov	r1, fp
 8005f44:	f7fa fb00 	bl	8000548 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4649      	mov	r1, r9
 8005f50:	f7fa f944 	bl	80001dc <__adddf3>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	4629      	mov	r1, r5
 8005f60:	f7fa faf2 	bl	8000548 <__aeabi_dmul>
 8005f64:	460b      	mov	r3, r1
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	4640      	mov	r0, r8
 8005f70:	f7fa f934 	bl	80001dc <__adddf3>
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <__ieee754_pow+0x3fc>)
 8005f76:	4299      	cmp	r1, r3
 8005f78:	ec45 4b19 	vmov	d9, r4, r5
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	468b      	mov	fp, r1
 8005f82:	f340 82f0 	ble.w	8006566 <__ieee754_pow+0x986>
 8005f86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005f8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005f8e:	4303      	orrs	r3, r0
 8005f90:	f000 81e4 	beq.w	800635c <__ieee754_pow+0x77c>
 8005f94:	ec51 0b18 	vmov	r0, r1, d8
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f7fa fd46 	bl	8000a2c <__aeabi_dcmplt>
 8005fa0:	3800      	subs	r0, #0
 8005fa2:	bf18      	it	ne
 8005fa4:	2001      	movne	r0, #1
 8005fa6:	e72b      	b.n	8005e00 <__ieee754_pow+0x220>
 8005fa8:	60000000 	.word	0x60000000
 8005fac:	3ff71547 	.word	0x3ff71547
 8005fb0:	f85ddf44 	.word	0xf85ddf44
 8005fb4:	3e54ae0b 	.word	0x3e54ae0b
 8005fb8:	55555555 	.word	0x55555555
 8005fbc:	3fd55555 	.word	0x3fd55555
 8005fc0:	652b82fe 	.word	0x652b82fe
 8005fc4:	3ff71547 	.word	0x3ff71547
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	bff00000 	.word	0xbff00000
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	3fd00000 	.word	0x3fd00000
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	408fffff 	.word	0x408fffff
 8005fe0:	4bd5      	ldr	r3, [pc, #852]	; (8006338 <__ieee754_pow+0x758>)
 8005fe2:	402b      	ands	r3, r5
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	b92b      	cbnz	r3, 8005ff4 <__ieee754_pow+0x414>
 8005fe8:	4bd4      	ldr	r3, [pc, #848]	; (800633c <__ieee754_pow+0x75c>)
 8005fea:	f7fa faad 	bl	8000548 <__aeabi_dmul>
 8005fee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	1523      	asrs	r3, r4, #20
 8005ff6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ffa:	4413      	add	r3, r2
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	4bd0      	ldr	r3, [pc, #832]	; (8006340 <__ieee754_pow+0x760>)
 8006000:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006004:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006008:	429c      	cmp	r4, r3
 800600a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800600e:	dd08      	ble.n	8006022 <__ieee754_pow+0x442>
 8006010:	4bcc      	ldr	r3, [pc, #816]	; (8006344 <__ieee754_pow+0x764>)
 8006012:	429c      	cmp	r4, r3
 8006014:	f340 8162 	ble.w	80062dc <__ieee754_pow+0x6fc>
 8006018:	9b05      	ldr	r3, [sp, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006022:	2400      	movs	r4, #0
 8006024:	00e3      	lsls	r3, r4, #3
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	4bc7      	ldr	r3, [pc, #796]	; (8006348 <__ieee754_pow+0x768>)
 800602a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800602e:	ed93 7b00 	vldr	d7, [r3]
 8006032:	4629      	mov	r1, r5
 8006034:	ec53 2b17 	vmov	r2, r3, d7
 8006038:	eeb0 9a47 	vmov.f32	s18, s14
 800603c:	eef0 9a67 	vmov.f32	s19, s15
 8006040:	4682      	mov	sl, r0
 8006042:	f7fa f8c9 	bl	80001d8 <__aeabi_dsub>
 8006046:	4652      	mov	r2, sl
 8006048:	4606      	mov	r6, r0
 800604a:	460f      	mov	r7, r1
 800604c:	462b      	mov	r3, r5
 800604e:	ec51 0b19 	vmov	r0, r1, d9
 8006052:	f7fa f8c3 	bl	80001dc <__adddf3>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	2000      	movs	r0, #0
 800605c:	49bb      	ldr	r1, [pc, #748]	; (800634c <__ieee754_pow+0x76c>)
 800605e:	f7fa fb9d 	bl	800079c <__aeabi_ddiv>
 8006062:	ec41 0b1a 	vmov	d10, r0, r1
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4630      	mov	r0, r6
 800606c:	4639      	mov	r1, r7
 800606e:	f7fa fa6b 	bl	8000548 <__aeabi_dmul>
 8006072:	2300      	movs	r3, #0
 8006074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800607e:	46ab      	mov	fp, r5
 8006080:	106d      	asrs	r5, r5, #1
 8006082:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006086:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800608a:	ec41 0b18 	vmov	d8, r0, r1
 800608e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006092:	2200      	movs	r2, #0
 8006094:	4640      	mov	r0, r8
 8006096:	4649      	mov	r1, r9
 8006098:	4614      	mov	r4, r2
 800609a:	461d      	mov	r5, r3
 800609c:	f7fa fa54 	bl	8000548 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa f896 	bl	80001d8 <__aeabi_dsub>
 80060ac:	ec53 2b19 	vmov	r2, r3, d9
 80060b0:	4606      	mov	r6, r0
 80060b2:	460f      	mov	r7, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f88e 	bl	80001d8 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4650      	mov	r0, sl
 80060c2:	4659      	mov	r1, fp
 80060c4:	f7fa f888 	bl	80001d8 <__aeabi_dsub>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f7fa fa3c 	bl	8000548 <__aeabi_dmul>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7fa f87e 	bl	80001d8 <__aeabi_dsub>
 80060dc:	ec53 2b1a 	vmov	r2, r3, d10
 80060e0:	f7fa fa32 	bl	8000548 <__aeabi_dmul>
 80060e4:	ec53 2b18 	vmov	r2, r3, d8
 80060e8:	ec41 0b19 	vmov	d9, r0, r1
 80060ec:	ec51 0b18 	vmov	r0, r1, d8
 80060f0:	f7fa fa2a 	bl	8000548 <__aeabi_dmul>
 80060f4:	a37c      	add	r3, pc, #496	; (adr r3, 80062e8 <__ieee754_pow+0x708>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	4604      	mov	r4, r0
 80060fc:	460d      	mov	r5, r1
 80060fe:	f7fa fa23 	bl	8000548 <__aeabi_dmul>
 8006102:	a37b      	add	r3, pc, #492	; (adr r3, 80062f0 <__ieee754_pow+0x710>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f868 	bl	80001dc <__adddf3>
 800610c:	4622      	mov	r2, r4
 800610e:	462b      	mov	r3, r5
 8006110:	f7fa fa1a 	bl	8000548 <__aeabi_dmul>
 8006114:	a378      	add	r3, pc, #480	; (adr r3, 80062f8 <__ieee754_pow+0x718>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f7fa f85f 	bl	80001dc <__adddf3>
 800611e:	4622      	mov	r2, r4
 8006120:	462b      	mov	r3, r5
 8006122:	f7fa fa11 	bl	8000548 <__aeabi_dmul>
 8006126:	a376      	add	r3, pc, #472	; (adr r3, 8006300 <__ieee754_pow+0x720>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa f856 	bl	80001dc <__adddf3>
 8006130:	4622      	mov	r2, r4
 8006132:	462b      	mov	r3, r5
 8006134:	f7fa fa08 	bl	8000548 <__aeabi_dmul>
 8006138:	a373      	add	r3, pc, #460	; (adr r3, 8006308 <__ieee754_pow+0x728>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa f84d 	bl	80001dc <__adddf3>
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	f7fa f9ff 	bl	8000548 <__aeabi_dmul>
 800614a:	a371      	add	r3, pc, #452	; (adr r3, 8006310 <__ieee754_pow+0x730>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa f844 	bl	80001dc <__adddf3>
 8006154:	4622      	mov	r2, r4
 8006156:	4606      	mov	r6, r0
 8006158:	460f      	mov	r7, r1
 800615a:	462b      	mov	r3, r5
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa f9f2 	bl	8000548 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa f9ec 	bl	8000548 <__aeabi_dmul>
 8006170:	4642      	mov	r2, r8
 8006172:	4604      	mov	r4, r0
 8006174:	460d      	mov	r5, r1
 8006176:	464b      	mov	r3, r9
 8006178:	ec51 0b18 	vmov	r0, r1, d8
 800617c:	f7fa f82e 	bl	80001dc <__adddf3>
 8006180:	ec53 2b19 	vmov	r2, r3, d9
 8006184:	f7fa f9e0 	bl	8000548 <__aeabi_dmul>
 8006188:	4622      	mov	r2, r4
 800618a:	462b      	mov	r3, r5
 800618c:	f7fa f826 	bl	80001dc <__adddf3>
 8006190:	4642      	mov	r2, r8
 8006192:	4682      	mov	sl, r0
 8006194:	468b      	mov	fp, r1
 8006196:	464b      	mov	r3, r9
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa f9d4 	bl	8000548 <__aeabi_dmul>
 80061a0:	4b6b      	ldr	r3, [pc, #428]	; (8006350 <__ieee754_pow+0x770>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	4606      	mov	r6, r0
 80061a6:	460f      	mov	r7, r1
 80061a8:	f7fa f818 	bl	80001dc <__adddf3>
 80061ac:	4652      	mov	r2, sl
 80061ae:	465b      	mov	r3, fp
 80061b0:	f7fa f814 	bl	80001dc <__adddf3>
 80061b4:	2000      	movs	r0, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	460d      	mov	r5, r1
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa f9c1 	bl	8000548 <__aeabi_dmul>
 80061c6:	4b62      	ldr	r3, [pc, #392]	; (8006350 <__ieee754_pow+0x770>)
 80061c8:	4680      	mov	r8, r0
 80061ca:	4689      	mov	r9, r1
 80061cc:	2200      	movs	r2, #0
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa f801 	bl	80001d8 <__aeabi_dsub>
 80061d6:	4632      	mov	r2, r6
 80061d8:	463b      	mov	r3, r7
 80061da:	f7f9 fffd 	bl	80001d8 <__aeabi_dsub>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4650      	mov	r0, sl
 80061e4:	4659      	mov	r1, fp
 80061e6:	f7f9 fff7 	bl	80001d8 <__aeabi_dsub>
 80061ea:	ec53 2b18 	vmov	r2, r3, d8
 80061ee:	f7fa f9ab 	bl	8000548 <__aeabi_dmul>
 80061f2:	4622      	mov	r2, r4
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	462b      	mov	r3, r5
 80061fa:	ec51 0b19 	vmov	r0, r1, d9
 80061fe:	f7fa f9a3 	bl	8000548 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4630      	mov	r0, r6
 8006208:	4639      	mov	r1, r7
 800620a:	f7f9 ffe7 	bl	80001dc <__adddf3>
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7f9 ffdf 	bl	80001dc <__adddf3>
 800621e:	a33e      	add	r3, pc, #248	; (adr r3, 8006318 <__ieee754_pow+0x738>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	2000      	movs	r0, #0
 8006226:	4604      	mov	r4, r0
 8006228:	460d      	mov	r5, r1
 800622a:	f7fa f98d 	bl	8000548 <__aeabi_dmul>
 800622e:	4642      	mov	r2, r8
 8006230:	ec41 0b18 	vmov	d8, r0, r1
 8006234:	464b      	mov	r3, r9
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7f9 ffcd 	bl	80001d8 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7f9 ffc7 	bl	80001d8 <__aeabi_dsub>
 800624a:	a335      	add	r3, pc, #212	; (adr r3, 8006320 <__ieee754_pow+0x740>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f97a 	bl	8000548 <__aeabi_dmul>
 8006254:	a334      	add	r3, pc, #208	; (adr r3, 8006328 <__ieee754_pow+0x748>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	4606      	mov	r6, r0
 800625c:	460f      	mov	r7, r1
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa f971 	bl	8000548 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7f9 ffb5 	bl	80001dc <__adddf3>
 8006272:	9a07      	ldr	r2, [sp, #28]
 8006274:	4b37      	ldr	r3, [pc, #220]	; (8006354 <__ieee754_pow+0x774>)
 8006276:	4413      	add	r3, r2
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7f9 ffae 	bl	80001dc <__adddf3>
 8006280:	4682      	mov	sl, r0
 8006282:	9805      	ldr	r0, [sp, #20]
 8006284:	468b      	mov	fp, r1
 8006286:	f7fa f8f5 	bl	8000474 <__aeabi_i2d>
 800628a:	9a07      	ldr	r2, [sp, #28]
 800628c:	4b32      	ldr	r3, [pc, #200]	; (8006358 <__ieee754_pow+0x778>)
 800628e:	4413      	add	r3, r2
 8006290:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	4652      	mov	r2, sl
 800629a:	465b      	mov	r3, fp
 800629c:	ec51 0b18 	vmov	r0, r1, d8
 80062a0:	f7f9 ff9c 	bl	80001dc <__adddf3>
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	f7f9 ff98 	bl	80001dc <__adddf3>
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
 80062b0:	f7f9 ff94 	bl	80001dc <__adddf3>
 80062b4:	2000      	movs	r0, #0
 80062b6:	4632      	mov	r2, r6
 80062b8:	463b      	mov	r3, r7
 80062ba:	4604      	mov	r4, r0
 80062bc:	460d      	mov	r5, r1
 80062be:	f7f9 ff8b 	bl	80001d8 <__aeabi_dsub>
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	f7f9 ff87 	bl	80001d8 <__aeabi_dsub>
 80062ca:	ec53 2b18 	vmov	r2, r3, d8
 80062ce:	f7f9 ff83 	bl	80001d8 <__aeabi_dsub>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4650      	mov	r0, sl
 80062d8:	4659      	mov	r1, fp
 80062da:	e610      	b.n	8005efe <__ieee754_pow+0x31e>
 80062dc:	2401      	movs	r4, #1
 80062de:	e6a1      	b.n	8006024 <__ieee754_pow+0x444>
 80062e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006330 <__ieee754_pow+0x750>
 80062e4:	e617      	b.n	8005f16 <__ieee754_pow+0x336>
 80062e6:	bf00      	nop
 80062e8:	4a454eef 	.word	0x4a454eef
 80062ec:	3fca7e28 	.word	0x3fca7e28
 80062f0:	93c9db65 	.word	0x93c9db65
 80062f4:	3fcd864a 	.word	0x3fcd864a
 80062f8:	a91d4101 	.word	0xa91d4101
 80062fc:	3fd17460 	.word	0x3fd17460
 8006300:	518f264d 	.word	0x518f264d
 8006304:	3fd55555 	.word	0x3fd55555
 8006308:	db6fabff 	.word	0xdb6fabff
 800630c:	3fdb6db6 	.word	0x3fdb6db6
 8006310:	33333303 	.word	0x33333303
 8006314:	3fe33333 	.word	0x3fe33333
 8006318:	e0000000 	.word	0xe0000000
 800631c:	3feec709 	.word	0x3feec709
 8006320:	dc3a03fd 	.word	0xdc3a03fd
 8006324:	3feec709 	.word	0x3feec709
 8006328:	145b01f5 	.word	0x145b01f5
 800632c:	be3e2fe0 	.word	0xbe3e2fe0
 8006330:	00000000 	.word	0x00000000
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	43400000 	.word	0x43400000
 8006340:	0003988e 	.word	0x0003988e
 8006344:	000bb679 	.word	0x000bb679
 8006348:	080068a8 	.word	0x080068a8
 800634c:	3ff00000 	.word	0x3ff00000
 8006350:	40080000 	.word	0x40080000
 8006354:	080068c8 	.word	0x080068c8
 8006358:	080068b8 	.word	0x080068b8
 800635c:	a3b3      	add	r3, pc, #716	; (adr r3, 800662c <__ieee754_pow+0xa4c>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7f9 ff39 	bl	80001dc <__adddf3>
 800636a:	4622      	mov	r2, r4
 800636c:	ec41 0b1a 	vmov	d10, r0, r1
 8006370:	462b      	mov	r3, r5
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7f9 ff2f 	bl	80001d8 <__aeabi_dsub>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	ec51 0b1a 	vmov	r0, r1, d10
 8006382:	f7fa fb71 	bl	8000a68 <__aeabi_dcmpgt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f47f ae04 	bne.w	8005f94 <__ieee754_pow+0x3b4>
 800638c:	4aa2      	ldr	r2, [pc, #648]	; (8006618 <__ieee754_pow+0xa38>)
 800638e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006392:	4293      	cmp	r3, r2
 8006394:	f340 8107 	ble.w	80065a6 <__ieee754_pow+0x9c6>
 8006398:	151b      	asrs	r3, r3, #20
 800639a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800639e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80063a2:	fa4a fa03 	asr.w	sl, sl, r3
 80063a6:	44da      	add	sl, fp
 80063a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80063ac:	489b      	ldr	r0, [pc, #620]	; (800661c <__ieee754_pow+0xa3c>)
 80063ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80063b2:	4108      	asrs	r0, r1
 80063b4:	ea00 030a 	and.w	r3, r0, sl
 80063b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80063bc:	f1c1 0114 	rsb	r1, r1, #20
 80063c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80063c4:	fa4a fa01 	asr.w	sl, sl, r1
 80063c8:	f1bb 0f00 	cmp.w	fp, #0
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	bfb8      	it	lt
 80063d6:	f1ca 0a00 	rsblt	sl, sl, #0
 80063da:	f7f9 fefd 	bl	80001d8 <__aeabi_dsub>
 80063de:	ec41 0b19 	vmov	d9, r0, r1
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	ec51 0b19 	vmov	r0, r1, d9
 80063ea:	f7f9 fef7 	bl	80001dc <__adddf3>
 80063ee:	a37a      	add	r3, pc, #488	; (adr r3, 80065d8 <__ieee754_pow+0x9f8>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	2000      	movs	r0, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	460d      	mov	r5, r1
 80063fa:	f7fa f8a5 	bl	8000548 <__aeabi_dmul>
 80063fe:	ec53 2b19 	vmov	r2, r3, d9
 8006402:	4606      	mov	r6, r0
 8006404:	460f      	mov	r7, r1
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f7f9 fee5 	bl	80001d8 <__aeabi_dsub>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4640      	mov	r0, r8
 8006414:	4649      	mov	r1, r9
 8006416:	f7f9 fedf 	bl	80001d8 <__aeabi_dsub>
 800641a:	a371      	add	r3, pc, #452	; (adr r3, 80065e0 <__ieee754_pow+0xa00>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7fa f892 	bl	8000548 <__aeabi_dmul>
 8006424:	a370      	add	r3, pc, #448	; (adr r3, 80065e8 <__ieee754_pow+0xa08>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	4680      	mov	r8, r0
 800642c:	4689      	mov	r9, r1
 800642e:	4620      	mov	r0, r4
 8006430:	4629      	mov	r1, r5
 8006432:	f7fa f889 	bl	8000548 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f7f9 fecd 	bl	80001dc <__adddf3>
 8006442:	4604      	mov	r4, r0
 8006444:	460d      	mov	r5, r1
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7f9 fec5 	bl	80001dc <__adddf3>
 8006452:	4632      	mov	r2, r6
 8006454:	463b      	mov	r3, r7
 8006456:	4680      	mov	r8, r0
 8006458:	4689      	mov	r9, r1
 800645a:	f7f9 febd 	bl	80001d8 <__aeabi_dsub>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f7f9 feb7 	bl	80001d8 <__aeabi_dsub>
 800646a:	4642      	mov	r2, r8
 800646c:	4606      	mov	r6, r0
 800646e:	460f      	mov	r7, r1
 8006470:	464b      	mov	r3, r9
 8006472:	4640      	mov	r0, r8
 8006474:	4649      	mov	r1, r9
 8006476:	f7fa f867 	bl	8000548 <__aeabi_dmul>
 800647a:	a35d      	add	r3, pc, #372	; (adr r3, 80065f0 <__ieee754_pow+0xa10>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	f7fa f860 	bl	8000548 <__aeabi_dmul>
 8006488:	a35b      	add	r3, pc, #364	; (adr r3, 80065f8 <__ieee754_pow+0xa18>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7f9 fea3 	bl	80001d8 <__aeabi_dsub>
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	f7fa f857 	bl	8000548 <__aeabi_dmul>
 800649a:	a359      	add	r3, pc, #356	; (adr r3, 8006600 <__ieee754_pow+0xa20>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7f9 fe9c 	bl	80001dc <__adddf3>
 80064a4:	4622      	mov	r2, r4
 80064a6:	462b      	mov	r3, r5
 80064a8:	f7fa f84e 	bl	8000548 <__aeabi_dmul>
 80064ac:	a356      	add	r3, pc, #344	; (adr r3, 8006608 <__ieee754_pow+0xa28>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7f9 fe91 	bl	80001d8 <__aeabi_dsub>
 80064b6:	4622      	mov	r2, r4
 80064b8:	462b      	mov	r3, r5
 80064ba:	f7fa f845 	bl	8000548 <__aeabi_dmul>
 80064be:	a354      	add	r3, pc, #336	; (adr r3, 8006610 <__ieee754_pow+0xa30>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7f9 fe8a 	bl	80001dc <__adddf3>
 80064c8:	4622      	mov	r2, r4
 80064ca:	462b      	mov	r3, r5
 80064cc:	f7fa f83c 	bl	8000548 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7f9 fe7e 	bl	80001d8 <__aeabi_dsub>
 80064dc:	4604      	mov	r4, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7fa f82e 	bl	8000548 <__aeabi_dmul>
 80064ec:	2200      	movs	r2, #0
 80064ee:	ec41 0b19 	vmov	d9, r0, r1
 80064f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7f9 fe6d 	bl	80001d8 <__aeabi_dsub>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	ec51 0b19 	vmov	r0, r1, d9
 8006506:	f7fa f949 	bl	800079c <__aeabi_ddiv>
 800650a:	4632      	mov	r2, r6
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	463b      	mov	r3, r7
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7fa f817 	bl	8000548 <__aeabi_dmul>
 800651a:	4632      	mov	r2, r6
 800651c:	463b      	mov	r3, r7
 800651e:	f7f9 fe5d 	bl	80001dc <__adddf3>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7f9 fe55 	bl	80001d8 <__aeabi_dsub>
 800652e:	4642      	mov	r2, r8
 8006530:	464b      	mov	r3, r9
 8006532:	f7f9 fe51 	bl	80001d8 <__aeabi_dsub>
 8006536:	460b      	mov	r3, r1
 8006538:	4602      	mov	r2, r0
 800653a:	4939      	ldr	r1, [pc, #228]	; (8006620 <__ieee754_pow+0xa40>)
 800653c:	2000      	movs	r0, #0
 800653e:	f7f9 fe4b 	bl	80001d8 <__aeabi_dsub>
 8006542:	ec41 0b10 	vmov	d0, r0, r1
 8006546:	ee10 3a90 	vmov	r3, s1
 800654a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800654e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006552:	da2b      	bge.n	80065ac <__ieee754_pow+0x9cc>
 8006554:	4650      	mov	r0, sl
 8006556:	f000 f86f 	bl	8006638 <scalbn>
 800655a:	ec51 0b10 	vmov	r0, r1, d0
 800655e:	ec53 2b18 	vmov	r2, r3, d8
 8006562:	f7ff bbee 	b.w	8005d42 <__ieee754_pow+0x162>
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <__ieee754_pow+0xa44>)
 8006568:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800656c:	429e      	cmp	r6, r3
 800656e:	f77f af0d 	ble.w	800638c <__ieee754_pow+0x7ac>
 8006572:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <__ieee754_pow+0xa48>)
 8006574:	440b      	add	r3, r1
 8006576:	4303      	orrs	r3, r0
 8006578:	d009      	beq.n	800658e <__ieee754_pow+0x9ae>
 800657a:	ec51 0b18 	vmov	r0, r1, d8
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	f7fa fa53 	bl	8000a2c <__aeabi_dcmplt>
 8006586:	3800      	subs	r0, #0
 8006588:	bf18      	it	ne
 800658a:	2001      	movne	r0, #1
 800658c:	e448      	b.n	8005e20 <__ieee754_pow+0x240>
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	f7f9 fe21 	bl	80001d8 <__aeabi_dsub>
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	f7fa fa5b 	bl	8000a54 <__aeabi_dcmpge>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f43f aef4 	beq.w	800638c <__ieee754_pow+0x7ac>
 80065a4:	e7e9      	b.n	800657a <__ieee754_pow+0x99a>
 80065a6:	f04f 0a00 	mov.w	sl, #0
 80065aa:	e71a      	b.n	80063e2 <__ieee754_pow+0x802>
 80065ac:	ec51 0b10 	vmov	r0, r1, d0
 80065b0:	4619      	mov	r1, r3
 80065b2:	e7d4      	b.n	800655e <__ieee754_pow+0x97e>
 80065b4:	491a      	ldr	r1, [pc, #104]	; (8006620 <__ieee754_pow+0xa40>)
 80065b6:	2000      	movs	r0, #0
 80065b8:	f7ff bb31 	b.w	8005c1e <__ieee754_pow+0x3e>
 80065bc:	2000      	movs	r0, #0
 80065be:	2100      	movs	r1, #0
 80065c0:	f7ff bb2d 	b.w	8005c1e <__ieee754_pow+0x3e>
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7ff bb29 	b.w	8005c1e <__ieee754_pow+0x3e>
 80065cc:	9204      	str	r2, [sp, #16]
 80065ce:	f7ff bb7b 	b.w	8005cc8 <__ieee754_pow+0xe8>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f7ff bb65 	b.w	8005ca2 <__ieee754_pow+0xc2>
 80065d8:	00000000 	.word	0x00000000
 80065dc:	3fe62e43 	.word	0x3fe62e43
 80065e0:	fefa39ef 	.word	0xfefa39ef
 80065e4:	3fe62e42 	.word	0x3fe62e42
 80065e8:	0ca86c39 	.word	0x0ca86c39
 80065ec:	be205c61 	.word	0xbe205c61
 80065f0:	72bea4d0 	.word	0x72bea4d0
 80065f4:	3e663769 	.word	0x3e663769
 80065f8:	c5d26bf1 	.word	0xc5d26bf1
 80065fc:	3ebbbd41 	.word	0x3ebbbd41
 8006600:	af25de2c 	.word	0xaf25de2c
 8006604:	3f11566a 	.word	0x3f11566a
 8006608:	16bebd93 	.word	0x16bebd93
 800660c:	3f66c16c 	.word	0x3f66c16c
 8006610:	5555553e 	.word	0x5555553e
 8006614:	3fc55555 	.word	0x3fc55555
 8006618:	3fe00000 	.word	0x3fe00000
 800661c:	fff00000 	.word	0xfff00000
 8006620:	3ff00000 	.word	0x3ff00000
 8006624:	4090cbff 	.word	0x4090cbff
 8006628:	3f6f3400 	.word	0x3f6f3400
 800662c:	652b82fe 	.word	0x652b82fe
 8006630:	3c971547 	.word	0x3c971547
 8006634:	00000000 	.word	0x00000000

08006638 <scalbn>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	ec55 4b10 	vmov	r4, r5, d0
 800663e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006642:	4606      	mov	r6, r0
 8006644:	462b      	mov	r3, r5
 8006646:	b999      	cbnz	r1, 8006670 <scalbn+0x38>
 8006648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800664c:	4323      	orrs	r3, r4
 800664e:	d03f      	beq.n	80066d0 <scalbn+0x98>
 8006650:	4b35      	ldr	r3, [pc, #212]	; (8006728 <scalbn+0xf0>)
 8006652:	4629      	mov	r1, r5
 8006654:	ee10 0a10 	vmov	r0, s0
 8006658:	2200      	movs	r2, #0
 800665a:	f7f9 ff75 	bl	8000548 <__aeabi_dmul>
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <scalbn+0xf4>)
 8006660:	429e      	cmp	r6, r3
 8006662:	4604      	mov	r4, r0
 8006664:	460d      	mov	r5, r1
 8006666:	da10      	bge.n	800668a <scalbn+0x52>
 8006668:	a327      	add	r3, pc, #156	; (adr r3, 8006708 <scalbn+0xd0>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e01f      	b.n	80066b0 <scalbn+0x78>
 8006670:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006674:	4291      	cmp	r1, r2
 8006676:	d10c      	bne.n	8006692 <scalbn+0x5a>
 8006678:	ee10 2a10 	vmov	r2, s0
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fdac 	bl	80001dc <__adddf3>
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	e022      	b.n	80066d0 <scalbn+0x98>
 800668a:	460b      	mov	r3, r1
 800668c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006690:	3936      	subs	r1, #54	; 0x36
 8006692:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006696:	4296      	cmp	r6, r2
 8006698:	dd0d      	ble.n	80066b6 <scalbn+0x7e>
 800669a:	2d00      	cmp	r5, #0
 800669c:	a11c      	add	r1, pc, #112	; (adr r1, 8006710 <scalbn+0xd8>)
 800669e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a2:	da02      	bge.n	80066aa <scalbn+0x72>
 80066a4:	a11c      	add	r1, pc, #112	; (adr r1, 8006718 <scalbn+0xe0>)
 80066a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066aa:	a319      	add	r3, pc, #100	; (adr r3, 8006710 <scalbn+0xd8>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 ff4a 	bl	8000548 <__aeabi_dmul>
 80066b4:	e7e6      	b.n	8006684 <scalbn+0x4c>
 80066b6:	1872      	adds	r2, r6, r1
 80066b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066bc:	428a      	cmp	r2, r1
 80066be:	dcec      	bgt.n	800669a <scalbn+0x62>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dd08      	ble.n	80066d6 <scalbn+0x9e>
 80066c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066d0:	ec45 4b10 	vmov	d0, r4, r5
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066da:	da08      	bge.n	80066ee <scalbn+0xb6>
 80066dc:	2d00      	cmp	r5, #0
 80066de:	a10a      	add	r1, pc, #40	; (adr r1, 8006708 <scalbn+0xd0>)
 80066e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066e4:	dac0      	bge.n	8006668 <scalbn+0x30>
 80066e6:	a10e      	add	r1, pc, #56	; (adr r1, 8006720 <scalbn+0xe8>)
 80066e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ec:	e7bc      	b.n	8006668 <scalbn+0x30>
 80066ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066f2:	3236      	adds	r2, #54	; 0x36
 80066f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80066fc:	4620      	mov	r0, r4
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <scalbn+0xf8>)
 8006700:	2200      	movs	r2, #0
 8006702:	e7d5      	b.n	80066b0 <scalbn+0x78>
 8006704:	f3af 8000 	nop.w
 8006708:	c2f8f359 	.word	0xc2f8f359
 800670c:	01a56e1f 	.word	0x01a56e1f
 8006710:	8800759c 	.word	0x8800759c
 8006714:	7e37e43c 	.word	0x7e37e43c
 8006718:	8800759c 	.word	0x8800759c
 800671c:	fe37e43c 	.word	0xfe37e43c
 8006720:	c2f8f359 	.word	0xc2f8f359
 8006724:	81a56e1f 	.word	0x81a56e1f
 8006728:	43500000 	.word	0x43500000
 800672c:	ffff3cb0 	.word	0xffff3cb0
 8006730:	3c900000 	.word	0x3c900000

08006734 <with_errno>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	4604      	mov	r4, r0
 8006738:	460d      	mov	r5, r1
 800673a:	4616      	mov	r6, r2
 800673c:	f7ff f86c 	bl	8005818 <__errno>
 8006740:	4629      	mov	r1, r5
 8006742:	6006      	str	r6, [r0, #0]
 8006744:	4620      	mov	r0, r4
 8006746:	bd70      	pop	{r4, r5, r6, pc}

08006748 <xflow>:
 8006748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	b108      	cbz	r0, 8006754 <xflow+0xc>
 8006750:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006754:	e9cd 2300 	strd	r2, r3, [sp]
 8006758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7f9 fef2 	bl	8000548 <__aeabi_dmul>
 8006764:	2222      	movs	r2, #34	; 0x22
 8006766:	b003      	add	sp, #12
 8006768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676c:	f7ff bfe2 	b.w	8006734 <with_errno>

08006770 <__math_uflow>:
 8006770:	b508      	push	{r3, lr}
 8006772:	2200      	movs	r2, #0
 8006774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006778:	f7ff ffe6 	bl	8006748 <xflow>
 800677c:	ec41 0b10 	vmov	d0, r0, r1
 8006780:	bd08      	pop	{r3, pc}

08006782 <__math_oflow>:
 8006782:	b508      	push	{r3, lr}
 8006784:	2200      	movs	r2, #0
 8006786:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800678a:	f7ff ffdd 	bl	8006748 <xflow>
 800678e:	ec41 0b10 	vmov	d0, r0, r1
 8006792:	bd08      	pop	{r3, pc}

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
